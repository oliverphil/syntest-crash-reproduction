{
    "crash1": {
        "crashProject": "moment",
        "trace": "    at configFromInput (moment/src/lib/create/from-anything.js:68:32)\n    at prepareConfig (moment/src/lib/create/from-anything.js:55:11)\n    at createFromConfig (moment/src/lib/create/from-anything.js:22:64)\n    at createLocalOrUTC (moment/src/lib/create/from-anything.js:116:10)\n    at createLocal (moment/src/lib/create/local.js:4:28)\n    at calendar (moment/src/lib/moment/calendar.js:41:179)\n    at call (.syntest/tests/tempTest.spec.js:11:22)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:476:21)\n",
        "errors": [
            "TypeError: _hooks.hooks.now is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {calendar} from \"../instrumented/moment/src/lib/moment/calendar.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst time = undefined;",
                "\t\tconst formats = undefined;",
                "\t\tconst calendarReturnValue = await calendar(time, formats)",
                "\t\tconst time1 = true;",
                "\t\tconst formats1 = {}",
                "\t\tconst calendarReturnValue1 = await calendar(time1, formats1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash2": {
        "crashProject": "moment",
        "trace": "    at configFromInput (moment/src/lib/create/from-anything.js:68:32)\n    at prepareConfig (moment/src/lib/create/from-anything.js:55:11)\n    at createFromConfig (moment/src/lib/create/from-anything.js:22:64)\n    at createLocalOrUTC (moment/src/lib/create/from-anything.js:116:10)\n    at createLocal (moment/src/lib/create/local.js:4:28)\n    at _context (moment/src/lib/moment/calendar.js:41:179)\n    at call (.syntest/tests/tempTest.spec.js:19:31)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: _hooks.hooks.now is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {calendar} from \"../instrumented/moment/src/lib/moment/calendar.js\";",
                "import {getCalendarFormat} from \"../instrumented/moment/src/lib/moment/calendar.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst diff = () => {};",
                "\t\tconst myMoment = {",
                "\t\t\t\"diff\": diff",
                "\t\t}",
                "\t\tconst now = 2274;",
                "\t\tconst anon = false;",
                "\t\tconst getCalendarFormatReturnValue = await getCalendarFormat(myMoment, now, anon)",
                "\t\tconst time = undefined;",
                "\t\tconst formats = undefined;",
                "\t\tconst anon1 = false;",
                "\t\tconst calendarReturnValue = await calendar(time, formats, anon1)",
                "\t\tconst time1 = \"!U1.qsj5uP5:]HSv(--`<g{n§mA=FO9oweoMI±CTQ.TjUo43 q@dG+},\";",
                "\t\tconst parentLocale = null;",
                "\t\tconst parentLocale1 = {",
                "\t\t\t\"parentLocale\": parentLocale",
                "\t\t}",
                "\t\tconst formats1 = {",
                "\t\t\t\"parentLocale\": parentLocale1",
                "\t\t}",
                "\t\tconst calendarReturnValue1 = await calendar(time1, formats1)",
                "\t\tconst parentLocale2 = null;",
                "\t\tconst parentLocale3 = {",
                "\t\t\t\"parentLocale\": parentLocale2",
                "\t\t}",
                "\t\tconst formats2 = {",
                "\t\t\t\"parentLocale\": parentLocale3",
                "\t\t}",
                "\t\tconst now1 = 1970;",
                "\t\tconst getCalendarFormatReturnValue1 = await getCalendarFormat(formats2, now1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash3": {
        "crashProject": "moment",
        "trace": "    at cloneWithOffset (moment/src/lib/units/offset.js:75:15)\n    at milliseconds (moment/src/lib/moment/calendar.js:42:53)\n    at call (.syntest/tests/tempTest.spec.js:13:21)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:476:21)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading '_isUTC')",
            "TypeError: Cannot set properties of undefined (setting '_isAMomentObject')",
            "TypeError: Cannot read properties of null (reading '_isAMomentObject')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {calendar} from \"../instrumented/moment/src/lib/moment/calendar.js\";",
                "import {getCalendarFormat} from \"../instrumented/moment/src/lib/moment/calendar.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst time = \"u+K^aTtfX{`zU/UoNo~\\\"A\\nex L{*kq?2;\\\"3'F>rz2XI@sXF\\\\[§|1*HBwWs~0QV)CsS]|P03+=nKL</~ICxk='p/1@qKZ\";",
                "\t\tconst arrayElement = false;",
                "\t\tconst arrayElement1 = true;",
                "\t\tconst formats = [arrayElement, arrayElement1]",
                "\t\tconst calendarReturnValue = await calendar(time, formats)",
                "\t\tconst diff = () => {};",
                "\t\tconst myMoment = {",
                "\t\t\t\"diff\": diff",
                "\t\t}",
                "\t\tconst now = () => {};",
                "\t\tconst getCalendarFormatReturnValue = await getCalendarFormat(myMoment, now)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {Moment} from \"../instrumented/moment/src/lib/moment/constructor.js\";",
                "import {isMoment} from \"../instrumented/moment/src/lib/moment/constructor.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst isAMomentObject = \"އަހަރު 2\";",
                "\t\tconst i = \"තත්පර කිහිපය\";",
                "\t\tconst f = \"hour diff on same hour is zero, not -0\";",
                "\t\tconst l = null;",
                "\t\tconst strict = \"[bugün sagat] LT\";",
                "\t\tconst tzm = () => {};",
                "\t\tconst isUTC = () => {};",
                "\t\tconst offset = 2291;",
                "\t\tconst pf = -746.1269331383011;",
                "\t\tconst locale = \"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि\";",
                "\t\tconst localConfig = {",
                "\t\t\t\"_isAMomentObject\": isAMomentObject,",
                "\t\t\t\"_i\": i,",
                "\t\t\t\"_f\": f,",
                "\t\t\t\"_l\": l,",
                "\t\t\t\"_strict\": strict,",
                "\t\t\t\"_tzm\": tzm,",
                "\t\t\t\"_isUTC\": isUTC,",
                "\t\t\t\"_offset\": offset,",
                "\t\t\t\"_pf\": pf,",
                "\t\t\t\"_locale\": locale",
                "\t\t}",
                "\t\tconst anon = {}",
                "\t\tconst momentReturnValue = await Moment(localConfig, anon)",
                "\t\tconst isAMomentObject1 = \"އަހަރު 2\";",
                "\t\tconst i1 = \"තත්පර කිහිපය\";",
                "\t\tconst f1 = \"hour diff on same hour is zero, not -0\";",
                "\t\tconst l1 = null;",
                "\t\tconst strict1 = \"[bugün sagat] LT\";",
                "\t\tconst tzm1 = () => {};",
                "\t\tconst isUTC1 = () => {};",
                "\t\tconst offset1 = 2291;",
                "\t\tconst pf1 = -746.1269331383011;",
                "\t\tconst locale1 = \"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि\";",
                "\t\tconst localConfig1 = {",
                "\t\t\t\"_isAMomentObject\": isAMomentObject1,",
                "\t\t\t\"_i\": i1,",
                "\t\t\t\"_f\": f1,",
                "\t\t\t\"_l\": l1,",
                "\t\t\t\"_strict\": strict1,",
                "\t\t\t\"_tzm\": tzm1,",
                "\t\t\t\"_isUTC\": isUTC1,",
                "\t\t\t\"_offset\": offset1,",
                "\t\t\t\"_pf\": pf1,",
                "\t\t\t\"_locale\": locale1",
                "\t\t}",
                "\t\tconst isMomentReturnValue = await isMoment(localConfig1)",
                "\t\tconst localConfig2 = \"pár sekundami\";",
                "\t\tconst momentReturnValue1 = await Moment(localConfig2)",
                "\t\tconst l2 = null;",
                "\t\tconst arrayElement = \"2100 feb 29\";",
                "\t\tconst localConfig3 = [l2, arrayElement]",
                "\t\tconst anon1 = \"nokkrar sekúndur\";",
                "\t\tconst momentReturnValue2 = await Moment(localConfig3, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {Moment} from \"../instrumented/moment/src/lib/moment/constructor.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localConfig = null;",
                "\t\tconst momentReturnValue = await Moment(localConfig)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash4": {
        "crashProject": "moment",
        "trace": "    at cloneWithOffset (moment/src/lib/units/offset.js:75:15)\n    at calendar (moment/src/lib/moment/calendar.js:42:53)\n    at call (.syntest/tests/tempTest.spec.js:19:90)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading '_isUTC')",
            "TypeError: Cannot set properties of undefined (setting '_isAMomentObject')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {calendar} from \"../instrumented/moment/src/lib/moment/calendar.js\";",
                "import {getCalendarFormat} from \"../instrumented/moment/src/lib/moment/calendar.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst diff = () => {};",
                "\t\tconst myMoment = {",
                "\t\t\t\"diff\": diff",
                "\t\t}",
                "\t\tconst now = \"7ou};oQ-!9u1OL;;*a]CI@JeYw7j_Q(*^^k\";",
                "\t\tconst anon = undefined;",
                "\t\tconst getCalendarFormatReturnValue = await getCalendarFormat(myMoment, now, anon)",
                "\t\tconst time = {}",
                "\t\tconst formats = {}",
                "\t\tconst calendarReturnValue = await calendar(time, formats)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {Moment} from \"../instrumented/moment/src/lib/moment/constructor.js\";",
                "import {copyConfig} from \"../instrumented/moment/src/lib/moment/constructor.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst isAMomentObject = {}",
                "\t\tconst i = \"pred dňom\";",
                "\t\tconst f = -74.33756820358781;",
                "\t\tconst l = {}",
                "\t\tconst strict = \"VDt9q}m\";",
                "\t\tconst tzm = -952;",
                "\t\tconst isUTC = \"±N.Y<Z.ZOztc?bgzPyyP|)Ini9#Dq}y^]\\\\68)_V(IZ;2S*f8jJB9/'%h\";",
                "\t\tconst offset = \"yo\";",
                "\t\tconst pf = null;",
                "\t\tconst locale = -469;",
                "\t\tconst to = {",
                "\t\t\t\"_isAMomentObject\": isAMomentObject,",
                "\t\t\t\"_i\": i,",
                "\t\t\t\"_f\": f,",
                "\t\t\t\"_l\": l,",
                "\t\t\t\"_strict\": strict,",
                "\t\t\t\"_tzm\": tzm,",
                "\t\t\t\"_isUTC\": isUTC,",
                "\t\t\t\"_offset\": offset,",
                "\t\t\t\"_pf\": pf,",
                "\t\t\t\"_locale\": locale",
                "\t\t}",
                "\t\tconst isAMomentObject1 = {}",
                "\t\tconst arrayElement = true;",
                "\t\tconst arrayElement1 = {}",
                "\t\tconst arrayElement2 = [arrayElement1]",
                "\t\tconst i1 = [arrayElement, arrayElement2]",
                "\t\tconst f1 = {}",
                "\t\tconst l1 = \"AD, AD, AD\";",
                "\t\tconst strict1 = {}",
                "\t\tconst tzm1 = {}",
                "\t\tconst isUTC1 = {}",
                "\t\tconst offset1 = null;",
                "\t\tconst pf1 = undefined;",
                "\t\tconst locale1 = null;",
                "\t\tconst from = {",
                "\t\t\t\"_isAMomentObject\": isAMomentObject1,",
                "\t\t\t\"_i\": i1,",
                "\t\t\t\"_f\": f1,",
                "\t\t\t\"_l\": l1,",
                "\t\t\t\"_strict\": strict1,",
                "\t\t\t\"_tzm\": tzm1,",
                "\t\t\t\"_isUTC\": isUTC1,",
                "\t\t\t\"_offset\": offset1,",
                "\t\t\t\"_pf\": pf1,",
                "\t\t\t\"_locale\": locale1",
                "\t\t}",
                "\t\tconst anon = () => {};",
                "\t\tconst copyConfigReturnValue = await copyConfig(to, from, anon)",
                "\t\tconst isUTC2 = {}",
                "\t\tconst isUTC3 = {}",
                "\t\tconst copyConfigReturnValue1 = await copyConfig(isUTC2, isUTC3)",
                "\t\tconst isAMomentObject2 = {}",
                "\t\tconst i2 = \"UE.pmp[U±'H5aBk_2V[!Xtg6B>0?/l1Nn_(_\";",
                "\t\tconst i3 = \"pred dňom\";",
                "\t\tconst isAMomentObject3 = {}",
                "\t\tconst arrayElement3 = true;",
                "\t\tconst arrayElement4 = true;",
                "\t\tconst pf2 = undefined;",
                "\t\tconst locale2 = null;",
                "\t\tconst arrayElement5 = {}",
                "\t\tconst strict2 = {}",
                "\t\tconst localConfig = {",
                "\t\t\t\"_isAMomentObject\": isAMomentObject2,",
                "\t\t\t\"_i\": i2,",
                "\t\t\t\"_f\": i3,",
                "\t\t\t\"_l\": isAMomentObject3,",
                "\t\t\t\"_strict\": arrayElement3,",
                "\t\t\t\"_tzm\": arrayElement4,",
                "\t\t\t\"_isUTC\": pf2,",
                "\t\t\t\"_offset\": locale2,",
                "\t\t\t\"_pf\": arrayElement5,",
                "\t\t\t\"_locale\": strict2",
                "\t\t}",
                "\t\tconst momentReturnValue = await Moment(localConfig)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash5": {
        "crashProject": "moment",
        "trace": "    at configFromInput (moment/src/lib/create/from-anything.js:68:32)\n    at prepareConfig (moment/src/lib/create/from-anything.js:55:11)\n    at createFromConfig (moment/src/lib/create/from-anything.js:22:64)\n    at createLocalOrUTC (moment/src/lib/create/from-anything.js:116:10)\n    at createLocal (moment/src/lib/create/local.js:4:28)\n    at isAfter (moment/src/lib/moment/compare.js:16:667)\n    at call (.syntest/tests/tempTest.spec.js:11:22)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:476:21)\n",
        "errors": [
            "TypeError: _hooks.hooks.now is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {isAfter} from \"../instrumented/moment/src/lib/moment/compare.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst input = undefined;",
                "\t\tconst units = false;",
                "\t\tconst isAfterReturnValue = await isAfter(input, units)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash6": {
        "crashProject": "moment",
        "trace": "    at currentDateArray (moment/src/lib/create/from-array.js:24:58)\n    at configFromArray (moment/src/lib/create/from-array.js:51:17)\n    at configFromObject (moment/src/lib/create/from-object.js:19:18)\n    at configFromInput (moment/src/lib/create/from-anything.js:79:29)\n    at prepareConfig (moment/src/lib/create/from-anything.js:55:11)\n    at createFromConfig (moment/src/lib/create/from-anything.js:22:64)\n    at createLocalOrUTC (moment/src/lib/create/from-anything.js:116:10)\n    at createLocal (moment/src/lib/create/local.js:4:28)\n    at isBetween (moment/src/lib/moment/compare.js:32:332)\n    at call (.syntest/tests/tempTest.spec.js:19:90)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:476:21)\n",
        "errors": [
            "TypeError: _hooks.hooks.now is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {isBetween} from \"../instrumented/moment/src/lib/moment/compare.js\";",
                "import {isSame} from \"../instrumented/moment/src/lib/moment/compare.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst isValid = () => {};",
                "\t\tconst from = {",
                "\t\t\t\"isValid\": isValid",
                "\t\t}",
                "\t\tconst isValid1 = () => {};",
                "\t\tconst to = {",
                "\t\t\t\"isValid\": isValid1",
                "\t\t}",
                "\t\tconst units = undefined;",
                "\t\tconst inclusivity = true;",
                "\t\tconst anon = []",
                "\t\tconst anon1 = \"\\tn~bXw1:73Q3U\\nSduHox\";",
                "\t\tconst isBetweenReturnValue = await isBetween(from, to, units, inclusivity, anon, anon1)",
                "\t\tconst inclusivity1 = true;",
                "\t\tconst units1 = true;",
                "\t\tconst isSameReturnValue = await isSame(inclusivity1, units1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash7": {
        "crashProject": "moment",
        "trace": "    at prepareConfig (moment/src/lib/create/from-anything.js:43:40)\n    at createFromConfig (moment/src/lib/create/from-anything.js:22:64)\n    at createLocalOrUTC (moment/src/lib/create/from-anything.js:116:10)\n    at createLocal (moment/src/lib/create/local.js:4:28)\n    at isBefore (moment/src/lib/moment/compare.js:19:337)\n    at call (.syntest/tests/tempTest.spec.js:11:22)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:476:21)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading 'preparse')",
            "TypeError: this.isValid is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {isBefore} from \"../instrumented/moment/src/lib/moment/compare.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst input = \"=`S6m6-\";",
                "\t\tconst units = true;",
                "\t\tconst isBeforeReturnValue = await isBefore(input, units)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {isBefore} from \"../instrumented/moment/src/lib/moment/compare.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst input = () => {};",
                "\t\tconst units = true;",
                "\t\tconst arrayElement = 315;",
                "\t\tconst arrayElement1 = undefined;",
                "\t\tconst arrayElement2 = {}",
                "\t\tconst arrayElement3 = undefined;",
                "\t\tconst arrayElement4 = {}",
                "\t\tconst arrayElement5 = {}",
                "\t\tconst arrayElement6 = [arrayElement2, arrayElement3, arrayElement4, arrayElement5]",
                "\t\tconst arrayElement7 = null;",
                "\t\tconst arrayElement8 = () => {};",
                "\t\tconst anon = [arrayElement, arrayElement1, arrayElement6, arrayElement7, arrayElement8]",
                "\t\tconst anon1 = null;",
                "\t\tconst isBeforeReturnValue = await isBefore(input, units, anon, anon1)",
                "\t\tconst isValid = () => {};",
                "\t\tconst localValueOf = () => {};",
                "\t\tconst input1 = {",
                "\t\t\t\"isValid\": isValid,",
                "\t\t\t\"valueOf\": localValueOf",
                "\t\t}",
                "\t\tconst units1 = \"\\nC[\\nwQ1%SS3}13~3)}6\\n§p4;Li±(Gz&2-']@/xREH1wYL9s}%-/H§HCrV]R)/}kA+mq\";",
                "\t\tconst arrayElement9 = () => {};",
                "\t\tconst anon2 = \"UTC zone abbr should be UTC\";",
                "\t\tconst isBeforeReturnValue1 = await isBefore(input1, units1, arrayElement9, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash8": {
        "crashProject": "moment",
        "trace": "    at currentDateArray (moment/src/lib/create/from-array.js:24:58)\n    at configFromArray (moment/src/lib/create/from-array.js:51:17)\n    at configFromInput (moment/src/lib/create/from-anything.js:77:26)\n    at prepareConfig (moment/src/lib/create/from-anything.js:55:11)\n    at createFromConfig (moment/src/lib/create/from-anything.js:22:64)\n    at createLocalOrUTC (moment/src/lib/create/from-anything.js:116:10)\n    at createLocal (moment/src/lib/create/local.js:4:28)\n    at isBefore (moment/src/lib/moment/compare.js:19:337)\n    at call (.syntest/tests/tempTest.spec.js:12:20)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:476:21)\n",
        "errors": [
            "TypeError: _hooks.hooks.now is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {isBefore} from \"../instrumented/moment/src/lib/moment/compare.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = \"(*;Z?BzNLD'Ba(2-dW{Qrs\\\\& JyX#§*\\nH4qK±W%Eha<^\\ngS`4('$<\\\"._7\";",
                "\t\tconst input = [arrayElement]",
                "\t\tconst units = \"Бүгүн саат 13:00\";",
                "\t\tconst isBeforeReturnValue = await isBefore(input, units)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash9": {
        "crashProject": "moment",
        "trace": "    at new Moment (moment/src/lib/moment/constructor.js:64:61)\n    at createFromConfig (moment/src/lib/create/from-anything.js:22:39)\n    at createLocalOrUTC (moment/src/lib/create/from-anything.js:116:10)\n    at createUTC (moment/src/lib/create/utc.js:4:28)\n    at createInvalid (moment/src/lib/create/valid.js:43:47)\n    at prepareConfig (moment/src/lib/create/from-anything.js:39:25)\n    at createFromConfig (moment/src/lib/create/from-anything.js:22:64)\n    at createLocalOrUTC (moment/src/lib/create/from-anything.js:116:10)\n    at createLocal (moment/src/lib/create/local.js:4:28)\n    at isBetween (moment/src/lib/moment/compare.js:32:332)\n    at call (.syntest/tests/tempTest.spec.js:19:90)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:476:21)\n",
        "errors": [
            "TypeError: this.isValid is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {isBetween} from \"../instrumented/moment/src/lib/moment/compare.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst from = null;",
                "\t\tconst isValid = () => {};",
                "\t\tconst to = {",
                "\t\t\t\"isValid\": isValid",
                "\t\t}",
                "\t\tconst units = 2128;",
                "\t\tconst arrayElement = \"the 45th day of the year\";",
                "\t\tconst arrayElement1 = \"६\";",
                "\t\tconst arrayElement2 = 168.12918725718487;",
                "\t\tconst arrayElement3 = 117.70510346870878;",
                "\t\tconst inclusivity = [arrayElement, arrayElement1, arrayElement2, arrayElement3]",
                "\t\tconst anon = \"~fo§]b9;y3'r>@GUl}V3± 5u?OV^5IIly1T§uQ&uE1\";",
                "\t\tconst isBetweenReturnValue = await isBetween(from, to, units, inclusivity, anon)",
                "\t\tconst isValid1 = () => {};",
                "\t\tconst from1 = {",
                "\t\t\t\"isValid\": isValid1",
                "\t\t}",
                "\t\tconst isValid2 = () => {};",
                "\t\tconst to1 = {",
                "\t\t\t\"isValid\": isValid2",
                "\t\t}",
                "\t\tconst isValid3 = () => {};",
                "\t\tconst inclusivity1 = \"LqW#\\n P<w}4'@{7p|]'ZN!NjW]]YBG!U[Cr^lI@IlyE3M?U(Jt0<d\\\"rct'6:-8rm%E={lG\\nGOU±5xvY:b<§Vsgq/i-!6g\";",
                "\t\tconst isBetweenReturnValue1 = await isBetween(from1, to1, isValid3, inclusivity1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    }
}
{
    "crash1": {
        "crashProject": "commander",
        "trace": "    at Help.visibleOptions (commanderjs/lib/help.js:56:59)\n    at Help.longestOptionTermLength (commanderjs/lib/help.js:175:19)\n    at Help.padWidth (commanderjs/lib/help.js:394:14)\n    at Help.formatHelp (commanderjs/lib/help.js:318:58)\n    at call (.syntest/tests/tempTest.spec.js:20:15)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot read properties of null (reading 'options')",
            "TypeError: Cannot read properties of undefined (reading 'filter')",
            "TypeError: Cannot read properties of undefined (reading 'options')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet InvalidArgumentError;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/error.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({InvalidArgumentError} = require(\"../instrumented/commanderjs/lib/error.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localHelp = new Help()",
                "\t\tconst cmd = null;",
                "\t\tconst helper = new Help()",
                "\t\tconst formatHelpReturnValue = await localHelp.formatHelp(cmd, helper)",
                "\t\tconst localHelp1 = new Help()",
                "\t\tconst cmd1 = \"rcV<%G|\\n5&T;4%§o~qUt3bc+tu±q&1q'E=`=,7P7%_j+)%e)%'?u >\";",
                "\t\tconst helper1 = 15.109242050168632;",
                "\t\tconst anon = 2;",
                "\t\tconst longestOptionTermLengthReturnValue = await localHelp1.longestOptionTermLength(cmd1, helper1, anon)",
                "\t\tconst localHelp2 = new Help()",
                "\t\tconst cmd2 = \"rcV<%G|\\n5&T;4%§o~qUt3bc+tu±q&1q'E=`=,7P7%_j+)%e)%'?u >\";",
                "\t\tconst anon1 = {}",
                "\t\tconst argument = new InvalidArgumentError(cmd2, anon1)",
                "\t\tconst anon2 = false;",
                "\t\tconst argumentTermReturnValue = await localHelp2.argumentTerm(argument, anon2)",
                "\t\tconst localHelp3 = new Help()",
                "\t\tconst anon3 = {}",
                "\t\tconst argumentDescriptionReturnValue = await localHelp3.argumentDescription(anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = null;",
                "\t\tconst localHelp = new Help(anon)",
                "\t\tconst cmd = false;",
                "\t\tconst helper = new Help()",
                "\t\tconst formatHelpReturnValue = await localHelp.formatHelp(cmd, helper)",
                "\t\tconst helper1 = new Help()",
                "\t\tconst arrayElement = 0.4;",
                "\t\tconst arrayElement1 = {}",
                "\t\tconst arrayElement2 = [arrayElement1]",
                "\t\tconst cmd1 = [arrayElement, arrayElement2]",
                "\t\tconst visibleOptions = () => {};",
                "\t\tconst optionTerm = () => {};",
                "\t\tconst helper2 = {",
                "\t\t\t\"visibleOptions\": visibleOptions,",
                "\t\t\t\"optionTerm\": optionTerm",
                "\t\t}",
                "\t\tconst anon1 = null;",
                "\t\tconst longestOptionTermLengthReturnValue = await helper1.longestOptionTermLength(cmd1, helper2, anon1)",
                "\t\tconst anon2 = null;",
                "\t\tconst localHelp1 = new Help(anon2)",
                "\t\tconst cmd2 = false;",
                "\t\tconst option = {",
                "\t\t\t\"flags\": cmd2",
                "\t\t}",
                "\t\tconst optionTermReturnValue = await localHelp1.optionTerm(option)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localHelp = new Help()",
                "\t\tconst cmd = undefined;",
                "\t\tconst anon = 2;",
                "\t\tconst helper = new Help(anon)",
                "\t\tconst formatHelpReturnValue = await localHelp.formatHelp(cmd, helper)",
                "\t\tconst localHelp1 = new Help()",
                "\t\tconst localName = () => {};",
                "\t\tconst argument = {",
                "\t\t\t\"name\": localName",
                "\t\t}",
                "\t\tconst anon1 = \"[second]\";",
                "\t\tconst argumentTermReturnValue = await localHelp1.argumentTerm(argument, anon1)",
                "\t\tconst localHelp2 = new Help()",
                "\t\tconst description = () => {};",
                "\t\tconst cmd1 = {",
                "\t\t\t\"description\": description",
                "\t\t}",
                "\t\tconst anon2 = 24;",
                "\t\tconst commandDescriptionReturnValue = await localHelp2.commandDescription(cmd1, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash2": {
        "crashProject": "commander",
        "trace": "    at splitOptionFlags (commanderjs/lib/option.js:198:79)\n    at new _context (commanderjs/lib/option.js:27:75)\n    at call (.syntest/tests/tempTest.spec.js:23:19)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: flags.split is not a function",
            "TypeError: Cannot read properties of undefined (reading 'options')",
            "TypeError: Cannot read properties of undefined (reading 'find')",
            "TypeError: Cannot read properties of null (reading 'commands')",
            "TypeError: Cannot read properties of undefined (reading 'filter')",
            "TypeError: Cannot read properties of undefined (reading 'commands')",
            "TypeError: Cannot read properties of undefined (reading '_argsDescription')",
            "TypeError: Cannot read properties of null (reading '_argsDescription')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet Option;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/option.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({Option} = require(\"../instrumented/commanderjs/lib/option.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localHelp = new Help()",
                "\t\tconst includes = () => {};",
                "\t\tconst flags = {",
                "\t\t\t\"includes\": includes",
                "\t\t}",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst arrayElement1 = true;",
                "\t\tconst description = [arrayElement, arrayElement1]",
                "\t\tconst cmd = new Option(flags, description)",
                "\t\tconst anon = -620;",
                "\t\tconst helper = new Help(anon)",
                "\t\tconst anon1 = 202;",
                "\t\tconst longestSubcommandTermLengthReturnValue = await localHelp.longestSubcommandTermLength(cmd, helper, anon1)",
                "\t\tconst anon2 = -620;",
                "\t\tconst helper1 = new Help(anon2)",
                "\t\tconst includes1 = () => {};",
                "\t\tconst flags1 = {",
                "\t\t\t\"includes\": includes1",
                "\t\t}",
                "\t\tconst argumentDescriptionReturnValue = await helper1.argumentDescription(flags1)",
                "\t\tconst anon3 = -620;",
                "\t\tconst helper2 = new Help(anon3)",
                "\t\tconst arrayElement2 = true;",
                "\t\tconst includes2 = () => {};",
                "\t\tconst flags2 = {",
                "\t\t\t\"includes\": includes2",
                "\t\t}",
                "\t\tconst anon4 = 202;",
                "\t\tconst longestArgumentTermLengthReturnValue = await helper2.longestArgumentTermLength(arrayElement2, flags2, anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet Command;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/command.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({Command} = require(\"../instrumented/commanderjs/lib/command.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = \"± }$ljFm5B\";",
                "\t\tconst localHelp = new Help(anon)",
                "\t\tconst cmd = undefined;",
                "\t\tconst helper = new Help()",
                "\t\tconst anon1 = \"$)@j'LZ/c'!T7%\\\\^xUY0)\\nmp-NyeOU\\\\*m4h?I±j§@Gz±LrRNn\\nDoy§ODfz|P4ZGk 6f<fR;v-OuhgqoW\";",
                "\t\tconst longestOptionTermLengthReturnValue = await localHelp.longestOptionTermLength(cmd, helper, anon1)",
                "\t\tconst anon2 = \"± }$ljFm5B\";",
                "\t\tconst localHelp1 = new Help(anon2)",
                "\t\tconst filter = () => {};",
                "\t\tconst commands = {",
                "\t\t\t\"filter\": filter",
                "\t\t}",
                "\t\tconst hasImplicitHelpCommand = () => {};",
                "\t\tconst localName = false;",
                "\t\tconst helpCommandnameAndArgs = new Command(localName)",
                "\t\tconst createCommand = () => {};",
                "\t\tconst anon3 = \"± }$ljFm5B\";",
                "\t\tconst cmd1 = {",
                "\t\t\t\"commands\": commands,",
                "\t\t\t\"_hasImplicitHelpCommand\": hasImplicitHelpCommand,",
                "\t\t\t\"_helpCommandnameAndArgs\": helpCommandnameAndArgs,",
                "\t\t\t\"createCommand\": createCommand,",
                "\t\t\t\"_helpCommandDescription\": anon3",
                "\t\t}",
                "\t\tconst visibleCommandsReturnValue = await localHelp1.visibleCommands(cmd1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = 80;",
                "\t\tconst localHelp = new Help(anon)",
                "\t\tconst cmd = false;",
                "\t\tconst helper = new Help()",
                "\t\tconst anon1 = 866.3846918285622;",
                "\t\tconst longestArgumentTermLengthReturnValue = await localHelp.longestArgumentTermLength(cmd, helper, anon1)",
                "\t\tconst helper1 = new Help()",
                "\t\tconst cmd1 = false;",
                "\t\tconst commandUsageReturnValue = await helper1.commandUsage(cmd1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localHelp = new Help()",
                "\t\tconst cmd = null;",
                "\t\tconst anon = undefined;",
                "\t\tconst helper = new Help(anon)",
                "\t\tconst anon1 = -491;",
                "\t\tconst longestSubcommandTermLengthReturnValue = await localHelp.longestSubcommandTermLength(cmd, helper, anon1)",
                "\t\tconst anon2 = undefined;",
                "\t\tconst helper1 = new Help(anon2)",
                "\t\tconst options = \"pf{`H[D4(RauD`){]MHO@N?X0U5E\\\"l3bh3j\\nnaC.cH±oA0}O!3b2S9p2NosMor(wL\";",
                "\t\tconst hasHelpOption = true;",
                "\t\tconst helpShortFlag = true;",
                "\t\tconst findOption = () => {};",
                "\t\tconst cmd1 = null;",
                "\t\tconst cmd2 = null;",
                "\t\tconst arrayElement = \"commander.unknownOption\";",
                "\t\tconst cmd3 = null;",
                "\t\tconst helpDescription = [arrayElement, cmd3]",
                "\t\tconst helpFlags = \"-l, --list <items>\";",
                "\t\tconst cmd4 = {",
                "\t\t\t\"options\": options,",
                "\t\t\t\"_hasHelpOption\": hasHelpOption,",
                "\t\t\t\"_helpShortFlag\": helpShortFlag,",
                "\t\t\t\"_findOption\": findOption,",
                "\t\t\t\"_helpLongFlag\": cmd1,",
                "\t\t\t\"createOption\": cmd2,",
                "\t\t\t\"_helpDescription\": helpDescription,",
                "\t\t\t\"_helpFlags\": helpFlags",
                "\t\t}",
                "\t\tconst anon3 = \" !D$;J<b{j^6vSPVwRAqa$(CE{iW{_sYf]U6k1;W\\\"DTkmy4'qr,s±$InfU\\\\Jk\\\"C\";",
                "\t\tconst visibleOptionsReturnValue = await helper1.visibleOptions(cmd4, anon3)",
                "\t\tconst anon4 = undefined;",
                "\t\tconst helper2 = new Help(anon4)",
                "\t\tconst cmd5 = \"call .storeOptionsAsProperties() before adding options\";",
                "\t\tconst visibleOptionsReturnValue1 = await helper2.visibleOptions(cmd5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet Option;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/option.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({Option} = require(\"../instrumented/commanderjs/lib/option.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = null;",
                "\t\tconst anon1 = 80;",
                "\t\tconst localHelp = new Help(anon, anon1)",
                "\t\tconst cmd = () => {};",
                "\t\tconst anon2 = null;",
                "\t\tconst helper = new Help(anon2)",
                "\t\tconst longestSubcommandTermLengthReturnValue = await localHelp.longestSubcommandTermLength(cmd, helper)",
                "\t\tconst anon3 = null;",
                "\t\tconst helper1 = new Help(anon3)",
                "\t\tconst arrayElement = 60;",
                "\t\tconst arrayElement1 = \"1m&]wZSy^1fa~TENVveAG{$`Amb\\\\))'rI%m`'~q*2EKi'n1zm1a{Mzny§]I5PC\\nnqAT24i-8\\nO\";",
                "\t\tconst arrayElement2 = \"lIS&x\";",
                "\t\tconst arrayElement3 = \"^BD\\\\§Fj01qu`MN,6~§uB=Nw~7O}idIt\\n1g%u'bLO`4B<PbY%'\\\"697u5y%'N\";",
                "\t\tconst flags = [arrayElement, arrayElement1, arrayElement2, arrayElement3]",
                "\t\tconst description = \"R@TdKA'\\\"qF§CR,\";",
                "\t\tconst argument = new Option(flags, description)",
                "\t\tconst argumentDescriptionReturnValue = await helper1.argumentDescription(argument)",
                "\t\tconst anon4 = null;",
                "\t\tconst helper2 = new Help(anon4)",
                "\t\tconst localName = () => {};",
                "\t\tconst argument1 = {",
                "\t\t\t\"name\": localName",
                "\t\t}",
                "\t\tconst argumentTermReturnValue = await helper2.argumentTerm(argument1)",
                "\t\tconst anon5 = null;",
                "\t\tconst anon6 = 80;",
                "\t\tconst localHelp1 = new Help(anon5, anon6)",
                "\t\tconst localName1 = () => {};",
                "\t\tconst argument2 = {",
                "\t\t\t\"name\": localName1",
                "\t\t}",
                "\t\tconst arrayElement4 = \"^BD\\\\§Fj01qu`MN,6~§uB=Nw~7O}idIt\\n1g%u'bLO`4B<PbY%'\\\"697u5y%'N\";",
                "\t\tconst visibleArgumentsReturnValue = await localHelp1.visibleArguments(argument2, arrayElement4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet CommanderError;",
                "\tlet Command;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/error.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/command.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({CommanderError} = require(\"../instrumented/commanderjs/lib/error.js\"));",
                "\t\t({Command} = require(\"../instrumented/commanderjs/lib/command.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localHelp = new Help()",
                "\t\tconst cmd = undefined;",
                "\t\tconst anon = \"px-`q~2vh_sv\\\\F\\\\*Zi~[`83Vv'N@\\nnhdYe$)DI\\\\|\";",
                "\t\tconst helper = new Help(anon)",
                "\t\tconst exitCode = true;",
                "\t\tconst code = () => {};",
                "\t\tconst message = undefined;",
                "\t\tconst anon1 = new CommanderError(exitCode, code, message)",
                "\t\tconst longestSubcommandTermLengthReturnValue = await localHelp.longestSubcommandTermLength(cmd, helper, anon1)",
                "\t\tconst localHelp1 = new Help()",
                "\t\tconst localName = () => {};",
                "\t\tconst argument = {",
                "\t\t\t\"name\": localName",
                "\t\t}",
                "\t\tconst argumentTermReturnValue = await localHelp1.argumentTerm(argument)",
                "\t\tconst anon2 = \"px-`q~2vh_sv\\\\F\\\\*Zi~[`83Vv'N@\\nnhdYe$)DI\\\\|\";",
                "\t\tconst helper1 = new Help(anon2)",
                "\t\tconst localName1 = () => {};",
                "\t\tconst argument1 = {",
                "\t\t\t\"name\": localName1",
                "\t\t}",
                "\t\tconst anon3 = null;",
                "\t\tconst localName2 = () => {};",
                "\t\tconst commandUsageReturnValue = await helper1.commandUsage(argument1, anon3, localName2)",
                "\t\tconst localHelp2 = new Help()",
                "\t\tconst localName3 = false;",
                "\t\tconst cmd1 = new Command(localName3)",
                "\t\tconst visibleArgumentsReturnValue = await localHelp2.visibleArguments(cmd1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localHelp = new Help()",
                "\t\tconst cmd = undefined;",
                "\t\tconst anon = () => {};",
                "\t\tconst helper = new Help(anon)",
                "\t\tconst anon1 = \"y>0 :PN_ Q4#$Z<7*>Z}A*M§SF±.k;:q'&H&3f,pRtv \\ns K<-8jE<O/§W=DhU.[zN2&/sdI.^PY8J$z^p({±l$D9RZSqbW\";",
                "\t\tconst longestArgumentTermLengthReturnValue = await localHelp.longestArgumentTermLength(cmd, helper, anon1)",
                "\t\tconst anon2 = () => {};",
                "\t\tconst helper1 = new Help(anon2)",
                "\t\tconst description = () => {};",
                "\t\tconst cmd1 = {",
                "\t\t\t\"description\": description",
                "\t\t}",
                "\t\tconst commandDescriptionReturnValue = await helper1.commandDescription(cmd1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet CommanderError;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/error.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({CommanderError} = require(\"../instrumented/commanderjs/lib/error.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = \"Remaining arguments: \";",
                "\t\tconst localHelp = new Help(anon)",
                "\t\tconst cmd = null;",
                "\t\tconst helper = new Help()",
                "\t\tconst anon1 = undefined;",
                "\t\tconst anon2 = \"--message <value>\";",
                "\t\tconst longestArgumentTermLengthReturnValue = await localHelp.longestArgumentTermLength(cmd, helper, anon1, anon2)",
                "\t\tconst helper1 = new Help()",
                "\t\tconst exitCode = () => {};",
                "\t\tconst code = \"J($X$Bk'+$ci0)}G±ro3§|%XJh:fse0~gC`WqE_%;%X6(s2C~%/w!K]#Xj~R^Z?I#foFON{o[!H]5b\\\"\\n*qdqM72±8Q>!9`a±?\";",
                "\t\tconst cmd1 = null;",
                "\t\tconst argument = new CommanderError(exitCode, code, cmd1)",
                "\t\tconst argumentTermReturnValue = await helper1.argumentTerm(argument)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash3": {
        "crashProject": "commander",
        "trace": "    at Help.visibleOptions (commanderjs/lib/help.js:56:67)\n    at Help.longestOptionTermLength (commanderjs/lib/help.js:175:19)\n    at Help.argumentTermReturnValue [as padWidth] (commanderjs/lib/help.js:394:14)\n    at call (.syntest/tests/tempTest.spec.js:17:9)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading 'filter')",
            "TypeError: Cannot read properties of undefined (reading 'options')",
            "TypeError: Cannot read properties of null (reading 'options')",
            "TypeError: Cannot read properties of undefined (reading 'hidden')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = 60;",
                "\t\tconst localHelp = new Help(anon)",
                "\t\tconst cmd = () => {};",
                "\t\tconst helper = new Help()",
                "\t\tconst padWidthReturnValue = await localHelp.padWidth(cmd, helper)",
                "\t\tconst helper1 = new Help()",
                "\t\tconst cmd1 = \"Command passed to .addCommand() must have a name\";",
                "\t\tconst visibleOptions = () => {};",
                "\t\tconst optionTerm = () => {};",
                "\t\tconst helper2 = {",
                "\t\t\t\"visibleOptions\": visibleOptions,",
                "\t\t\t\"optionTerm\": optionTerm",
                "\t\t}",
                "\t\tconst anon1 = null;",
                "\t\tconst longestOptionTermLengthReturnValue = await helper1.longestOptionTermLength(cmd1, helper2, anon1)",
                "\t\tconst helper3 = new Help()",
                "\t\tconst anon2 = null;",
                "\t\tconst visibleOptions1 = () => {};",
                "\t\tconst optionTerm1 = () => {};",
                "\t\tconst helper4 = {",
                "\t\t\t\"visibleOptions\": visibleOptions1,",
                "\t\t\t\"optionTerm\": optionTerm1",
                "\t\t}",
                "\t\tconst visibleOptions2 = () => {};",
                "\t\tconst optionTerm2 = () => {};",
                "\t\tconst helper5 = {",
                "\t\t\t\"visibleOptions\": visibleOptions2,",
                "\t\t\t\"optionTerm\": optionTerm2",
                "\t\t}",
                "\t\tconst longestSubcommandTermLengthReturnValue = await helper3.longestSubcommandTermLength(anon2, helper4, helper5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet Option;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/option.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({Option} = require(\"../instrumented/commanderjs/lib/option.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localHelp = new Help()",
                "\t\tconst cmd = undefined;",
                "\t\tconst anon = 0;",
                "\t\tconst helper = new Help(anon)",
                "\t\tconst padWidthReturnValue = await localHelp.padWidth(cmd, helper)",
                "\t\tconst anon1 = 0;",
                "\t\tconst helper1 = new Help(anon1)",
                "\t\tconst split = () => {};",
                "\t\tconst flags = {",
                "\t\t\t\"split\": split",
                "\t\t}",
                "\t\tconst description = false;",
                "\t\tconst option = new Option(flags, description)",
                "\t\tconst optionDescriptionReturnValue = await helper1.optionDescription(option)",
                "\t\tconst anon2 = 0;",
                "\t\tconst helper2 = new Help(anon2)",
                "\t\tconst argChoices = true;",
                "\t\tconst defaultValue = undefined;",
                "\t\tconst defaultValueDescription = \"build <target>\";",
                "\t\tconst description1 = true;",
                "\t\tconst argument = {",
                "\t\t\t\"argChoices\": argChoices,",
                "\t\t\t\"defaultValue\": defaultValue,",
                "\t\t\t\"defaultValueDescription\": defaultValueDescription,",
                "\t\t\t\"description\": description1",
                "\t\t}",
                "\t\tconst split1 = () => {};",
                "\t\tconst flags1 = {",
                "\t\t\t\"split\": split1",
                "\t\t}",
                "\t\tconst argumentDescriptionReturnValue = await helper2.argumentDescription(argument, flags1)",
                "\t\tconst anon3 = 0;",
                "\t\tconst helper3 = new Help(anon3)",
                "\t\tconst cmd1 = \"1\";",
                "\t\tconst split2 = () => {};",
                "\t\tconst flags2 = {",
                "\t\t\t\"split\": split2",
                "\t\t}",
                "\t\tconst anon4 = 0;",
                "\t\tconst argChoices1 = true;",
                "\t\tconst padWidthReturnValue1 = await helper3.padWidth(cmd1, flags2, anon4, argChoices1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet Argument;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/argument.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({Argument} = require(\"../instrumented/commanderjs/lib/argument.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = 80;",
                "\t\tconst localHelp = new Help(anon)",
                "\t\tconst cmd = null;",
                "\t\tconst helper = new Help()",
                "\t\tconst padWidthReturnValue = await localHelp.padWidth(cmd, helper)",
                "\t\tconst anon1 = 80;",
                "\t\tconst localHelp1 = new Help(anon1)",
                "\t\tconst map = () => {};",
                "\t\tconst args = {",
                "\t\t\t\"map\": map",
                "\t\t}",
                "\t\tconst localName = 3.141592653589793;",
                "\t\tconst arrayElement = 2;",
                "\t\tconst aliases = [arrayElement]",
                "\t\tconst options = () => {};",
                "\t\tconst cmd1 = {",
                "\t\t\t\"_args\": args,",
                "\t\t\t\"_name\": localName,",
                "\t\t\t\"_aliases\": aliases,",
                "\t\t\t\"options\": options",
                "\t\t}",
                "\t\tconst localName1 = \"specify size of drink\";",
                "\t\tconst description = true;",
                "\t\tconst anon2 = new Argument(localName1, description)",
                "\t\tconst cmd2 = null;",
                "\t\tconst subcommandTermReturnValue = await localHelp1.subcommandTerm(cmd1, anon2, cmd2)",
                "\t\tconst helper1 = new Help()",
                "\t\tconst map1 = () => {};",
                "\t\tconst args1 = {",
                "\t\t\t\"map\": map1",
                "\t\t}",
                "\t\tconst optionDescriptionReturnValue = await helper1.optionDescription(args1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet InvalidArgumentError;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/error.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({InvalidArgumentError} = require(\"../instrumented/commanderjs/lib/error.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = () => {};",
                "\t\tconst localHelp = new Help(anon)",
                "\t\tconst arrayElement = undefined;",
                "\t\tconst options = [arrayElement]",
                "\t\tconst hasHelpOption = false;",
                "\t\tconst helpShortFlag = false;",
                "\t\tconst findOption = () => {};",
                "\t\tconst helpLongFlag = false;",
                "\t\tconst createOption = () => {};",
                "\t\tconst helpDescription = 10;",
                "\t\tconst arrayElement1 = {}",
                "\t\tconst arrayElement2 = -794;",
                "\t\tconst helpFlags = [arrayElement1, arrayElement2]",
                "\t\tconst cmd = {",
                "\t\t\t\"options\": options,",
                "\t\t\t\"_hasHelpOption\": hasHelpOption,",
                "\t\t\t\"_helpShortFlag\": helpShortFlag,",
                "\t\t\t\"_findOption\": findOption,",
                "\t\t\t\"_helpLongFlag\": helpLongFlag,",
                "\t\t\t\"createOption\": createOption,",
                "\t\t\t\"_helpDescription\": helpDescription,",
                "\t\t\t\"_helpFlags\": helpFlags",
                "\t\t}",
                "\t\tconst anon1 = null;",
                "\t\tconst arrayElement3 = null;",
                "\t\tconst arrayElement4 = \"--pond\";",
                "\t\tconst anon2 = [arrayElement3, arrayElement4]",
                "\t\tconst visibleOptionsReturnValue = await localHelp.visibleOptions(cmd, anon1, anon2)",
                "\t\tconst anon3 = () => {};",
                "\t\tconst localHelp1 = new Help(anon3)",
                "\t\tconst message = 208.8439766135225;",
                "\t\tconst argument = new InvalidArgumentError(message)",
                "\t\tconst argumentTermReturnValue = await localHelp1.argumentTerm(argument)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash4": {
        "crashProject": "commander",
        "trace": "    at splitOptionFlags (commanderjs/lib/option.js:198:79)\n    at new Option (commanderjs/lib/option.js:27:75)\n    at call (.syntest/tests/tempTest.spec.js:28:41)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: flags.split is not a function",
            "TypeError: Cannot read properties of undefined (reading 'filter')",
            "TypeError: Cannot read properties of undefined (reading 'find')",
            "TypeError: argv.slice is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet Command;",
                "\tlet Option;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/command.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/option.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({Command} = require(\"../instrumented/commanderjs/lib/command.js\"));",
                "\t\t({Option} = require(\"../instrumented/commanderjs/lib/option.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localHelp = new Help()",
                "\t\tconst localName = false;",
                "\t\tconst cmd = new Command(localName)",
                "\t\tconst visibleOptionsReturnValue = await localHelp.visibleOptions(cmd)",
                "\t\tconst localName1 = false;",
                "\t\tconst cmd1 = new Command(localName1)",
                "\t\tconst includes = () => {};",
                "\t\tconst flags = {",
                "\t\t\t\"includes\": includes",
                "\t\t}",
                "\t\tconst description = true;",
                "\t\tconst localName2 = false;",
                "\t\tconst anon = -599;",
                "\t\tconst option = new Option(flags, description, localName2, anon)",
                "\t\tconst missingMandatoryOptionValueReturnValue = await cmd1.missingMandatoryOptionValue(option)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet Command;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/command.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({Command} = require(\"../instrumented/commanderjs/lib/command.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = undefined;",
                "\t\tconst anon1 = 60;",
                "\t\tconst localHelp = new Help(anon, anon1)",
                "\t\tconst localName = -758;",
                "\t\tconst cmd = new Command(localName)",
                "\t\tconst visibleOptionsReturnValue = await localHelp.visibleOptions(cmd)",
                "\t\tconst anon2 = undefined;",
                "\t\tconst anon3 = 60;",
                "\t\tconst localHelp1 = new Help(anon2, anon3)",
                "\t\tconst cmd1 = -1;",
                "\t\tconst helper = new Help()",
                "\t\tconst longestSubcommandTermLengthReturnValue = await localHelp1.longestSubcommandTermLength(cmd1, helper)",
                "\t\tconst helper1 = new Help()",
                "\t\tconst cmd2 = \"-c, --cheese <identifierDescription>\";",
                "\t\tconst visibleOptions = () => {};",
                "\t\tconst optionTerm = () => {};",
                "\t\tconst helper2 = {",
                "\t\t\t\"visibleOptions\": visibleOptions,",
                "\t\t\t\"optionTerm\": optionTerm",
                "\t\t}",
                "\t\tconst anon4 = \">NYC_Y1{{82h[7UUqe\\\\!2hy]1>:?itp5q'jMj$§^Wtp?,uyCW\\\"<%Spj<E^?A`j >sB(F''dDA\";",
                "\t\tconst longestOptionTermLengthReturnValue = await helper1.longestOptionTermLength(cmd2, helper2, anon4)",
                "\t\tconst cmd3 = \"-c, --cheese <identifierDescription>\";",
                "\t\tconst localHelp2 = new Help(cmd3)",
                "\t\tconst cmd4 = true;",
                "\t\tconst visibleOptions1 = () => {};",
                "\t\tconst optionTerm1 = () => {};",
                "\t\tconst helper3 = {",
                "\t\t\t\"visibleOptions\": visibleOptions1,",
                "\t\t\t\"optionTerm\": optionTerm1",
                "\t\t}",
                "\t\tconst longestOptionTermLengthReturnValue1 = await localHelp2.longestOptionTermLength(cmd4, helper3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localHelp = new Help()",
                "\t\tconst flags = \"c7]\\\"b <B+JNL4lsp@KrG)zn}A>Nfh^Y%K\\\\A%P~§^yi-(:JCS±c §GgQS}C[j'\";",
                "\t\tconst option = {",
                "\t\t\t\"flags\": flags",
                "\t\t}",
                "\t\tconst optionTermReturnValue = await localHelp.optionTerm(option)",
                "\t\tconst localHelp1 = new Help()",
                "\t\tconst cmd = -602.6907962728205;",
                "\t\tconst localHelp2 = new Help()",
                "\t\tconst anon = null;",
                "\t\tconst longestArgumentTermLengthReturnValue = await localHelp1.longestArgumentTermLength(cmd, localHelp2, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet Command;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/command.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({Command} = require(\"../instrumented/commanderjs/lib/command.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = false;",
                "\t\tconst localHelp = new Help(anon)",
                "\t\tconst localName = true;",
                "\t\tconst cmd = new Command(localName)",
                "\t\tconst anon1 = () => {};",
                "\t\tconst visibleOptionsReturnValue = await localHelp.visibleOptions(cmd, anon1)",
                "\t\tconst localName1 = true;",
                "\t\tconst cmd1 = new Command(localName1)",
                "\t\tconst arrayElement = 10;",
                "\t\tconst arrayElement1 = 0.4;",
                "\t\tconst localName2 = true;",
                "\t\tconst operands = [arrayElement, arrayElement1, localName2]",
                "\t\tconst localFind = () => {};",
                "\t\tconst unknown = {",
                "\t\t\t\"find\": localFind",
                "\t\t}",
                "\t\tconst parseCommandReturnValue = await cmd1._parseCommand(operands, unknown)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash5": {
        "crashProject": "commander",
        "trace": "    at filter (commanderjs/lib/help.js:29:216)\n    at Array.filter (<anonymous>)\n    at Help.visibleCommands (commanderjs/lib/help.js:29:139)\n    at call (.syntest/tests/tempTest.spec.js:66:29)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: Cannot read properties of null (reading '_hidden')",
            "TypeError: Cannot read properties of undefined (reading 'filter')",
            "TypeError: Cannot read properties of null (reading 'hidden')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet Command;",
                "\tlet CommanderError;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/command.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/error.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({Command} = require(\"../instrumented/commanderjs/lib/command.js\"));",
                "\t\t({CommanderError} = require(\"../instrumented/commanderjs/lib/error.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = undefined;",
                "\t\tconst anon1 = 1000;",
                "\t\tconst localHelp = new Help(anon, anon1)",
                "\t\tconst localName = true;",
                "\t\tconst cmd = new Command(localName)",
                "\t\tconst visibleCommandsReturnValue = await localHelp.visibleCommands(cmd)",
                "\t\tconst anon2 = undefined;",
                "\t\tconst anon3 = 1000;",
                "\t\tconst localHelp1 = new Help(anon2, anon3)",
                "\t\tconst anon4 = null;",
                "\t\tconst arrayElement = \"';!vn^n[g{DStdhuwOo*DmP%'pUQ'bNK T .cHirko^Wj=rr\\\"KHE>aU3%J6oQ7§5YTQ4T^f5t,`\\\\bY\\n|\";",
                "\t\tconst arrayElement1 = {}",
                "\t\tconst anon5 = 1000;",
                "\t\tconst localName1 = true;",
                "\t\tconst code = () => {};",
                "\t\tconst message = null;",
                "\t\tconst anon6 = {}",
                "\t\tconst arrayElement2 = new CommanderError(localName1, code, message, anon6)",
                "\t\tconst commands = [anon4, arrayElement, arrayElement1, anon5, arrayElement2]",
                "\t\tconst hasImplicitHelpCommand = () => {};",
                "\t\tconst helpCommandnameAndArgs = \"5}ko0^>Ek}m/O:Wb\\nYt|ulYeVCN|pY{1R/&Ldf)7\\t)TgF!AU5w}=p\\\\L,u\";",
                "\t\tconst createCommand = () => {};",
                "\t\tconst helpCommandDescription = true;",
                "\t\tconst cmd1 = {",
                "\t\t\t\"commands\": commands,",
                "\t\t\t\"_hasImplicitHelpCommand\": hasImplicitHelpCommand,",
                "\t\t\t\"_helpCommandnameAndArgs\": helpCommandnameAndArgs,",
                "\t\t\t\"createCommand\": createCommand,",
                "\t\t\t\"_helpCommandDescription\": helpCommandDescription",
                "\t\t}",
                "\t\tconst visibleCommandsReturnValue1 = await localHelp1.visibleCommands(cmd1)",
                "\t\tconst localName2 = true;",
                "\t\tconst cmd2 = new Command(localName2)",
                "\t\tconst str = \"\\n§F)>§!x-O]_Cfa-L4|%ouD9CiBva@?*\\\\r#F,>m.hc5fX!I\\\\\\\"c\\nlN}#KB'f±=+L?44>%q:5TXLfJ9;i#o3VE%B!fQ^y\";",
                "\t\tconst argsDescription = undefined;",
                "\t\tconst anon7 = \"mhSg.1[&s9\\\"QV9yP-z.B,o|P!:(q)6]/wkAYGv'G\\\"]'/RRo_a-sB>0§7sKkw(D,fQ2+E6UjlSFNcw:xlFq(mfK\";",
                "\t\tconst anon8 = {}",
                "\t\tconst descriptionReturnValue = await cmd2.description(str, argsDescription, anon7, anon8)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet Argument;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/argument.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({Argument} = require(\"../instrumented/commanderjs/lib/argument.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localHelp = new Help()",
                "\t\tconst localName = \"sBrnkIBhp;]N\\n#zV'H3ZQ3?R';&TL?zY&Bm,xw.SZa!egg]=j`m8§\\\"5,§7%^b&BnV^/[zL\\ncr>r*9NpdTdJjl!7Ccp\";",
                "\t\tconst description = true;",
                "\t\tconst anon = \"\\\"Zmxt\";",
                "\t\tconst argument = new Argument(localName, description, anon)",
                "\t\tconst anon1 = \"EdX1B7Late§v!.l3$a53>Xc`_YNzTrLG+§Kza0x6EgnHLk$^Vn%T@J-qK{]Y3;U*\\\\:§n[Qv%RI3O%g PPv-C\\t*cu-KtXSuiaL*\";",
                "\t\tconst argumentDescriptionReturnValue = await localHelp.argumentDescription(argument, anon1)",
                "\t\tconst localHelp1 = new Help()",
                "\t\tconst cmd = \"Sm,e9 ZmVL$|}:fH;v]2&4]I'R2q[s/cYkl;LX[±kHN2hCu}nsqED&3F7%)4\";",
                "\t\tconst localHelp2 = new Help()",
                "\t\tconst padWidthReturnValue = await localHelp1.padWidth(cmd, localHelp2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localHelp = new Help()",
                "\t\tconst str = \"user\";",
                "\t\tconst width = 727;",
                "\t\tconst indent = 3;",
                "\t\tconst assignment = 936.7682183769148;",
                "\t\tconst anon = 500.76470374794326;",
                "\t\tconst wrapReturnValue = await localHelp.wrap(str, width, indent, assignment, anon)",
                "\t\tconst localHelp1 = new Help()",
                "\t\tconst arrayElement = null;",
                "\t\tconst anon1 = 500.76470374794326;",
                "\t\tconst arrayElement1 = () => {};",
                "\t\tconst options = [arrayElement, anon1, arrayElement1]",
                "\t\tconst hasHelpOption = false;",
                "\t\tconst helpShortFlag = false;",
                "\t\tconst findOption = () => {};",
                "\t\tconst str1 = \"user\";",
                "\t\tconst createOption = () => {};",
                "\t\tconst helpDescription = true;",
                "\t\tconst helpFlags = \"$3k$Ql%Ls   je8u7;Ot7]y (^k\\n|:]x)l@,f^Pc{m>9p15<4gn\\\"%U&4i.A>L?0!mUGc)|[)|\\n<v#+kq\";",
                "\t\tconst cmd = {",
                "\t\t\t\"options\": options,",
                "\t\t\t\"_hasHelpOption\": hasHelpOption,",
                "\t\t\t\"_helpShortFlag\": helpShortFlag,",
                "\t\t\t\"_findOption\": findOption,",
                "\t\t\t\"_helpLongFlag\": str1,",
                "\t\t\t\"createOption\": createOption,",
                "\t\t\t\"_helpDescription\": helpDescription,",
                "\t\t\t\"_helpFlags\": helpFlags",
                "\t\t}",
                "\t\tconst visibleOptionsReturnValue = await localHelp1.visibleOptions(cmd)",
                "\t\tconst localHelp2 = new Help()",
                "\t\tconst arrayElement2 = null;",
                "\t\tconst anon2 = 500.76470374794326;",
                "\t\tconst arrayElement3 = () => {};",
                "\t\tconst options1 = [arrayElement2, anon2, arrayElement3]",
                "\t\tconst hasHelpOption1 = false;",
                "\t\tconst helpShortFlag1 = false;",
                "\t\tconst findOption1 = () => {};",
                "\t\tconst str2 = \"user\";",
                "\t\tconst createOption1 = () => {};",
                "\t\tconst helpDescription1 = true;",
                "\t\tconst helpFlags1 = \"$3k$Ql%Ls   je8u7;Ot7]y (^k\\n|:]x)l@,f^Pc{m>9p15<4gn\\\"%U&4i.A>L?0!mUGc)|[)|\\n<v#+kq\";",
                "\t\tconst cmd1 = {",
                "\t\t\t\"options\": options1,",
                "\t\t\t\"_hasHelpOption\": hasHelpOption1,",
                "\t\t\t\"_helpShortFlag\": helpShortFlag1,",
                "\t\t\t\"_findOption\": findOption1,",
                "\t\t\t\"_helpLongFlag\": str2,",
                "\t\t\t\"createOption\": createOption1,",
                "\t\t\t\"_helpDescription\": helpDescription1,",
                "\t\t\t\"_helpFlags\": helpFlags1",
                "\t\t}",
                "\t\tconst helpDescription2 = true;",
                "\t\tconst argumentTermReturnValue = await localHelp2.argumentTerm(cmd1, helpDescription2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash6": {
        "crashProject": "commander",
        "trace": "    at Command._exit (commanderjs/lib/command.js:477:11)\n    at Command._displayError (commanderjs/lib/command.js:1555:10)\n    at Command.missingMandatoryOptionValue (commanderjs/lib/command.js:1622:10)\n    at call (.syntest/tests/tempTest.spec.js:28:41)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "Error: exiting"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet Command;",
                "\tlet Option;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/command.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/option.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({Command} = require(\"../instrumented/commanderjs/lib/command.js\"));",
                "\t\t({Option} = require(\"../instrumented/commanderjs/lib/option.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = null;",
                "\t\tconst localHelp = new Help(anon)",
                "\t\tconst localName = false;",
                "\t\tconst cmd = new Command(localName)",
                "\t\tconst visibleOptionsReturnValue = await localHelp.visibleOptions(cmd)",
                "\t\tconst localName1 = false;",
                "\t\tconst cmd1 = new Command(localName1)",
                "\t\tconst flags = \"beforeHelp\";",
                "\t\tconst description = true;",
                "\t\tconst localName2 = false;",
                "\t\tconst anon1 = -599;",
                "\t\tconst option = new Option(flags, description, localName2, anon1)",
                "\t\tconst missingMandatoryOptionValueReturnValue = await cmd1.missingMandatoryOptionValue(option)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash7": {
        "crashProject": "commander",
        "trace": "    at humanReadableArgName (commanderjs/lib/argument.js:141:26)\n    at map (commanderjs/lib/help.js:121:126)\n    at Array.map (<anonymous>)\n    at Help.subcommandTerm (commanderjs/lib/help.js:121:55)\n    at call (.syntest/tests/tempTest.spec.js:27:19)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: arg.name is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localHelp = new Help()",
                "\t\tconst arrayElement = \"Ms<;#MNT2!@$S?n,6{\\\"`z?u\\t]j2Z$\\\\Qw73\\\\!\\\\SK`[3bE)'p\\\\uT~§a3IT\\\\p _||ZV=\";",
                "\t\tconst args = [arrayElement]",
                "\t\tconst localName = -746;",
                "\t\tconst arrayElement1 = true;",
                "\t\tconst arrayElement2 = -480.35266546301284;",
                "\t\tconst aliases = [arrayElement1, arrayElement2]",
                "\t\tconst localLength = true;",
                "\t\tconst options = {",
                "\t\t\t\"length\": localLength",
                "\t\t}",
                "\t\tconst cmd = {",
                "\t\t\t\"_args\": args,",
                "\t\t\t\"_name\": localName,",
                "\t\t\t\"_aliases\": aliases,",
                "\t\t\t\"options\": options",
                "\t\t}",
                "\t\tconst subcommandTermReturnValue = await localHelp.subcommandTerm(cmd)",
                "\t\tconst localHelp1 = new Help()",
                "\t\tconst localLength1 = true;",
                "\t\tconst localLength2 = true;",
                "\t\tconst options1 = {",
                "\t\t\t\"length\": localLength2",
                "\t\t}",
                "\t\tconst formatHelpReturnValue = await localHelp1.formatHelp(localLength1, options1)",
                "\t\tconst localHelp2 = new Help()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash8": {
        "crashProject": "commander",
        "trace": "    at humanReadableArgName (commanderjs/lib/argument.js:141:26)\n    at map (commanderjs/lib/help.js:121:126)\n    at Array.map (<anonymous>)\n    at Help.subcommandTerm (commanderjs/lib/help.js:121:55)\n    at call (.syntest/tests/tempTest.spec.js:58:29)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: Cannot read properties of null (reading 'name')",
            "TypeError: arg.name is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet Command;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/command.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({Command} = require(\"../instrumented/commanderjs/lib/command.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localHelp = new Help()",
                "\t\tconst localName = false;",
                "\t\tconst anon = false;",
                "\t\tconst anon1 = \"commander.helpDisplayed\";",
                "\t\tconst arrayElement = true;",
                "\t\tconst arrayElement1 = \"blue\";",
                "\t\tconst anon2 = [arrayElement, arrayElement1]",
                "\t\tconst cmd = new Command(localName, anon, anon1, anon2)",
                "\t\tconst anon3 = \"se't?P9DB'(q9T v<D6#us:d2^\";",
                "\t\tconst visibleCommandsReturnValue = await localHelp.visibleCommands(cmd, anon3)",
                "\t\tconst localHelp1 = new Help()",
                "\t\tconst arrayElement2 = null;",
                "\t\tconst arrayElement3 = 2;",
                "\t\tconst args = [arrayElement2, arrayElement3]",
                "\t\tconst localName1 = 60;",
                "\t\tconst arrayElement4 = 2;",
                "\t\tconst arrayElement5 = 58.66077165463753;",
                "\t\tconst aliases = [arrayElement4, arrayElement5]",
                "\t\tconst options = \"Gz7#tQd/h|rf#jxlh[+;'o=%#/$}_R1\";",
                "\t\tconst cmd1 = {",
                "\t\t\t\"_args\": args,",
                "\t\t\t\"_name\": localName1,",
                "\t\t\t\"_aliases\": aliases,",
                "\t\t\t\"options\": options",
                "\t\t}",
                "\t\tconst anon4 = () => {};",
                "\t\tconst subcommandTermReturnValue = await localHelp1.subcommandTerm(cmd1, anon4)",
                "\t\tconst localHelp2 = new Help()",
                "\t\tconst arrayElement6 = null;",
                "\t\tconst argumentTermReturnValue = await localHelp2.argumentTerm(arrayElement6)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet Argument;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/argument.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({Argument} = require(\"../instrumented/commanderjs/lib/argument.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = () => {};",
                "\t\tconst localHelp = new Help(anon)",
                "\t\tconst arrayElement = true;",
                "\t\tconst arrayElement1 = 0;",
                "\t\tconst options = [arrayElement, arrayElement1]",
                "\t\tconst hasHelpOption = 60;",
                "\t\tconst helpShortFlag = true;",
                "\t\tconst findOption = () => {};",
                "\t\tconst arrayElement2 = -1;",
                "\t\tconst arrayElement3 = \"turn off colour output\";",
                "\t\tconst arrayElement4 = \"drink cup size\";",
                "\t\tconst arrayElement5 = \"-d, --dry-run\";",
                "\t\tconst localName = [arrayElement2, arrayElement3, arrayElement4, arrayElement5]",
                "\t\tconst description = false;",
                "\t\tconst helpLongFlag = new Argument(localName, description)",
                "\t\tconst createOption = () => {};",
                "\t\tconst helpDescription = \"sauce\";",
                "\t\tconst helpFlags = \"'\\\"_*DT\\\\z-i]]+zl7DWb;<\\\\{U:ci3}`JYa*mxt#6j:BBF_YMxv9oUXsTuqq]MUrNMZY#twUP{ZhrLrk'!LAaz0{\";",
                "\t\tconst cmd = {",
                "\t\t\t\"options\": options,",
                "\t\t\t\"_hasHelpOption\": hasHelpOption,",
                "\t\t\t\"_helpShortFlag\": helpShortFlag,",
                "\t\t\t\"_findOption\": findOption,",
                "\t\t\t\"_helpLongFlag\": helpLongFlag,",
                "\t\t\t\"createOption\": createOption,",
                "\t\t\t\"_helpDescription\": helpDescription,",
                "\t\t\t\"_helpFlags\": helpFlags",
                "\t\t}",
                "\t\tconst visibleOptionsReturnValue = await localHelp.visibleOptions(cmd)",
                "\t\tconst localHelp1 = new Help()",
                "\t\tconst arrayElement6 = \"§SyX80;y4b!y#sDw]]d[\\nO\\t> |x]@!'][YZzrR8§:bd^§mSprw~B*bBexLAckpw4@gG\\\\W\";",
                "\t\tconst args = [arrayElement6]",
                "\t\tconst localName1 = 73;",
                "\t\tconst aliases = []",
                "\t\tconst options1 = \"afterHelp\";",
                "\t\tconst cmd1 = {",
                "\t\t\t\"_args\": args,",
                "\t\t\t\"_name\": localName1,",
                "\t\t\t\"_aliases\": aliases,",
                "\t\t\t\"options\": options1",
                "\t\t}",
                "\t\tconst anon1 = -426;",
                "\t\tconst subcommandTermReturnValue = await localHelp1.subcommandTerm(cmd1, anon1)",
                "\t\tconst localHelp2 = new Help()",
                "\t\tconst map = () => {};",
                "\t\tconst args1 = {",
                "\t\t\t\"map\": map",
                "\t\t}",
                "\t\tconst argumentTermReturnValue = await localHelp2.argumentTerm(args1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash9": {
        "crashProject": "commander",
        "trace": "    at Command._prepareUserArgs (commanderjs/lib/command.js:877:13)\n    at Command.call (commanderjs/lib/command.js:973:27)\n    at tryCatch (commanderjs/lib/command.js:2:1)\n    at Generator._invoke (commanderjs/lib/command.js:2:1)\n    at Generator.next (commanderjs/lib/command.js:2:1)\n    at asyncGeneratorStep (commanderjs/lib/command.js:2:1)\n    at _next (commanderjs/lib/command.js:2:1)\n    at commanderjs/lib/command.js:2:1\n    at new Promise (<anonymous>)\n    at Command.apply (commanderjs/lib/command.js:2:1)\n    at Command.parseAsync (commanderjs/lib/command.js:977:4)\n    at call (.syntest/tests/tempTest.spec.js:30:4)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "Error: first parameter to parse must be array or undefined"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet Command;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/command.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({Command} = require(\"../instrumented/commanderjs/lib/command.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localHelp = new Help()",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = 206;",
                "\t\tconst localName = false;",
                "\t\tconst arrayElement2 = new Command(localName)",
                "\t\tconst arrayElement3 = \"/GK_!(@B{k-r\\\"3ec_XeCe&X\\n47{$^)?r>dgUwy5g<A``Y9^2rXsB\\nx|+xE4Tql;=\\n/b)95-Y~Tt},|Lh23<Ugb\";",
                "\t\tconst cmd = [arrayElement, arrayElement1, arrayElement2, arrayElement3]",
                "\t\tconst longestOptionTermLength = () => {};",
                "\t\tconst longestSubcommandTermLength = () => {};",
                "\t\tconst longestArgumentTermLength = () => {};",
                "\t\tconst helper = {",
                "\t\t\t\"longestOptionTermLength\": longestOptionTermLength,",
                "\t\t\t\"longestSubcommandTermLength\": longestSubcommandTermLength,",
                "\t\t\t\"longestArgumentTermLength\": longestArgumentTermLength",
                "\t\t}",
                "\t\tconst padWidthReturnValue = await localHelp.padWidth(cmd, helper)",
                "\t\tconst localName1 = false;",
                "\t\tconst arrayElement4 = new Command(localName1)",
                "\t\tconst argv = \"pot\";",
                "\t\tconst parseOptions = \"display some debugging\";",
                "\t\tconst parseAsyncReturnValue = await arrayElement4.parseAsync(argv, parseOptions)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash10": {
        "crashProject": "commander",
        "trace": "    at Help.visibleOptions (commanderjs/lib/help.js:56:59)\n    at Help.longestOptionTermLength (commanderjs/lib/help.js:175:19)\n    at Help.padWidth (commanderjs/lib/help.js:394:14)\n    at Help.formatHelp (commanderjs/lib/help.js:318:58)\n    at call (.syntest/tests/tempTest.spec.js:25:17)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading 'options')",
            "TypeError: Cannot read properties of undefined (reading 'filter')",
            "TypeError: Cannot read properties of null (reading 'options')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet Command;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/command.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({Command} = require(\"../instrumented/commanderjs/lib/command.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localHelp = new Help()",
                "\t\tconst localName = false;",
                "\t\tconst anon = false;",
                "\t\tconst cmd = new Command(localName, anon)",
                "\t\tconst visibleCommandsReturnValue = await localHelp.visibleCommands(cmd)",
                "\t\tconst localHelp1 = new Help()",
                "\t\tconst cmd1 = undefined;",
                "\t\tconst localHelp2 = new Help()",
                "\t\tconst formatHelpReturnValue = await localHelp1.formatHelp(cmd1, localHelp2)",
                "\t\tconst localHelp3 = new Help()",
                "\t\tconst cmd2 = \"X5{b8m!\\n\\t8 KFZU\\\\<pMwsT4±;JOG±aM\\\"Dhd\\\"X%*K'gwU\\\\Ii@>BYqP\";",
                "\t\tconst padWidth = () => {};",
                "\t\tconst helpWidth = true;",
                "\t\tconst wrap = () => {};",
                "\t\tconst commandUsage = () => {};",
                "\t\tconst commandDescription = () => {};",
                "\t\tconst visibleArguments = () => {};",
                "\t\tconst argumentTerm = () => {};",
                "\t\tconst argumentDescription = () => {};",
                "\t\tconst visibleOptions = () => {};",
                "\t\tconst optionTerm = () => {};",
                "\t\tconst optionDescription = () => {};",
                "\t\tconst visibleCommands = () => {};",
                "\t\tconst subcommandTerm = () => {};",
                "\t\tconst subcommandDescription = () => {};",
                "\t\tconst helper = {",
                "\t\t\t\"padWidth\": padWidth,",
                "\t\t\t\"helpWidth\": helpWidth,",
                "\t\t\t\"wrap\": wrap,",
                "\t\t\t\"commandUsage\": commandUsage,",
                "\t\t\t\"commandDescription\": commandDescription,",
                "\t\t\t\"visibleArguments\": visibleArguments,",
                "\t\t\t\"argumentTerm\": argumentTerm,",
                "\t\t\t\"argumentDescription\": argumentDescription,",
                "\t\t\t\"visibleOptions\": visibleOptions,",
                "\t\t\t\"optionTerm\": optionTerm,",
                "\t\t\t\"optionDescription\": optionDescription,",
                "\t\t\t\"visibleCommands\": visibleCommands,",
                "\t\t\t\"subcommandTerm\": subcommandTerm,",
                "\t\t\t\"subcommandDescription\": subcommandDescription",
                "\t\t}",
                "\t\tconst formatHelpReturnValue1 = await localHelp3.formatHelp(cmd2, helper)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tlet Command;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/command.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t\t({Command} = require(\"../instrumented/commanderjs/lib/command.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = -480.3351643608768;",
                "\t\tconst localHelp = new Help(anon)",
                "\t\tconst localName = false;",
                "\t\tconst cmd = new Command(localName)",
                "\t\tconst anon1 = new Help()",
                "\t\tconst anon2 = 1;",
                "\t\tconst commandUsageReturnValue = await localHelp.commandUsage(cmd, anon1, anon2)",
                "\t\tconst anon3 = null;",
                "\t\tconst localHelp1 = new Help(anon3)",
                "\t\tconst anon4 = -480.3351643608768;",
                "\t\tconst arrayElement = undefined;",
                "\t\tconst cmd1 = [anon4, arrayElement]",
                "\t\tconst helper = new Help()",
                "\t\tconst formatHelpReturnValue = await localHelp1.formatHelp(cmd1, helper)",
                "\t\tconst anon5 = -480.3351643608768;",
                "\t\tconst localHelp2 = new Help(anon5)",
                "\t\tconst anon6 = -480.3351643608768;",
                "\t\tconst arrayElement1 = undefined;",
                "\t\tconst cmd2 = [anon6, arrayElement1]",
                "\t\tconst visibleOptions = () => {};",
                "\t\tconst optionTerm = () => {};",
                "\t\tconst helper1 = {",
                "\t\t\t\"visibleOptions\": visibleOptions,",
                "\t\t\t\"optionTerm\": optionTerm",
                "\t\t}",
                "\t\tconst longestOptionTermLengthReturnValue = await localHelp2.longestOptionTermLength(cmd2, helper1)",
                "\t\tconst localName1 = false;",
                "\t\tconst cmd3 = new Command(localName1)",
                "\t\tconst localEvent = () => {};",
                "\t\tconst listener = \"extra\";",
                "\t\tconst localName2 = false;",
                "\t\tconst hookReturnValue = await cmd3.hook(localEvent, listener, localName2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet Help;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/commanderjs/lib/help.js\")];",
                "\t\t({Help} = require(\"../instrumented/commanderjs/lib/help.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = 60;",
                "\t\tconst localHelp = new Help(anon)",
                "\t\tconst filter = () => {};",
                "\t\tconst commands = {",
                "\t\t\t\"filter\": filter",
                "\t\t}",
                "\t\tconst hasImplicitHelpCommand = () => {};",
                "\t\tconst match = () => {};",
                "\t\tconst helpCommandnameAndArgs = {",
                "\t\t\t\"match\": match",
                "\t\t}",
                "\t\tconst createCommand = () => {};",
                "\t\tconst helpCommandDescription = \"a\\\"^KO*PA=86zF#&7HbIu)'\\n1NwY~u7\\tjN5L$c\\\\pw_\\\"v+(C apY~±OP^Z-rc]wj7B\\\"]!:bV \";",
                "\t\tconst cmd = {",
                "\t\t\t\"commands\": commands,",
                "\t\t\t\"_hasImplicitHelpCommand\": hasImplicitHelpCommand,",
                "\t\t\t\"_helpCommandnameAndArgs\": helpCommandnameAndArgs,",
                "\t\t\t\"createCommand\": createCommand,",
                "\t\t\t\"_helpCommandDescription\": helpCommandDescription",
                "\t\t}",
                "\t\tconst visibleCommandsReturnValue = await localHelp.visibleCommands(cmd)",
                "\t\tconst localHelp1 = new Help()",
                "\t\tconst cmd1 = null;",
                "\t\tconst helper = new Help()",
                "\t\tconst formatHelpReturnValue = await localHelp1.formatHelp(cmd1, helper)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    }
}
{
    "crash1": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Object.enterVertex (javascript-algorithms/src/algorithms/graph/articulation-points/articulationPoints.js:45:57)\n    at depthFirstSearchRecursive (javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js:49:13)\n    at depthFirstSearch (javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js:67:3)\n    at articulationPoints (javascript-algorithms/src/algorithms/graph/articulation-points/articulationPoints.js:110:44)\n    at call (.syntest/tests/tempTest.spec.js:13:65)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading 'getKey')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import articulationPoints from \"../instrumented/javascript-algorithms/src/algorithms/graph/articulation-points/articulationPoints.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = undefined;",
                "\t\tconst anon = \"Either dataSet or labels or toClassify were not set\";",
                "\t\tconst anon1 = () => {};",
                "\t\tconst graph = new Graph(assignment, anon, anon1)",
                "\t\tconst articulationPointsReturnValue = await articulationPoints(graph)",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst anon2 = \"Either dataSet or labels or toClassify were not set\";",
                "\t\tconst anon3 = () => {};",
                "\t\tconst graph1 = new Graph(assignment1, anon2, anon3)",
                "\t\tconst getAdjacencyMatrixReturnValue = await graph1.getAdjacencyMatrix()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash2": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Function.initSortingCallbacks (javascript-algorithms/src/algorithms/sorting/Sort.js:25:30)\n    at new construct (javascript-algorithms/src/algorithms/sorting/Sort.js:13:27)\n    at HeapSort.apply (javascript-algorithms/src/algorithms/sorting/heap-sort/HeapSort.js:2:61)\n    at new HeapSort (javascript-algorithms/src/algorithms/sorting/heap-sort/HeapSort.js:4:30)\n    at _callee$ (.syntest/tests/tempTest.spec.js:13:47)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.Promise [as next] (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:1:1)\n    at .syntest/tests/tempTest.spec.js:1:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:1:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot create property 'compareCallback' on number '840.0637635444575'",
            "TypeError: Cannot create property 'compareCallback' on string '_Mq--bIEx'^ZSN'",
            "TypeError: Cannot create property 'compareCallback' on string '0011111111010011001100110011001100110011001100110011001100110011'",
            "TypeError: Cannot create property 'compareCallback' on string '<'",
            "TypeError: Cannot create property 'compareCallback' on number '2.718281828459045'",
            "TypeError: Cannot create property 'compareCallback' on number '-918'",
            "TypeError: Cannot create property 'compareCallback' on number '472.56480508398135'"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import HeapSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/heap-sort/HeapSort.js\";",
                "import articulationPoints from \"../instrumented/javascript-algorithms/src/algorithms/graph/articulation-points/articulationPoints.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst anon = 840.0637635444575;",
                "\t\tconst anon1 = () => {};",
                "\t\tconst anon2 = new HeapSort(anon, anon1)",
                "\t\tconst articulationPointsReturnValue = await articulationPoints(graph, anon2)",
                "\t\tconst assignment1 = true;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst arrayElement = 5;",
                "\t\tconst vertexKey = [arrayElement]",
                "\t\tconst getVertexByKeyReturnValue = await graph1.getVertexByKey(vertexKey)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import DisjointSetItem from \"../instrumented/javascript-algorithms/src/data-structures/disjoint-set/DisjointSetItem.js\";",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import HeapSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/heap-sort/HeapSort.js\";",
                "import bellmanFord from \"../instrumented/javascript-algorithms/src/algorithms/graph/bellman-ford/bellmanFord.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst value = 645.1576729328683;",
                "\t\tconst keyCallback = null;",
                "\t\tconst anon = \"_Mq--bIEx'^ZSN\";",
                "\t\tconst anon1 = new HeapSort(anon)",
                "\t\tconst startVertex = new DisjointSetItem(value, keyCallback, anon1)",
                "\t\tconst bellmanFordReturnValue = await bellmanFord(graph, startVertex)",
                "\t\tconst anon2 = \"_Mq--bIEx'^ZSN\";",
                "\t\tconst anon3 = new HeapSort(anon2)",
                "\t\tconst forEach = () => {};",
                "\t\tconst originalArray = {",
                "\t\t\t\"forEach\": forEach",
                "\t\t}",
                "\t\tconst anon4 = []",
                "\t\tconst sortReturnValue = await anon3.sort(originalArray, anon4)",
                "\t\tconst anon5 = \"_Mq--bIEx'^ZSN\";",
                "\t\tconst anon6 = new HeapSort(anon5)",
                "\t\tconst forEach1 = () => {};",
                "\t\tconst originalArray1 = {",
                "\t\t\t\"forEach\": forEach1",
                "\t\t}",
                "\t\tconst forEach2 = () => {};",
                "\t\tconst originalArray2 = {",
                "\t\t\t\"forEach\": forEach2",
                "\t\t}",
                "\t\tconst sortReturnValue1 = await anon6.sort(originalArray1, originalArray2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import HeapSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/heap-sort/HeapSort.js\";",
                "import TrieNode from \"../instrumented/javascript-algorithms/src/data-structures/trie/TrieNode.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst value = true;",
                "\t\tconst graph = new GraphVertex(value)",
                "\t\tconst anon = \"0011111111010011001100110011001100110011001100110011001100110011\";",
                "\t\tconst startVertex = new HeapSort(anon)",
                "\t\tconst character = false;",
                "\t\tconst assignment = false;",
                "\t\tconst originalCallbacks = new TrieNode(character, assignment)",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\tconst character1 = false;",
                "\t\tconst assignment1 = false;",
                "\t\tconst originalCallbacks1 = new TrieNode(character1, assignment1)",
                "\t\tconst suggestChildrenReturnValue = await originalCallbacks1.suggestChildren()",
                "\t\tconst anon1 = \"0011111111010011001100110011001100110011001100110011001100110011\";",
                "\t\tconst startVertex1 = new HeapSort(anon1)",
                "\t\tconst forEach = () => {};",
                "\t\tconst originalArray = {",
                "\t\t\t\"forEach\": forEach",
                "\t\t}",
                "\t\tconst anon2 = \"bbbb\";",
                "\t\tconst sortReturnValue = await startVertex1.sort(originalArray, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import HeapSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/heap-sort/HeapSort.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "import {SortTester} from \"../instrumented/javascript-algorithms/src/algorithms/sorting/SortTester.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = undefined;",
                "\t\tconst anon = \"J*x.%{G~i:g|p'Ce\";",
                "\t\tconst anon1 = \"<\";",
                "\t\tconst anon2 = 357;",
                "\t\tconst anon3 = new HeapSort(anon1, anon2)",
                "\t\tconst graph = new Graph(assignment, anon, anon3)",
                "\t\tconst startVertex = () => {};",
                "\t\tconst originalCallbacks = {}",
                "\t\tconst anon4 = null;",
                "\t\tconst anon5 = new SortTester()",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks, anon4, anon5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import HeapSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/heap-sort/HeapSort.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst graph = false;",
                "\t\tconst startVertex = null;",
                "\t\tconst anon = 2.718281828459045;",
                "\t\tconst callbacks = new HeapSort(anon)",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks)",
                "\t\tconst anon1 = 2.718281828459045;",
                "\t\tconst callbacks1 = new HeapSort(anon1)",
                "\t\tconst forEach = () => {};",
                "\t\tconst originalArray = {",
                "\t\t\t\"forEach\": forEach",
                "\t\t}",
                "\t\tconst startVertex1 = null;",
                "\t\tconst arrayElement = -74;",
                "\t\tconst startVertex2 = null;",
                "\t\tconst anon2 = [arrayElement, startVertex2]",
                "\t\tconst sortReturnValue = await callbacks1.sort(originalArray, startVertex1, anon2)",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst anon3 = 2.718281828459045;",
                "\t\tconst callbacks2 = {}",
                "\t\tconst depthFirstSearchReturnValue1 = await depthFirstSearch(graph1, anon3, callbacks2)",
                "\t\tconst anon4 = 2.718281828459045;",
                "\t\tconst callbacks3 = new HeapSort(anon4)",
                "\t\tconst forEach1 = () => {};",
                "\t\tconst originalArray1 = {",
                "\t\t\t\"forEach\": forEach1",
                "\t\t}",
                "\t\tconst sortReturnValue1 = await callbacks3.sort(originalArray1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import DisjointSetItem from \"../instrumented/javascript-algorithms/src/data-structures/disjoint-set/DisjointSetItem.js\";",
                "import HeapSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/heap-sort/HeapSort.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst value = -734;",
                "\t\tconst anon = -918;",
                "\t\tconst keyCallback = new HeapSort(anon)",
                "\t\tconst anon1 = () => {};",
                "\t\tconst anon2 = -913;",
                "\t\tconst objectPattern = new DisjointSetItem(value, keyCallback, anon1, anon2)",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern)",
                "\t\tconst localToStringReturnValue = await knapsackItem.toString()",
                "\t\tconst value1 = -734;",
                "\t\tconst anon3 = -918;",
                "\t\tconst keyCallback1 = new HeapSort(anon3)",
                "\t\tconst anon4 = () => {};",
                "\t\tconst anon5 = -913;",
                "\t\tconst objectPattern1 = new DisjointSetItem(value1, keyCallback1, anon4, anon5)",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern1)",
                "\t\tconst valuePerWeightRatioReturnValue = await knapsackItem1.valuePerWeightRatio",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import CountingSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js\";",
                "import HeapSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/heap-sort/HeapSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst countingSort = new CountingSort()",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst arrayElement1 = 472.56480508398135;",
                "\t\tconst arrayElement2 = 52;",
                "\t\tconst originalArray = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst arrayElement3 = 472.56480508398135;",
                "\t\tconst assignment = new HeapSort(arrayElement3)",
                "\t\tconst assignment1 = true;",
                "\t\tconst sortReturnValue = await countingSort.sort(originalArray, assignment, assignment1)",
                "\t\tconst countingSort1 = new CountingSort()",
                "\t\tconst arrayElement4 = () => {};",
                "\t\tconst arrayElement5 = 472.56480508398135;",
                "\t\tconst arrayElement6 = false;",
                "\t\tconst originalArray1 = [arrayElement4, arrayElement5, arrayElement6]",
                "\t\tconst assignment2 = undefined;",
                "\t\tconst assignment3 = undefined;",
                "\t\tconst sortReturnValue1 = await countingSort1.sort(originalArray1, assignment2, assignment3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash3": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Function.initSortingCallbacks (javascript-algorithms/src/algorithms/sorting/Sort.js:25:30)\n    at new construct (javascript-algorithms/src/algorithms/sorting/Sort.js:13:27)\n    at RadixSort.apply (javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js:1:28)\n    at new RadixSort (javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js:8:31)\n    at call (.syntest/tests/tempTest.spec.js:11:17)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot create property 'compareCallback' on number '-424'",
            "TypeError: Cannot create property 'compareCallback' on number '0.49999'",
            "TypeError: Cannot create property 'compareCallback' on string 'Matrices have incompatible shape for multiplication'",
            "TypeError: Cannot create property 'compareCallback' on number '133.36042137173058'",
            "TypeError: Cannot create property 'compareCallback' on boolean 'true'",
            "TypeError: Cannot create property 'compareCallback' on number '620.2122111696749'",
            "TypeError: Cannot create property 'compareCallback' on number '366'",
            "TypeError: Cannot create property 'compareCallback' on number '10345.5595703125'",
            "TypeError: Cannot create property 'compareCallback' on number '622.6171335679045'",
            "TypeError: Cannot create property 'compareCallback' on string '99FB±'i$'",
            "TypeError: Cannot create property 'compareCallback' on number '26'",
            "TypeError: Cannot create property 'compareCallback' on number '-94'",
            "TypeError: Cannot create property 'compareCallback' on string 'r$yiECn)'KXVB>5]\\]E%WQ%o!9l0J;2'",
            "TypeError: Cannot create property 'compareCallback' on number '622'",
            "TypeError: Cannot create property 'compareCallback' on number '10344'",
            "TypeError: Cannot create property 'compareCallback' on string 'red'",
            "TypeError: Cannot create property 'compareCallback' on string '0011111111010011001100110011001100110011001100110011001100110011'",
            "TypeError: Cannot create property 'compareCallback' on string 'Zsb]7:B3'<\"'",
            "TypeError: Cannot create property 'compareCallback' on number '-559'",
            "TypeError: Cannot create property 'compareCallback' on string '../../../data-structures/graph/GraphVertex'",
            "TypeError: Cannot create property 'compareCallback' on number '10352'",
            "TypeError: Cannot create property 'compareCallback' on string '.'",
            "TypeError: Cannot create property 'compareCallback' on string 'Ux1;OKgI$Ss|/DyY-<aVyY2~@*A5_$<RU@'E}l<dA4Uka\":2S{H%fjfZy_:*kAETSDO2x|<yqcatLAIv|[Z:>W2Wb&gT'",
            "TypeError: Cannot create property 'compareCallback' on number '30'",
            "TypeError: Cannot create property 'compareCallback' on string '../../../data-structures/heap/MinHeap'",
            "TypeError: Cannot create property 'compareCallback' on string '#9_'",
            "TypeError: Cannot create property 'compareCallback' on string '1100000000111011001010000000000000000000000000000000000000000000'",
            "TypeError: Cannot create property 'compareCallback' on string 'Lmn``lt25LJicF`40e\"W7hc|§,S.#b.x@([Hp`e'u<i W*g`o0t6N\\CW§x\"YM=?3e'L]|8Ea$|'",
            "TypeError: Cannot create property 'compareCallback' on number '0.25'",
            "TypeError: Cannot create property 'compareCallback' on number '0.2'",
            "TypeError: Cannot create property 'compareCallback' on number '-678.0960694756229'"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "import articulationPoints from \"../instrumented/javascript-algorithms/src/algorithms/graph/articulation-points/articulationPoints.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = -424;",
                "\t\tconst anon1 = \"../../../algorithms/math/is-power-of-two/isPowerOfTwo\";",
                "\t\tconst arrayElement = new RadixSort(anon, anon1)",
                "\t\tconst arrayElement1 = 387;",
                "\t\tconst arrayElement2 = \"8yyTC±4<-b{YHsoJ|GqF4ezO\";",
                "\t\tconst arrayElement3 = -873;",
                "\t\tconst arrayElement4 = {}",
                "\t\tconst arrayElement5 = [arrayElement, arrayElement1, arrayElement2, arrayElement3, arrayElement4]",
                "\t\tconst graph = [arrayElement5]",
                "\t\tconst anon2 = \"The data is empty\";",
                "\t\tconst articulationPointsReturnValue = await articulationPoints(graph, anon2)",
                "\t\tconst anon3 = -424;",
                "\t\tconst anon4 = \"../../../algorithms/math/is-power-of-two/isPowerOfTwo\";",
                "\t\tconst arrayElement6 = new RadixSort(anon3, anon4)",
                "\t\tconst arrayElement7 = {}",
                "\t\tconst index = \"../../sorting/merge-sort/MergeSort\";",
                "\t\tconst arrayElement8 = \"8yyTC±4<-b{YHsoJ|GqF4ezO\";",
                "\t\tconst placeElementsInCharacterBucketsReturnValue = await arrayElement6.placeElementsInCharacterBuckets(arrayElement7, index, arrayElement8)",
                "\t\tconst anon5 = -424;",
                "\t\tconst anon6 = \"../../../algorithms/math/is-power-of-two/isPowerOfTwo\";",
                "\t\tconst arrayElement9 = new RadixSort(anon5, anon6)",
                "\t\tconst localElement = () => {};",
                "\t\tconst index1 = 221.6361766574969;",
                "\t\tconst numPasses = \"Left index can not be greater than right one\";",
                "\t\tconst getCharCodeOfElementAtIndexReturnValue = await arrayElement9.getCharCodeOfElementAtIndex(localElement, index1, numPasses)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import ShellSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/shell-sort/ShellSort.js\";",
                "import Trie from \"../instrumented/javascript-algorithms/src/data-structures/trie/Trie.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst value = false;",
                "\t\tconst graph = new GraphVertex(value)",
                "\t\tconst startVertex = null;",
                "\t\tconst anon = 0.49999;",
                "\t\tconst anon1 = false;",
                "\t\tconst anon2 = new Trie(anon1)",
                "\t\tconst enterVertex = new ShellSort(anon, anon2)",
                "\t\tconst allowTraversal = {}",
                "\t\tconst leaveVertex = () => {};",
                "\t\tconst callbacks = {",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks)",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex1 = 19;",
                "\t\tconst callbacks1 = {}",
                "\t\tconst anon3 = undefined;",
                "\t\tconst arrayElement = \"1011111111110000000000000000000000000000000000000000000000000000\";",
                "\t\tconst value1 = false;",
                "\t\tconst anon4 = [arrayElement, value1]",
                "\t\tconst depthFirstSearchReturnValue1 = await depthFirstSearch(graph1, startVertex1, callbacks1, anon3, anon4)",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph2 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst startVertex2 = null;",
                "\t\tconst callbacks2 = undefined;",
                "\t\tconst depthFirstSearchReturnValue2 = await depthFirstSearch(graph2, startVertex2, callbacks2)",
                "\t\tconst anon5 = false;",
                "\t\tconst anon6 = new Trie(anon5)",
                "\t\tconst word = 546;",
                "\t\tconst arrayElement1 = \"1011111111110000000000000000000000000000000000000000000000000000\";",
                "\t\tconst addWordReturnValue = await anon6.addWord(word, arrayElement1)",
                "\t\tconst anon7 = false;",
                "\t\tconst anon8 = new Trie(anon7)",
                "\t\tconst arrayElement2 = \"1011111111110000000000000000000000000000000000000000000000000000\";",
                "\t\tconst anon9 = 0.49999;",
                "\t\tconst anon10 = \"./isPositive\";",
                "\t\tconst doesWordExistReturnValue = await anon8.doesWordExist(arrayElement2, anon9, anon10)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import QuickSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSort.js\";",
                "import eulerianPath from \"../instrumented/javascript-algorithms/src/algorithms/graph/eulerian-path/eulerianPath.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst anon = \"Matrices have incompatible shape for multiplication\";",
                "\t\tconst anon1 = new QuickSort(anon)",
                "\t\tconst anon2 = false;",
                "\t\tconst graph = new Graph(assignment, anon1, anon2)",
                "\t\tconst eulerianPathReturnValue = await eulerianPath(graph)",
                "\t\tconst anon3 = \"Matrices have incompatible shape for multiplication\";",
                "\t\tconst anon4 = new QuickSort(anon3)",
                "\t\tconst assignment1 = false;",
                "\t\tconst anon5 = \"^MnI?_,79|TdMAdZqIt)@|lW>%,\";",
                "\t\tconst sortReturnValue = await anon4.sort(assignment1, anon5)",
                "\t\tconst anon6 = \"Matrices have incompatible shape for multiplication\";",
                "\t\tconst anon7 = new QuickSort(anon6)",
                "\t\tconst anon8 = \"Matrices have incompatible shape for multiplication\";",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst arrayElement1 = 119;",
                "\t\tconst arrayElement2 = \"aa\";",
                "\t\tconst originalArray = [anon8, arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst sortReturnValue1 = await anon7.sort(originalArray)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import QuickSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSort.js\";",
                "import eulerianPath from \"../instrumented/javascript-algorithms/src/algorithms/graph/eulerian-path/eulerianPath.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = 133.36042137173058;",
                "\t\tconst getAllEdges = new QuickSort(anon)",
                "\t\tconst getAllVertices = () => {};",
                "\t\tconst deleteEdge = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getAllEdges\": getAllEdges,",
                "\t\t\t\"getAllVertices\": getAllVertices,",
                "\t\t\t\"deleteEdge\": deleteEdge",
                "\t\t}",
                "\t\tconst eulerianPathReturnValue = await eulerianPath(graph)",
                "\t\tconst anon1 = 133.36042137173058;",
                "\t\tconst getAllEdges1 = new QuickSort(anon1)",
                "\t\tconst getAllVertices1 = () => {};",
                "\t\tconst deleteEdge1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getAllEdges\": getAllEdges1,",
                "\t\t\t\"getAllVertices\": getAllVertices1,",
                "\t\t\t\"deleteEdge\": deleteEdge1",
                "\t\t}",
                "\t\tconst eulerianPathReturnValue1 = await eulerianPath(graph1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import QuickSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSort.js\";",
                "import eulerianPath from \"../instrumented/javascript-algorithms/src/algorithms/graph/eulerian-path/eulerianPath.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getAllEdges = () => {};",
                "\t\tconst getAllVertices = () => {};",
                "\t\tconst deleteEdge = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getAllEdges\": getAllEdges,",
                "\t\t\t\"getAllVertices\": getAllVertices,",
                "\t\t\t\"deleteEdge\": deleteEdge",
                "\t\t}",
                "\t\tconst anon = 10344;",
                "\t\tconst anon1 = true;",
                "\t\tconst anon2 = new QuickSort(anon1)",
                "\t\tconst eulerianPathReturnValue = await eulerianPath(graph, anon, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import QueenPosition from \"../instrumented/javascript-algorithms/src/algorithms/uncategorized/n-queens/QueenPosition.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "import ShellSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/shell-sort/ShellSort.js\";",
                "import floydWarshall from \"../instrumented/javascript-algorithms/src/algorithms/graph/floyd-warshall/floydWarshall.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst anon = 620.2122111696749;",
                "\t\tconst anon1 = new ShellSort(anon)",
                "\t\tconst floydWarshallReturnValue = await floydWarshall(graph, anon1)",
                "\t\tconst assignment1 = false;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst rowIndex = \"99FB±'i$\";",
                "\t\tconst anon2 = null;",
                "\t\tconst columnIndex = new RadixSort(anon2)",
                "\t\tconst startVertex = new QueenPosition(rowIndex, columnIndex)",
                "\t\tconst endVertex = () => {};",
                "\t\tconst assignment2 = 135;",
                "\t\tconst anon3 = 26;",
                "\t\tconst edge = new GraphEdge(startVertex, endVertex, assignment2, anon3)",
                "\t\tconst deleteEdgeReturnValue = await graph1.deleteEdge(edge)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import QueenPosition from \"../instrumented/javascript-algorithms/src/algorithms/uncategorized/n-queens/QueenPosition.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "import ShellSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/shell-sort/ShellSort.js\";",
                "import floydWarshall from \"../instrumented/javascript-algorithms/src/algorithms/graph/floyd-warshall/floydWarshall.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst arrayElement = 366;",
                "\t\tconst anon = new ShellSort(arrayElement)",
                "\t\tconst floydWarshallReturnValue = await floydWarshall(graph, anon)",
                "\t\tconst assignment1 = true;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst rowIndex = \"99FB±'i$\";",
                "\t\tconst anon1 = null;",
                "\t\tconst columnIndex = new RadixSort(anon1)",
                "\t\tconst startVertex = new QueenPosition(rowIndex, columnIndex)",
                "\t\tconst endVertex = () => {};",
                "\t\tconst assignment2 = 135;",
                "\t\tconst anon2 = 26;",
                "\t\tconst edge = new GraphEdge(startVertex, endVertex, assignment2, anon2)",
                "\t\tconst deleteEdgeReturnValue = await graph1.deleteEdge(edge)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import QueenPosition from \"../instrumented/javascript-algorithms/src/algorithms/uncategorized/n-queens/QueenPosition.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "import ShellSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/shell-sort/ShellSort.js\";",
                "import floydWarshall from \"../instrumented/javascript-algorithms/src/algorithms/graph/floyd-warshall/floydWarshall.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst anon = 10345.5595703125;",
                "\t\tconst anon1 = new ShellSort(anon)",
                "\t\tconst floydWarshallReturnValue = await floydWarshall(graph, anon1)",
                "\t\tconst assignment1 = false;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst rowIndex = \"99FB±'i$\";",
                "\t\tconst anon2 = null;",
                "\t\tconst columnIndex = new RadixSort(anon2)",
                "\t\tconst startVertex = new QueenPosition(rowIndex, columnIndex)",
                "\t\tconst endVertex = () => {};",
                "\t\tconst assignment2 = 135;",
                "\t\tconst anon3 = 26;",
                "\t\tconst edge = new GraphEdge(startVertex, endVertex, assignment2, anon3)",
                "\t\tconst deleteEdgeReturnValue = await graph1.deleteEdge(edge)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import QueenPosition from \"../instrumented/javascript-algorithms/src/algorithms/uncategorized/n-queens/QueenPosition.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "import ShellSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/shell-sort/ShellSort.js\";",
                "import floydWarshall from \"../instrumented/javascript-algorithms/src/algorithms/graph/floyd-warshall/floydWarshall.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst anon = 622.6171335679045;",
                "\t\tconst anon1 = new ShellSort(anon)",
                "\t\tconst floydWarshallReturnValue = await floydWarshall(graph, anon1)",
                "\t\tconst assignment1 = false;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst rowIndex = \"99FB±'i$\";",
                "\t\tconst anon2 = null;",
                "\t\tconst columnIndex = new RadixSort(anon2)",
                "\t\tconst startVertex = new QueenPosition(rowIndex, columnIndex)",
                "\t\tconst endVertex = () => {};",
                "\t\tconst assignment2 = 135;",
                "\t\tconst anon3 = -94;",
                "\t\tconst edge = new GraphEdge(startVertex, endVertex, assignment2, anon3)",
                "\t\tconst deleteEdgeReturnValue = await graph1.deleteEdge(edge)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import QueenPosition from \"../instrumented/javascript-algorithms/src/algorithms/uncategorized/n-queens/QueenPosition.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "import ShellSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/shell-sort/ShellSort.js\";",
                "import floydWarshall from \"../instrumented/javascript-algorithms/src/algorithms/graph/floyd-warshall/floydWarshall.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst rowIndex = \"99FB±'i$\";",
                "\t\tconst anon = new ShellSort(rowIndex)",
                "\t\tconst floydWarshallReturnValue = await floydWarshall(graph, anon)",
                "\t\tconst assignment1 = false;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst rowIndex1 = \"99FB±'i$\";",
                "\t\tconst anon1 = 986;",
                "\t\tconst columnIndex = new RadixSort(anon1)",
                "\t\tconst startVertex = new QueenPosition(rowIndex1, columnIndex)",
                "\t\tconst endVertex = () => {};",
                "\t\tconst assignment2 = 135;",
                "\t\tconst anon2 = 26;",
                "\t\tconst edge = new GraphEdge(startVertex, endVertex, assignment2, anon2)",
                "\t\tconst deleteEdgeReturnValue = await graph1.deleteEdge(edge)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import QueenPosition from \"../instrumented/javascript-algorithms/src/algorithms/uncategorized/n-queens/QueenPosition.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "import ShellSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/shell-sort/ShellSort.js\";",
                "import floydWarshall from \"../instrumented/javascript-algorithms/src/algorithms/graph/floyd-warshall/floydWarshall.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst anon = 26;",
                "\t\tconst anon1 = new ShellSort(anon)",
                "\t\tconst floydWarshallReturnValue = await floydWarshall(graph, anon1)",
                "\t\tconst assignment1 = false;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst rowIndex = \"99FB±'i$\";",
                "\t\tconst anon2 = null;",
                "\t\tconst columnIndex = new RadixSort(anon2)",
                "\t\tconst startVertex = new QueenPosition(rowIndex, columnIndex)",
                "\t\tconst endVertex = () => {};",
                "\t\tconst assignment2 = 135;",
                "\t\tconst anon3 = 26;",
                "\t\tconst edge = new GraphEdge(startVertex, endVertex, assignment2, anon3)",
                "\t\tconst deleteEdgeReturnValue = await graph1.deleteEdge(edge)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import QueenPosition from \"../instrumented/javascript-algorithms/src/algorithms/uncategorized/n-queens/QueenPosition.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "import ShellSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/shell-sort/ShellSort.js\";",
                "import floydWarshall from \"../instrumented/javascript-algorithms/src/algorithms/graph/floyd-warshall/floydWarshall.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst anon = -94;",
                "\t\tconst anon1 = new ShellSort(anon)",
                "\t\tconst floydWarshallReturnValue = await floydWarshall(graph, anon1)",
                "\t\tconst assignment1 = true;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst rowIndex = \"99FB±'i$\";",
                "\t\tconst anon2 = null;",
                "\t\tconst columnIndex = new RadixSort(anon2)",
                "\t\tconst startVertex = new QueenPosition(rowIndex, columnIndex)",
                "\t\tconst endVertex = () => {};",
                "\t\tconst assignment2 = 135;",
                "\t\tconst anon3 = 26;",
                "\t\tconst edge = new GraphEdge(startVertex, endVertex, assignment2, anon3)",
                "\t\tconst deleteEdgeReturnValue = await graph1.deleteEdge(edge)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import MergeSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js\";",
                "import floydWarshall from \"../instrumented/javascript-algorithms/src/algorithms/graph/floyd-warshall/floydWarshall.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = undefined;",
                "\t\tconst anon = \"r$yiECn)'KXVB>5]\\\\]E%WQ%o!9l0J;2\";",
                "\t\tconst arrayElement = new MergeSort(anon)",
                "\t\tconst anon1 = [arrayElement]",
                "\t\tconst graph = new Graph(assignment, anon1)",
                "\t\tconst anon2 = \"=gj!]ejUP6$1\";",
                "\t\tconst floydWarshallReturnValue = await floydWarshall(graph, anon2)",
                "\t\tconst anon3 = \"r$yiECn)'KXVB>5]\\\\]E%WQ%o!9l0J;2\";",
                "\t\tconst arrayElement1 = new MergeSort(anon3)",
                "\t\tconst localLength = -950.2450051113213;",
                "\t\tconst slice = () => {};",
                "\t\tconst leftArray = {",
                "\t\t\t\"length\": localLength,",
                "\t\t\t\"slice\": slice",
                "\t\t}",
                "\t\tconst localLength1 = -288;",
                "\t\tconst slice1 = () => {};",
                "\t\tconst rightArray = {",
                "\t\t\t\"length\": localLength1,",
                "\t\t\t\"slice\": slice1",
                "\t\t}",
                "\t\tconst mergeSortedArraysReturnValue = await arrayElement1.mergeSortedArrays(leftArray, rightArray)",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst anon4 = \"r$yiECn)'KXVB>5]\\\\]E%WQ%o!9l0J;2\";",
                "\t\tconst arrayElement2 = new MergeSort(anon4)",
                "\t\tconst anon5 = [arrayElement2]",
                "\t\tconst graph1 = new Graph(assignment1, anon5)",
                "\t\tconst anon6 = true;",
                "\t\tconst getAllEdgesReturnValue = await graph1.getAllEdges(anon6)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import ShellSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/shell-sort/ShellSort.js\";",
                "import floydWarshall from \"../instrumented/javascript-algorithms/src/algorithms/graph/floyd-warshall/floydWarshall.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst anon = 622;",
                "\t\tconst anon1 = new ShellSort(anon)",
                "\t\tconst floydWarshallReturnValue = await floydWarshall(graph, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import MergeSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js\";",
                "import prim from \"../instrumented/javascript-algorithms/src/algorithms/graph/prim/prim.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst isDirected = false;",
                "\t\tconst getAllVertices = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"isDirected\": isDirected,",
                "\t\t\t\"getAllVertices\": getAllVertices",
                "\t\t}",
                "\t\tconst anon = -663;",
                "\t\tconst anon1 = 10344;",
                "\t\tconst anon2 = new MergeSort(anon1)",
                "\t\tconst primReturnValue = await prim(graph, anon, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import MergeSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js\";",
                "import prim from \"../instrumented/javascript-algorithms/src/algorithms/graph/prim/prim.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst isDirected = true;",
                "\t\tconst getAllVertices = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"isDirected\": isDirected,",
                "\t\t\t\"getAllVertices\": getAllVertices",
                "\t\t}",
                "\t\tconst anon = \"red\";",
                "\t\tconst anon1 = new MergeSort(anon)",
                "\t\tconst primReturnValue = await prim(graph, anon1)",
                "\t\tconst anon2 = \"red\";",
                "\t\tconst anon3 = new MergeSort(anon2)",
                "\t\tconst isDirected1 = true;",
                "\t\tconst getAllVertices1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"isDirected\": isDirected1,",
                "\t\t\t\"getAllVertices\": getAllVertices1",
                "\t\t}",
                "\t\tconst isDirected2 = true;",
                "\t\tconst getAllVertices2 = () => {};",
                "\t\tconst graph2 = {",
                "\t\t\t\"isDirected\": isDirected2,",
                "\t\t\t\"getAllVertices\": getAllVertices2",
                "\t\t}",
                "\t\tconst mergeSortedArraysReturnValue = await anon3.mergeSortedArrays(graph1, graph2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import QuickSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"±-@\\\\~\\\\Ux1<#lPPKtLv*7=\\tc\\np%XH * X-`q:\\\\IA*0~xQ7jde7MgP8z50i<O6F,'LsLceQPV6<\\\"9\\\"§F8}u\";",
                "\t\tconst anon = \"0011111111010011001100110011001100110011001100110011001100110011\";",
                "\t\tconst weightLimit = new QuickSort(anon)",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import QuickSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = \"Zsb]7:B3'<\\\"\";",
                "\t\tconst possibleItems = new QuickSort(anon)",
                "\t\tconst weightLimit = \"1010111001100110\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst anon1 = \"$\";",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem(anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BinaryTreeNode from \"../instrumented/javascript-algorithms/src/data-structures/tree/BinaryTreeNode.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import QuickSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = -559;",
                "\t\tconst objectPattern = new QuickSort(anon)",
                "\t\tconst anon1 = 17;",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern, anon1)",
                "\t\tconst totalWeightReturnValue = await knapsackItem.totalWeight",
                "\t\tconst anon2 = 10345.5595703125;",
                "\t\tconst anon3 = \"z6*ZF.}rs)wZ}Ku5$J+*^e-Q?hn<po^SbSW(=fQpjwRQhIsvBa\";",
                "\t\tconst objectPattern1 = new QuickSort(anon2, anon3)",
                "\t\tconst anon4 = 10345.5595703125;",
                "\t\tconst anon5 = \"z6*ZF.}rs)wZ}Ku5$J+*^e-Q?hn<po^SbSW(=fQpjwRQhIsvBa\";",
                "\t\tconst objectPattern2 = new QuickSort(anon4, anon5)",
                "\t\tconst sortReturnValue = await objectPattern1.sort(objectPattern2)",
                "\t\tconst anon6 = 10345.5595703125;",
                "\t\tconst anon7 = \"z6*ZF.}rs)wZ}Ku5$J+*^e-Q?hn<po^SbSW(=fQpjwRQhIsvBa\";",
                "\t\tconst objectPattern3 = new QuickSort(anon6, anon7)",
                "\t\tconst assignment = undefined;",
                "\t\tconst originalArray = new BinaryTreeNode(assignment)",
                "\t\tconst anon8 = undefined;",
                "\t\tconst anon9 = \"z6*ZF.}rs)wZ}Ku5$J+*^e-Q?hn<po^SbSW(=fQpjwRQhIsvBa\";",
                "\t\tconst sortReturnValue1 = await objectPattern3.sort(originalArray, anon8, anon9)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = null;",
                "\t\tconst arrayElement1 = {}",
                "\t\tconst objectPattern = [arrayElement, arrayElement1]",
                "\t\tconst anon = \"../../../data-structures/graph/GraphVertex\";",
                "\t\tconst anon1 = new RadixSort(anon)",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern, anon1)",
                "\t\tconst valuePerWeightRatioReturnValue = await knapsackItem.valuePerWeightRatio",
                "\t\tconst anon2 = \"../../../data-structures/graph/GraphVertex\";",
                "\t\tconst anon3 = new RadixSort(anon2)",
                "\t\tconst arrayElement2 = null;",
                "\t\tconst arrayElement3 = {}",
                "\t\tconst objectPattern1 = [arrayElement2, arrayElement3]",
                "\t\tconst isArrayOfNumbersReturnValue = await anon3.isArrayOfNumbers(objectPattern1)",
                "\t\tconst anon4 = \"../../../data-structures/graph/GraphVertex\";",
                "\t\tconst anon5 = new RadixSort(anon4)",
                "\t\tconst arrayElement4 = null;",
                "\t\tconst arrayElement5 = {}",
                "\t\tconst objectPattern2 = [arrayElement4, arrayElement5]",
                "\t\tconst arrayElement6 = {}",
                "\t\tconst anon6 = () => {};",
                "\t\tconst isArrayOfNumbersReturnValue1 = await anon5.isArrayOfNumbers(objectPattern2, arrayElement6, anon6)",
                "\t\tconst anon7 = \"../../../data-structures/graph/GraphVertex\";",
                "\t\tconst anon8 = new RadixSort(anon7)",
                "\t\tconst arrayElement7 = {}",
                "\t\tconst index = 658.0468668140859;",
                "\t\tconst placeElementsInNumberBucketsReturnValue = await anon8.placeElementsInNumberBuckets(arrayElement7, index)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BinaryTreeNode from \"../instrumented/javascript-algorithms/src/data-structures/tree/BinaryTreeNode.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import QuickSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = 10352;",
                "\t\tconst anon1 = \"z6*ZF.}rs)wZ}Ku5$J+*^e-Q?hn<po^SbSW(=fQpjwRQhIsvBa\";",
                "\t\tconst objectPattern = new QuickSort(anon, anon1)",
                "\t\tconst anon2 = 23;",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern, anon2)",
                "\t\tconst totalWeightReturnValue = await knapsackItem.totalWeight",
                "\t\tconst anon3 = 10345.5595703125;",
                "\t\tconst anon4 = \"z6*ZF.}rs)wZ}Ku5$J+*^e-Q?hn<po^SbSW(=fQpjwRQhIsvBa\";",
                "\t\tconst objectPattern1 = new QuickSort(anon3, anon4)",
                "\t\tconst anon5 = 10345.5595703125;",
                "\t\tconst anon6 = \"z6*ZF.}rs)wZ}Ku5$J+*^e-Q?hn<po^SbSW(=fQpjwRQhIsvBa\";",
                "\t\tconst objectPattern2 = new QuickSort(anon5, anon6)",
                "\t\tconst sortReturnValue = await objectPattern1.sort(objectPattern2)",
                "\t\tconst anon7 = 10345.5595703125;",
                "\t\tconst anon8 = \"z6*ZF.}rs)wZ}Ku5$J+*^e-Q?hn<po^SbSW(=fQpjwRQhIsvBa\";",
                "\t\tconst objectPattern3 = new QuickSort(anon7, anon8)",
                "\t\tconst assignment = undefined;",
                "\t\tconst originalArray = new BinaryTreeNode(assignment)",
                "\t\tconst anon9 = 554.1153128575834;",
                "\t\tconst anon10 = \"z6*ZF.}rs)wZ}Ku5$J+*^e-Q?hn<po^SbSW(=fQpjwRQhIsvBa\";",
                "\t\tconst sortReturnValue1 = await objectPattern3.sort(originalArray, anon9, anon10)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Heap from \"../instrumented/javascript-algorithms/src/data-structures/heap/Heap.js\";",
                "import ShellSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/shell-sort/ShellSort.js\";",
                "import {add} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = 1.7976931348623157e+308;",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst arrayElement3 = \"The message and key string can only contain letters\";",
                "\t\tconst arrayElement4 = [arrayElement2, arrayElement3]",
                "\t\tconst arrayElement5 = [arrayElement, arrayElement1, arrayElement4]",
                "\t\tconst arrayElement6 = 100;",
                "\t\tconst anon = \".\";",
                "\t\tconst comparatorFunction = new ShellSort(anon)",
                "\t\tconst arrayElement7 = new Heap(comparatorFunction)",
                "\t\tconst arrayElement8 = [arrayElement6, arrayElement7]",
                "\t\tconst a = [arrayElement5, arrayElement8]",
                "\t\tconst arrayElement9 = 0.2;",
                "\t\tconst arrayElement10 = \"Dh±QmuWpsY?@mi@AS±'8e]pDI,JGuHzv\\\\i_dH*5Wh*vZgv<v{]$bNME[§lGOHx|-jM\";",
                "\t\tconst b = [arrayElement9, arrayElement10]",
                "\t\tconst addReturnValue = await add(a, b)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import MergeSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js\";",
                "import {dot} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {t} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {zeros} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = 3;",
                "\t\tconst arrayElement1 = 67;",
                "\t\tconst arrayElement2 = 14;",
                "\t\tconst mShape = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst anon = \"Ux1;OKgI$Ss|/DyY-<aVyY2~@*A5_$<RU@'E}l<dA4Uka\\\":2S{H%fjfZy_:*kAETSDO2x|<yqcatLAIv|[Z:>W2Wb&gT\";",
                "\t\tconst anon1 = new MergeSort(anon)",
                "\t\tconst arrayElement3 = () => {};",
                "\t\tconst arrayElement4 = \"./countSetBits\";",
                "\t\tconst arrayElement5 = -405.1263586045593;",
                "\t\tconst anon2 = [arrayElement3, arrayElement4, arrayElement5]",
                "\t\tconst zerosReturnValue = await zeros(mShape, anon1, anon2)",
                "\t\tconst arrayElement6 = () => {};",
                "\t\tconst arrayElement7 = \"./countSetBits\";",
                "\t\tconst arrayElement8 = -405.1263586045593;",
                "\t\tconst anon3 = [arrayElement6, arrayElement7, arrayElement8]",
                "\t\tconst arrayElement9 = () => {};",
                "\t\tconst arrayElement10 = \"./countSetBits\";",
                "\t\tconst arrayElement11 = -405.1263586045593;",
                "\t\tconst anon4 = [arrayElement9, arrayElement10, arrayElement11]",
                "\t\tconst dotReturnValue = await dot(anon3, anon4)",
                "\t\tconst arrayElement12 = \"./countSetBits\";",
                "\t\tconst arrayElement13 = () => {};",
                "\t\tconst arrayElement14 = \"./countSetBits\";",
                "\t\tconst arrayElement15 = -405.1263586045593;",
                "\t\tconst anon5 = [arrayElement13, arrayElement14, arrayElement15]",
                "\t\tconst arrayElement16 = 219.2959096160489;",
                "\t\tconst arrayElement17 = () => {};",
                "\t\tconst m = [arrayElement12, anon5, arrayElement16, arrayElement17]",
                "\t\tconst tReturnValue = await t(m)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import CountingSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js\";",
                "import ShellSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/shell-sort/ShellSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst countingSort = new CountingSort()",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst anon = 30;",
                "\t\tconst anon1 = null;",
                "\t\tconst arrayElement1 = new ShellSort(anon, anon1)",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst originalArray = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst assignment = false;",
                "\t\tconst assignment1 = true;",
                "\t\tconst sortReturnValue = await countingSort.sort(originalArray, assignment, assignment1)",
                "\t\tconst countingSort1 = new CountingSort()",
                "\t\tconst arrayElement3 = () => {};",
                "\t\tconst arrayElement4 = 472.56480508398135;",
                "\t\tconst arrayElement5 = false;",
                "\t\tconst originalArray1 = [arrayElement3, arrayElement4, arrayElement5]",
                "\t\tconst assignment2 = undefined;",
                "\t\tconst assignment3 = undefined;",
                "\t\tconst sortReturnValue1 = await countingSort1.sort(originalArray1, assignment2, assignment3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import HashTable from \"../instrumented/javascript-algorithms/src/data-structures/hash-table/HashTable.js\";",
                "import MergeSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = null;",
                "\t\tconst assignment = undefined;",
                "\t\tconst anon = \"../../../data-structures/heap/MinHeap\";",
                "\t\tconst anon1 = new MergeSort(anon)",
                "\t\tconst anon2 = \"b<SFab>g~//§9Bj!\\\\KH\";",
                "\t\tconst callbacks = new HashTable(assignment, anon1, anon2)",
                "\t\tconst anon3 = true;",
                "\t\tconst graph1 = 691;",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks, anon3, graph1)",
                "\t\tconst graph2 = 524.5440951796088;",
                "\t\tconst startVertex1 = null;",
                "\t\tconst callbacks1 = undefined;",
                "\t\tconst depthFirstSearchReturnValue1 = await depthFirstSearch(graph2, startVertex1, callbacks1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BinaryTreeNode from \"../instrumented/javascript-algorithms/src/data-structures/tree/BinaryTreeNode.js\";",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst anon = \"#9_\";",
                "\t\tconst startVertex = new RadixSort(anon)",
                "\t\tconst endVertex = \"F9@qF{_OBC\\nz$cSu!6^MlRUDQg/<5+/cFrw±A\";",
                "\t\tconst assignment1 = 0.75;",
                "\t\tconst startVertex1 = new GraphEdge(startVertex, endVertex, assignment1)",
                "\t\tconst assignment2 = undefined;",
                "\t\tconst endVertex1 = new BinaryTreeNode(assignment2)",
                "\t\tconst findEdgeReturnValue = await graph.findEdge(startVertex1, endVertex1)",
                "\t\tconst assignment3 = true;",
                "\t\tconst graph1 = new Graph(assignment3)",
                "\t\tconst anon1 = \"#9_\";",
                "\t\tconst startVertex2 = new RadixSort(anon1)",
                "\t\tconst endVertex2 = \"F9@qF{_OBC\\nz$cSu!6^MlRUDQg/<5+/cFrw±A\";",
                "\t\tconst assignment4 = 0.75;",
                "\t\tconst startVertex3 = new GraphEdge(startVertex2, endVertex2, assignment4)",
                "\t\tconst anon2 = null;",
                "\t\tconst addEdgeReturnValue = await graph1.addEdge(startVertex3, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BinaryTreeNode from \"../instrumented/javascript-algorithms/src/data-structures/tree/BinaryTreeNode.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "import RedBlackTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = new RedBlackTree()",
                "\t\tconst assignment = -216.70434218097887;",
                "\t\tconst anon1 = {}",
                "\t\tconst grandParentNode = new BinaryTreeNode(assignment, anon1)",
                "\t\tconst anon2 = \"1100000000111011001010000000000000000000000000000000000000000000\";",
                "\t\tconst anon3 = \"../../../data-structures/stack/Stack\";",
                "\t\tconst anon4 = new RadixSort(anon2, anon3)",
                "\t\tconst leftLeftRotationReturnValue = await anon.leftLeftRotation(grandParentNode, anon4)",
                "\t\tconst anon5 = new RedBlackTree()",
                "\t\tconst anon6 = {}",
                "\t\tconst leftLeftRotationReturnValue1 = await anon5.leftLeftRotation(anon6)",
                "\t\tconst anon7 = \"1100000000111011001010000000000000000000000000000000000000000000\";",
                "\t\tconst anon8 = \"../../../data-structures/stack/Stack\";",
                "\t\tconst anon9 = new RadixSort(anon7, anon8)",
                "\t\tconst arrayElement = 67;",
                "\t\tconst arrayElement1 = 10344;",
                "\t\tconst array = [arrayElement, arrayElement1]",
                "\t\tconst anon10 = undefined;",
                "\t\tconst isArrayOfNumbersReturnValue = await anon9.isArrayOfNumbers(array, anon10)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import QuickSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSort.js\";",
                "import stronglyConnectedComponents from \"../instrumented/javascript-algorithms/src/algorithms/graph/strongly-connected-components/stronglyConnectedComponents.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst startVertex = \"{Hlr)LFIC!F\\\"nBoDL±or*hmB9Yl3.§-|{c%X;C_e9<(m%UcpKouJ~heH^MY}-7rP?:~7PGY4]Kf&\\\"%]!;W4r^lK/~`q\";",
                "\t\tconst anon = \"Lmn``lt25LJicF`40e\\\"W7hc|§,S.#b.x@([Hp`e'u<i W*g`o0t6N\\\\CW§x\\\"YM=?3e'L]|8Ea$|\";",
                "\t\tconst endVertex = new QuickSort(anon)",
                "\t\tconst assignment = undefined;",
                "\t\tconst anon1 = () => {};",
                "\t\tconst graph = new GraphEdge(startVertex, endVertex, assignment, anon1)",
                "\t\tconst stronglyConnectedComponentsReturnValue = await stronglyConnectedComponents(graph)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = null;",
                "\t\tconst anon1 = 0.25;",
                "\t\tconst knapsack = new Knapsack(anon, anon1)",
                "\t\tconst anon2 = null;",
                "\t\tconst anon3 = 0.25;",
                "\t\tconst anon4 = new RadixSort(anon3)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack.sortPossibleItemsByValuePerWeightRatio(anon2, anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import MergeSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js\";",
                "import {getCellAtIndex} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst m = {}",
                "\t\tconst arrayElement = undefined;",
                "\t\tconst anon = 0.2;",
                "\t\tconst anon1 = 0.2;",
                "\t\tconst anon2 = undefined;",
                "\t\tconst arrayElement1 = new MergeSort(anon, anon1, anon2)",
                "\t\tconst cellIndices = [arrayElement, arrayElement1]",
                "\t\tconst getCellAtIndexReturnValue = await getCellAtIndex(m, cellIndices)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "import RedBlackTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst redBlackTree = new RedBlackTree()",
                "\t\tconst anon = -678.0960694756229;",
                "\t\tconst localSet = new RadixSort(anon)",
                "\t\tconst meta = {",
                "\t\t\t\"set\": localSet",
                "\t\t}",
                "\t\tconst node = {",
                "\t\t\t\"meta\": meta",
                "\t\t}",
                "\t\tconst anon1 = \"./countSetBits\";",
                "\t\tconst makeNodeRedReturnValue = await redBlackTree.makeNodeRed(node, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash4": {
        "crashProject": "javascript-algorithms",
        "trace": "    at GraphEdge.getKey (javascript-algorithms/src/data-structures/graph/GraphEdge.js:17:45)\n    at _context (javascript-algorithms/src/algorithms/graph/bellman-ford/bellmanFord.js:22:49)\n    at call (.syntest/tests/tempTest.spec.js:13:38)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot read properties of null (reading 'getKey')",
            "TypeError: this.keyCallback is not a function",
            "TypeError: this.startVertex.getKey is not a function",
            "TypeError: Cannot read properties of undefined (reading 'getKey')",
            "TypeError: this.endVertex.getKey is not a function",
            "TypeError: Cannot read properties of null (reading 'length')",
            "TypeError: Cannot read properties of undefined (reading 'forEach')",
            "TypeError: callbacks.enterVertex is not a function",
            "TypeError: Cannot create property 'allowTraversal' on boolean 'false'",
            "TypeError: graph.getNeighbors is not a function",
            "TypeError: Cannot read properties of null (reading 'allowTraversal')",
            "TypeError: Cannot create property 'allowTraversal' on string 'ZnIhts.a|>w*AH@m&&6±73[%xye|R(9y'",
            "TypeError: Cannot read properties of undefined (reading 'getNeighbors')",
            "TypeError: callbacks.leaveVertex is not a function",
            "TypeError: Cannot read properties of null (reading 'getNeighbors')",
            "TypeError: Cannot create property 'allowTraversal' on number '418'",
            "TypeError: Cannot create property 'compareCallback' on string './countSetBits'",
            "TypeError: Cannot create property 'allowTraversal' on string '../bridges/graphBridges'",
            "TypeError: Cannot create property 'allowTraversal' on boolean 'true'",
            "TypeError: Cannot create property 'allowTraversal' on string '''",
            "TypeError: Cannot create property 'allowTraversal' on number '975.7597747082987'",
            "TypeError: Cannot create property 'allowTraversal' on number '-499.9911066367525'",
            "TypeError: Cannot read properties of undefined (reading 'length')",
            "TypeError: Cannot create property 'compareCallback' on string 'syk62CSZH[9d:%Uny^}TaXdxsSo'",
            "TypeError: Cannot create property 'compareCallback' on string 'syk62C@SZH[9d:%Uny^}TaXdxsSo'",
            "TypeError: Cannot create property 'allowTraversal' on number '447'",
            "RangeError: Invalid array length",
            "TypeError: Cannot create property 'allowTraversal' on string '0011111111111110000000000000000000000000000000000000000000000000'",
            "TypeError: Cannot create property 'compareCallback' on string 'syk62CSZH[9d:%Uny^}TXdxsSo'",
            "TypeError: Cannot create property 'compareCallback' on string 'Ly+AWO3Ixb)L=b3+S5y sqjZa&xy.Q'Yhanz\"NF+jv/^,Rqz>VVS7vtYL\"O}X?@BgiJ4AWhQm>wu2OJ±5S?\"sb'\\{MKHE)fh(wC'",
            "TypeError: Cannot create property 'allowTraversal' on number '2.718281828459045'",
            "TypeError: Cannot create property 'allowTraversal' on string '>Jz_g-Xs=d+QJE?''S'g1(EsX`)4WMQ8v\\)s^6^N,e1)a'",
            "TypeError: Cannot create property 'allowTraversal' on number '769.1611855904227'",
            "TypeError: Cannot create property 'allowTraversal' on number '14'",
            "TypeError: Cannot create property 'compareCallback' on string 'DP'",
            "TypeError: Cannot create property 'compareCallback' on string 'B95B2(tQq)uKuf^~4fWqtCUr<fCjD#hm%as_CS/eu:ow7#u&_wZbsr\\JWe'",
            "TypeError: Cannot create property 'compareCallback' on number '518.0198967370545'",
            "TypeError: Cannot create property 'compareCallback' on string 'rm}&>§>25148)|[F;e%s=W§l('",
            "TypeError: Cannot create property 'compareCallback' on number '354'",
            "TypeError: Cannot create property 'compareCallback' on boolean 'true'",
            "TypeError: Cannot create property 'compareCallback' on number '469.68564014164303'",
            "TypeError: graph.getAllVertices is not a function",
            "TypeError: Cannot read properties of null (reading 'getAllVertices')",
            "TypeError: Cannot read properties of undefined (reading 'getAllVertices')",
            "TypeError: originalArray.slice is not a function",
            "TypeError: Cannot create property 'compareCallback' on string 'dn\t:]/|AwKBi+_)'Fv\tw~c]~7Oc[QfGho N)ag_8ba,\\uwj_zc[yy;cY=DPhno7Y6|#'",
            "TypeError: Cannot create property 'compareCallback' on number '97'",
            "TypeError: Cannot create property 'compareCallback' on number '-243.1725434048834'",
            "TypeError: array.reduce is not a function",
            "TypeError: Cannot create property 'compareCallback' on string 'The method supports only positive integers'",
            "TypeError: Cannot create property 'compareCallback' on string 'The method supports only psitive integers'",
            "TypeError: Cannot create property 'compareCallback' on string 'The methid supports only positive integers'",
            "Error: Invalid matrix format",
            "Error: Matrix is not of 2D shape",
            "TypeError: Cannot create property 'compareCallback' on string 'J±%Ba\"(I=|_eVFJt§uK,1m'",
            "TypeError: Cannot read properties of undefined (reading 'get')",
            "TypeError: Cannot read properties of null (reading 'meta')",
            "TypeError: Cannot create property 'compareCallback' on string 'o)Jsn+AX%=i*(tH%D)'",
            "TypeError: Cannot read properties of undefined (reading 'meta')",
            "TypeError: Cannot read properties of undefined (reading 'codePointAt')",
            "TypeError: Cannot create property 'compareCallback' on string '1111101111111111'",
            "TypeError: undefined is not iterable (cannot read property Symbol(Symbol.iterator))",
            "TypeError: Cannot create property 'compareCallback' on string 'The method suports only positive integers'",
            "TypeError: _char2.codePointAt is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import bellmanFord from \"../instrumented/javascript-algorithms/src/algorithms/graph/bellman-ford/bellmanFord.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst graph = () => {};",
                "\t\tconst startVertex = null;",
                "\t\tconst endVertex = []",
                "\t\tconst assignment = undefined;",
                "\t\tconst startVertex1 = new GraphEdge(startVertex, endVertex, assignment)",
                "\t\tconst anon = {}",
                "\t\tconst bellmanFordReturnValue = await bellmanFord(graph, startVertex1, anon)",
                "\t\tconst startVertex2 = null;",
                "\t\tconst endVertex1 = []",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst startVertex3 = new GraphEdge(startVertex2, endVertex1, assignment1)",
                "\t\tconst anon1 = {}",
                "\t\tconst localToStringReturnValue = await startVertex3.toString(anon1)",
                "\t\tconst startVertex4 = null;",
                "\t\tconst endVertex2 = []",
                "\t\tconst assignment2 = undefined;",
                "\t\tconst startVertex5 = new GraphEdge(startVertex4, endVertex2, assignment2)",
                "\t\tconst reverseReturnValue = await startVertex5.reverse()",
                "\t\tconst startVertex6 = null;",
                "\t\tconst endVertex3 = []",
                "\t\tconst assignment3 = undefined;",
                "\t\tconst startVertex7 = new GraphEdge(startVertex6, endVertex3, assignment3)",
                "\t\tconst reverseReturnValue1 = await startVertex7.reverse()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import DisjointSetItem from \"../instrumented/javascript-algorithms/src/data-structures/disjoint-set/DisjointSetItem.js\";",
                "import bellmanFord from \"../instrumented/javascript-algorithms/src/algorithms/graph/bellman-ford/bellmanFord.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getAllVertices = () => {};",
                "\t\tconst getVertexByKey = () => {};",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst findEdge = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getAllVertices\": getAllVertices,",
                "\t\t\t\"getVertexByKey\": getVertexByKey,",
                "\t\t\t\"getNeighbors\": getNeighbors,",
                "\t\t\t\"findEdge\": findEdge",
                "\t\t}",
                "\t\tconst value = () => {};",
                "\t\tconst keyCallback = \"]ye{aP§=]\\t2/[TCC^sro/22HP|*\\\",1wd\\twRqAa2I)UO!Gi^i3hz\\\"crL~B>FAiK#yp\\tk0 \";",
                "\t\tconst anon = false;",
                "\t\tconst startVertex = new DisjointSetItem(value, keyCallback, anon)",
                "\t\tconst anon1 = false;",
                "\t\tconst bellmanFordReturnValue = await bellmanFord(graph, startVertex, anon1)",
                "\t\tconst value1 = () => {};",
                "\t\tconst keyCallback1 = \"]ye{aP§=]\\t2/[TCC^sro/22HP|*\\\",1wd\\twRqAa2I)UO!Gi^i3hz\\\"crL~B>FAiK#yp\\tk0 \";",
                "\t\tconst anon2 = false;",
                "\t\tconst startVertex1 = new DisjointSetItem(value1, keyCallback1, anon2)",
                "\t\tconst getAllVertices1 = () => {};",
                "\t\tconst getVertexByKey1 = () => {};",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst findEdge1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getAllVertices\": getAllVertices1,",
                "\t\t\t\"getVertexByKey\": getVertexByKey1,",
                "\t\t\t\"getNeighbors\": getNeighbors1,",
                "\t\t\t\"findEdge\": findEdge1",
                "\t\t}",
                "\t\tconst anon3 = () => {};",
                "\t\tconst addChildReturnValue = await startVertex1.addChild(graph1, anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import bellmanFord from \"../instrumented/javascript-algorithms/src/algorithms/graph/bellman-ford/bellmanFord.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getAllVertices = () => {};",
                "\t\tconst getVertexByKey = () => {};",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst findEdge = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getAllVertices\": getAllVertices,",
                "\t\t\t\"getVertexByKey\": getVertexByKey,",
                "\t\t\t\"getNeighbors\": getNeighbors,",
                "\t\t\t\"findEdge\": findEdge",
                "\t\t}",
                "\t\tconst startVertex = true;",
                "\t\tconst endVertex = null;",
                "\t\tconst assignment = 16;",
                "\t\tconst startVertex1 = new GraphEdge(startVertex, endVertex, assignment)",
                "\t\tconst bellmanFordReturnValue = await bellmanFord(graph, startVertex1)",
                "\t\tconst startVertex2 = true;",
                "\t\tconst endVertex1 = null;",
                "\t\tconst assignment1 = 16;",
                "\t\tconst startVertex3 = new GraphEdge(startVertex2, endVertex1, assignment1)",
                "\t\tconst anon = \"./QueenPosition\";",
                "\t\tconst reverseReturnValue = await startVertex3.reverse(anon)",
                "\t\tconst startVertex4 = true;",
                "\t\tconst endVertex2 = null;",
                "\t\tconst assignment2 = 16;",
                "\t\tconst startVertex5 = new GraphEdge(startVertex4, endVertex2, assignment2)",
                "\t\tconst reverseReturnValue1 = await startVertex5.reverse()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import bellmanFord from \"../instrumented/javascript-algorithms/src/algorithms/graph/bellman-ford/bellmanFord.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getAllVertices = () => {};",
                "\t\tconst getVertexByKey = () => {};",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst findEdge = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getAllVertices\": getAllVertices,",
                "\t\t\t\"getVertexByKey\": getVertexByKey,",
                "\t\t\t\"getNeighbors\": getNeighbors,",
                "\t\t\t\"findEdge\": findEdge",
                "\t\t}",
                "\t\tconst startVertex = undefined;",
                "\t\tconst endVertex = \"\\t\\nQP@QetI9U3jS%O%53?yE^;'IWmha2t$3,{[./nyz43yr@\";",
                "\t\tconst assignment = -507.91503303511786;",
                "\t\tconst anon = undefined;",
                "\t\tconst startVertex1 = new GraphEdge(startVertex, endVertex, assignment, anon)",
                "\t\tconst bellmanFordReturnValue = await bellmanFord(graph, startVertex1)",
                "\t\tconst startVertex2 = undefined;",
                "\t\tconst endVertex1 = \"\\t\\nQP@QetI9U3jS%O%53?yE^;'IWmha2t$3,{[./nyz43yr@\";",
                "\t\tconst assignment1 = -507.91503303511786;",
                "\t\tconst anon1 = undefined;",
                "\t\tconst startVertex3 = new GraphEdge(startVertex2, endVertex1, assignment1, anon1)",
                "\t\tconst localToStringReturnValue = await startVertex3.toString()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import bellmanFord from \"../instrumented/javascript-algorithms/src/algorithms/graph/bellman-ford/bellmanFord.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst getKey = () => {};",
                "\t\tconst startVertex = {",
                "\t\t\t\"getKey\": getKey",
                "\t\t}",
                "\t\tconst getKey1 = () => {};",
                "\t\tconst arrayElement = \"*\";",
                "\t\tconst getKey2 = () => {};",
                "\t\tconst arrayElement1 = 756.6537203104167;",
                "\t\tconst endVertex = [getKey1, arrayElement, getKey2, arrayElement1]",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst anon = null;",
                "\t\tconst startVertex1 = new GraphEdge(startVertex, endVertex, assignment1, anon)",
                "\t\tconst bellmanFordReturnValue = await bellmanFord(graph, startVertex1)",
                "\t\tconst getKey3 = () => {};",
                "\t\tconst startVertex2 = {",
                "\t\t\t\"getKey\": getKey3",
                "\t\t}",
                "\t\tconst getKey4 = () => {};",
                "\t\tconst startVertex3 = {",
                "\t\t\t\"getKey\": getKey4",
                "\t\t}",
                "\t\tconst bellmanFordReturnValue1 = await bellmanFord(startVertex2, startVertex3)",
                "\t\tconst assignment2 = true;",
                "\t\tconst graph1 = new Graph(assignment2)",
                "\t\tconst getAdjacencyMatrixReturnValue = await graph1.getAdjacencyMatrix()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import MaxHeap from \"../instrumented/javascript-algorithms/src/data-structures/heap/MaxHeap.js\";",
                "import SegmentTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js\";",
                "import bfTravellingSalesman from \"../instrumented/javascript-algorithms/src/algorithms/graph/travelling-salesman/bfTravellingSalesman.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getAllVertices = () => {};",
                "\t\tconst getAdjacencyMatrix = () => {};",
                "\t\tconst getVerticesIndices = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getAllVertices\": getAllVertices,",
                "\t\t\t\"getAdjacencyMatrix\": getAdjacencyMatrix,",
                "\t\t\t\"getVerticesIndices\": getVerticesIndices",
                "\t\t}",
                "\t\tconst arrayElement = true;",
                "\t\tconst arrayElement1 = () => {};",
                "\t\tconst arrayElement2 = 0.300048828125;",
                "\t\tconst arrayElement3 = [arrayElement2]",
                "\t\tconst inputArray = null;",
                "\t\tconst operation = 180;",
                "\t\tconst anon = {}",
                "\t\tconst operationFallback = new MaxHeap(anon)",
                "\t\tconst anon1 = null;",
                "\t\tconst anon2 = -589.420166447783;",
                "\t\tconst arrayElement4 = new SegmentTree(inputArray, operation, operationFallback, anon1, anon2)",
                "\t\tconst anon3 = [arrayElement, arrayElement1, arrayElement3, arrayElement4]",
                "\t\tconst bfTravellingSalesmanReturnValue = await bfTravellingSalesman(graph, anon3)",
                "\t\tconst inputArray1 = null;",
                "\t\tconst operation1 = 180;",
                "\t\tconst anon4 = {}",
                "\t\tconst operationFallback1 = new MaxHeap(anon4)",
                "\t\tconst anon5 = null;",
                "\t\tconst anon6 = -589.420166447783;",
                "\t\tconst arrayElement5 = new SegmentTree(inputArray1, operation1, operationFallback1, anon5, anon6)",
                "\t\tconst operation2 = 180;",
                "\t\tconst getLeftChildIndexReturnValue = await arrayElement5.getLeftChildIndex(operation2)",
                "\t\tconst assignment = false;",
                "\t\tconst graph1 = new Graph(assignment)",
                "\t\tconst bfTravellingSalesmanReturnValue1 = await bfTravellingSalesman(graph1)",
                "\t\tconst anon7 = {}",
                "\t\tconst arrayElement6 = true;",
                "\t\tconst getAllVertices1 = () => {};",
                "\t\tconst getAdjacencyMatrix1 = () => {};",
                "\t\tconst getVerticesIndices1 = () => {};",
                "\t\tconst graph2 = {",
                "\t\t\t\"getAllVertices\": getAllVertices1,",
                "\t\t\t\"getAdjacencyMatrix\": getAdjacencyMatrix1,",
                "\t\t\t\"getVerticesIndices\": getVerticesIndices1",
                "\t\t}",
                "\t\tconst bfTravellingSalesmanReturnValue2 = await bfTravellingSalesman(anon7, arrayElement6, graph2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import HashTable from \"../instrumented/javascript-algorithms/src/data-structures/hash-table/HashTable.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = () => {};",
                "\t\tconst originalCallbacks = undefined;",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\tconst originalCallbacks1 = undefined;",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst assignment = undefined;",
                "\t\tconst anon = \"'4Lc(NDZRq:tlWt7 :Zf,a~=GUBbR{e\\\"#$vz4g^}9qX{#2_K!JbPZU.`~CD]wrJ!<y2Pyqh zWp]4\\\")6tO'\\\"OjhEMl\";",
                "\t\tconst anon1 = \")^!4y(Ng\\\"hZ§hg±PtrMg\\\"$*K#s7fvlT~ORCH\\\\}rlgDS^F±d*dcX,6:u(M9@x\\\":=±sa_+J^6H\\\"h}\";",
                "\t\tconst anon2 = \"dZ$Xm`W$\\\\?>@|pg6N%^flL]L\\\\A=x^=\\\"Qf]%k'_YFap#g±\";",
                "\t\tconst originalCallbacks2 = new HashTable(assignment, anon, anon1, anon2)",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(originalCallbacks1, graph1, originalCallbacks2)",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst anon3 = \"'4Lc(NDZRq:tlWt7 :Zf,a~=GUBbR{e\\\"#$vz4g^}9qX{#2_K!JbPZU.`~CD]wrJ!<y2Pyqh zWp]4\\\")6tO'\\\"OjhEMl\";",
                "\t\tconst anon4 = \")^!4y(Ng\\\"hZ§hg±PtrMg\\\"$*K#s7fvlT~ORCH\\\\}rlgDS^F±d*dcX,6:u(M9@x\\\":=±sa_+J^6H\\\"h}\";",
                "\t\tconst anon5 = \"dZ$Xm`W$\\\\?>@|pg6N%^flL]L\\\\A=x^=\\\"Qf]%k'_YFap#g±\";",
                "\t\tconst originalCallbacks3 = new HashTable(assignment1, anon3, anon4, anon5)",
                "\t\tconst anon6 = \"dZ$Xm`W$\\\\?>@|pg6N%^flL]L\\\\A=x^=\\\"Qf]%k'_YFap#g±\";",
                "\t\tconst getNeighbors2 = () => {};",
                "\t\tconst graph2 = {",
                "\t\t\t\"getNeighbors\": getNeighbors2",
                "\t\t}",
                "\t\tconst localDeleteReturnValue = await originalCallbacks3.delete(anon6, graph2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst anon = \"../../../data-structures/graph/Graph\";",
                "\t\tconst graph = new Graph(assignment, anon)",
                "\t\tconst startVertex = \"|KhJW4PB<IkY\\n ,z>JAS8eZ@V7§§#&p[~EQ0#±tHoh %Rk\\\\,a0L|JXwZLbn\\tOJg6k{a\\\"KZ9[Y<)hI6DQ9fj^E/Q\\t'\";",
                "\t\tconst allowTraversal = true;",
                "\t\tconst enterVertex = true;",
                "\t\tconst leaveVertex = true;",
                "\t\tconst originalCallbacks = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\tconst assignment1 = true;",
                "\t\tconst anon1 = \"../../../data-structures/graph/Graph\";",
                "\t\tconst graph1 = new Graph(assignment1, anon1)",
                "\t\tconst getVerticesIndicesReturnValue = await graph1.getVerticesIndices()",
                "\t\tconst assignment2 = true;",
                "\t\tconst anon2 = \"../../../data-structures/graph/Graph\";",
                "\t\tconst graph2 = new Graph(assignment2, anon2)",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst vertex = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst getNeighborsReturnValue = await graph2.getNeighbors(vertex)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst arrayElement = false;",
                "\t\tconst arrayElement1 = 0.300048828125;",
                "\t\tconst arrayElement2 = {}",
                "\t\tconst startVertex = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst originalCallbacks = false;",
                "\t\tconst anon = {}",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks, anon)",
                "\t\tconst arrayElement3 = {}",
                "\t\tconst anon1 = {}",
                "\t\tconst allowTraversal = true;",
                "\t\tconst enterVertex = false;",
                "\t\tconst leaveVertex = true;",
                "\t\tconst originalCallbacks1 = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(arrayElement3, anon1, originalCallbacks1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst graph = -286.37349929508696;",
                "\t\tconst startVertex = true;",
                "\t\tconst assignment = false;",
                "\t\tconst anon = undefined;",
                "\t\tconst originalCallbacks = new Graph(assignment, anon)",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex1 = () => {};",
                "\t\tconst enterVertex = () => {};",
                "\t\tconst allowTraversal = () => {};",
                "\t\tconst leaveVertex = () => {};",
                "\t\tconst originalCallbacks1 = {",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(graph1, startVertex1, originalCallbacks1)",
                "\t\tconst assignment1 = false;",
                "\t\tconst anon1 = undefined;",
                "\t\tconst originalCallbacks2 = new Graph(assignment1, anon1)",
                "\t\tconst reverseReturnValue = await originalCallbacks2.reverse()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import DisjointSetItem from \"../instrumented/javascript-algorithms/src/data-structures/disjoint-set/DisjointSetItem.js\";",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst graph = () => {};",
                "\t\tconst startVertex = \"0011111111111000000000000000000000000000000000000000000000000000\";",
                "\t\tconst originalCallbacks = null;",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\tconst assignment = false;",
                "\t\tconst graph1 = new Graph(assignment)",
                "\t\tconst startVertex1 = -673.5953544297006;",
                "\t\tconst startVertex2 = \"0011111111111000000000000000000000000000000000000000000000000000\";",
                "\t\tconst originalCallbacks1 = null;",
                "\t\tconst anon = {}",
                "\t\tconst originalCallbacks2 = new DisjointSetItem(startVertex2, originalCallbacks1, anon)",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(graph1, startVertex1, originalCallbacks2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = undefined;",
                "\t\tconst originalCallbacks = \"ZnIhts.a|>w*AH@m&&6±73[%xye|R(9y\";",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst startVertex1 = \"Item not found in the tree\";",
                "\t\tconst originalCallbacks1 = {}",
                "\t\tconst anon = null;",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(graph1, startVertex1, originalCallbacks1, anon)",
                "\t\tconst assignment = false;",
                "\t\tconst graph2 = new Graph(assignment)",
                "\t\tconst startVertex2 = \"../longest-common-subsequence/longestCommonSubsequence\";",
                "\t\tconst originalCallbacks2 = undefined;",
                "\t\tconst breadthFirstSearchReturnValue2 = await breadthFirstSearch(graph2, startVertex2, originalCallbacks2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import HashTable from \"../instrumented/javascript-algorithms/src/data-structures/hash-table/HashTable.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst originalCallbacks = undefined;",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst assignment = undefined;",
                "\t\tconst anon = \"'4Lc(NDZRq:tlWt7 :Zf,a~=GUBbR{e\\\"#$vz4g^}9qX{#2_K!JbPZU.`~CD]wrJ!<y2Pyqh zWp]4\\\")6tO'\\\"OjhEMl\";",
                "\t\tconst anon1 = \")^!4y(Ng\\\"hZ§hg±PtrMg\\\"$*K#s7fvlT~ORCH\\\\}rlgDS^F±d*dcX,6:u(M9@x\\\":=±sa_+J^6H\\\"h}\";",
                "\t\tconst anon2 = \"dZ$Xm`W$\\\\?>@|pg6N%^flL]L\\\\A=x^=\\\"Qf]%k'_YFap#g±\";",
                "\t\tconst originalCallbacks1 = new HashTable(assignment, anon, anon1, anon2)",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(originalCallbacks, graph, originalCallbacks1)",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst getNeighbors2 = () => {};",
                "\t\tconst originalCallbacks2 = {}",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(graph1, getNeighbors2, originalCallbacks2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst value = true;",
                "\t\tconst anon = null;",
                "\t\tconst graph = new GraphVertex(value, anon)",
                "\t\tconst startVertex = 369.94721060533925;",
                "\t\tconst allowTraversal = true;",
                "\t\tconst enterVertex = false;",
                "\t\tconst leaveVertex = true;",
                "\t\tconst originalCallbacks = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\tconst value1 = true;",
                "\t\tconst anon1 = null;",
                "\t\tconst graph1 = new GraphVertex(value1, anon1)",
                "\t\tconst startVertex1 = 369.94721060533925;",
                "\t\tconst hasNeighborReturnValue = await graph1.hasNeighbor(startVertex1)",
                "\t\tconst value2 = true;",
                "\t\tconst anon2 = null;",
                "\t\tconst graph2 = new GraphVertex(value2, anon2)",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst arrayElement1 = () => {};",
                "\t\tconst vertex = [arrayElement, arrayElement1]",
                "\t\tconst findEdgeReturnValue = await graph2.findEdge(vertex)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import MergeSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst graph = null;",
                "\t\tconst startVertex = new MergeSort()",
                "\t\tconst enterVertex = () => {};",
                "\t\tconst allowTraversal = () => {};",
                "\t\tconst leaveVertex = () => {};",
                "\t\tconst originalCallbacks = {",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst startVertex = 362;",
                "\t\tconst originalCallbacks = 418;",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\tconst assignment1 = true;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst getWeightReturnValue = await graph1.getWeight()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst graph = 37;",
                "\t\tconst startVertex = 12;",
                "\t\tconst originalCallbacks = \"./countSetBits\";",
                "\t\tconst anon = null;",
                "\t\tconst originalCallbacks1 = new Sort(originalCallbacks, anon)",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks1)",
                "\t\tconst originalCallbacks2 = \"./countSetBits\";",
                "\t\tconst anon1 = null;",
                "\t\tconst originalCallbacks3 = new Sort(originalCallbacks2, anon1)",
                "\t\tconst compareCallback = -196;",
                "\t\tconst visitingCallback = false;",
                "\t\tconst originalCallbacks4 = {",
                "\t\t\t\"compareCallback\": compareCallback,",
                "\t\t\t\"visitingCallback\": visitingCallback",
                "\t\t}",
                "\t\tconst initSortingCallbacksReturnValue = await originalCallbacks3.initSortingCallbacks(originalCallbacks4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst arrayElement = -899.6506754867833;",
                "\t\tconst arrayElement1 = \"0000000000000001\";",
                "\t\tconst startVertex = [arrayElement, arrayElement1]",
                "\t\tconst originalCallbacks = \"../bridges/graphBridges\";",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\tconst assignment1 = false;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst arrayElement2 = -899.6506754867833;",
                "\t\tconst arrayElement3 = \"0000000000000001\";",
                "\t\tconst startVertex1 = [arrayElement2, arrayElement3]",
                "\t\tconst getVerticesIndicesReturnValue = await graph1.getVerticesIndices(startVertex1)",
                "\t\tconst assignment2 = false;",
                "\t\tconst graph2 = new Graph(assignment2)",
                "\t\tconst localToStringReturnValue = await graph2.toString()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst arrayElement = false;",
                "\t\tconst arrayElement1 = 0.300048828125;",
                "\t\tconst arrayElement2 = {}",
                "\t\tconst startVertex = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst originalCallbacks = true;",
                "\t\tconst anon = {}",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks, anon)",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst startVertex1 = \"0000000001001100\";",
                "\t\tconst allowTraversal = true;",
                "\t\tconst enterVertex = true;",
                "\t\tconst leaveVertex = false;",
                "\t\tconst originalCallbacks1 = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst anon1 = true;",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(graph1, startVertex1, originalCallbacks1, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = 52;",
                "\t\tconst originalCallbacks = \"'\";",
                "\t\tconst anon = \"Z7\\\\c6*~) §tze0L2e)?jJSF\\n0E47sVk#qbrm,BPBia$\\\\jTB\\\"_w\";",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks, anon)",
                "\t\tconst value = 10344;",
                "\t\tconst anon1 = false;",
                "\t\tconst graph1 = new GraphVertex(value, anon1)",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph2 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst originalCallbacks1 = {}",
                "\t\tconst startVertex1 = 52;",
                "\t\tconst arrayElement = \"Eulerian path must contain two odd-ranked vertices\";",
                "\t\tconst getNeighbors2 = () => {};",
                "\t\tconst graph3 = {",
                "\t\t\t\"getNeighbors\": getNeighbors2",
                "\t\t}",
                "\t\tconst arrayElement1 = \"10111111100000000000000000000000\";",
                "\t\tconst startVertex2 = 52;",
                "\t\tconst anon2 = [arrayElement, graph3, arrayElement1, startVertex2]",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(graph1, graph2, originalCallbacks1, startVertex1, anon2)",
                "\t\tconst value1 = 10344;",
                "\t\tconst anon3 = false;",
                "\t\tconst graph4 = new GraphVertex(value1, anon3)",
                "\t\tconst getEdgesReturnValue = await graph4.getEdges()",
                "\t\tconst originalCallbacks2 = {}",
                "\t\tconst startVertex3 = 52;",
                "\t\tconst allowTraversal = false;",
                "\t\tconst enterVertex = 0.49999;",
                "\t\tconst leaveVertex = false;",
                "\t\tconst originalCallbacks3 = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst breadthFirstSearchReturnValue2 = await breadthFirstSearch(originalCallbacks2, startVertex3, originalCallbacks3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = () => {};",
                "\t\tconst originalCallbacks = 975.7597747082987;",
                "\t\tconst anon = \"N74sbk=&+~rAyT$LfYKq\\\"1- UB±:2od+\";",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks, anon)",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst startVertex1 = \"Hd±=JH<'5d8\\\"51#I§'dBiP+\\\\NC]|y%<W=~X\\\"§Thy>1z5)m#\";",
                "\t\tconst originalCallbacks1 = undefined;",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(graph1, startVertex1, originalCallbacks1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = () => {};",
                "\t\tconst originalCallbacks = -499.9911066367525;",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst arrayElement2 = -399;",
                "\t\tconst arrayElement3 = 362;",
                "\t\tconst anon = [arrayElement, arrayElement1, arrayElement2, arrayElement3]",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks, anon)",
                "\t\tconst arrayElement4 = {}",
                "\t\tconst startVertex1 = undefined;",
                "\t\tconst allowTraversal = false;",
                "\t\tconst enterVertex = false;",
                "\t\tconst leaveVertex = true;",
                "\t\tconst originalCallbacks1 = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(arrayElement4, startVertex1, originalCallbacks1)",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst enterVertex1 = false;",
                "\t\tconst originalCallbacks2 = undefined;",
                "\t\tconst breadthFirstSearchReturnValue2 = await breadthFirstSearch(graph1, enterVertex1, originalCallbacks2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import SegmentTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst graph = null;",
                "\t\tconst startVertex = -566;",
                "\t\tconst inputArray = undefined;",
                "\t\tconst operation = -519;",
                "\t\tconst operationFallback = \"0011111111111100000000000000000000000000000000000000000000000000\";",
                "\t\tconst arrayElement = 5e-324;",
                "\t\tconst anon = [arrayElement]",
                "\t\tconst originalCallbacks = new SegmentTree(inputArray, operation, operationFallback, anon)",
                "\t\tconst anon1 = null;",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks, anon1)",
                "\t\tconst assignment = true;",
                "\t\tconst graph1 = new Graph(assignment)",
                "\t\tconst anon2 = null;",
                "\t\tconst allowTraversal = false;",
                "\t\tconst enterVertex = true;",
                "\t\tconst leaveVertex = true;",
                "\t\tconst originalCallbacks1 = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst anon3 = () => {};",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(graph1, anon2, originalCallbacks1, anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = \"./multiplyByTwo\";",
                "\t\tconst originalCallbacks = \"syk62CSZH[9d:%Uny^}TaXdxsSo\";",
                "\t\tconst callbacks = new Sort(originalCallbacks)",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks)",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst startVertex1 = null;",
                "\t\tconst localReturn = false;",
                "\t\tconst allowTraversal = (ObjectPattern) => { return localReturn };",
                "\t\tconst enterVertex = true;",
                "\t\tconst leaveVertex = true;",
                "\t\tconst callbacks1 = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst depthFirstSearchReturnValue1 = await depthFirstSearch(graph1, startVertex1, callbacks1)",
                "\t\tconst originalCallbacks1 = \"syk62CSZH[9d:%Uny^}TaXdxsSo\";",
                "\t\tconst callbacks2 = new Sort(originalCallbacks1)",
                "\t\tconst localReturn1 = false;",
                "\t\tconst anon = undefined;",
                "\t\tconst originalCallbacks2 = \"syk62CSZH[9d:%Uny^}TaXdxsSo\";",
                "\t\tconst initSortingCallbacksReturnValue = await callbacks2.initSortingCallbacks(localReturn1, anon, originalCallbacks2)",
                "\t\tconst originalCallbacks3 = \"syk62CSZH[9d:%Uny^}TaXdxsSo\";",
                "\t\tconst callbacks3 = new Sort(originalCallbacks3)",
                "\t\tconst sortReturnValue = await callbacks3.sort()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = \"./multiplyByTwo\";",
                "\t\tconst originalCallbacks = \"syk62C@SZH[9d:%Uny^}TaXdxsSo\";",
                "\t\tconst callbacks = new Sort(originalCallbacks)",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks)",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst startVertex1 = null;",
                "\t\tconst localReturn = false;",
                "\t\tconst allowTraversal = (ObjectPattern) => { return localReturn };",
                "\t\tconst enterVertex = true;",
                "\t\tconst leaveVertex = true;",
                "\t\tconst callbacks1 = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst depthFirstSearchReturnValue1 = await depthFirstSearch(graph1, startVertex1, callbacks1)",
                "\t\tconst originalCallbacks1 = \"syk62CSZH[9d:%Uny^}TaXdxsSo\";",
                "\t\tconst callbacks2 = new Sort(originalCallbacks1)",
                "\t\tconst localReturn1 = false;",
                "\t\tconst anon = undefined;",
                "\t\tconst originalCallbacks2 = \"syk62CSZH[9d:%Uny^}TaXdxsSo\";",
                "\t\tconst initSortingCallbacksReturnValue = await callbacks2.initSortingCallbacks(localReturn1, anon, originalCallbacks2)",
                "\t\tconst originalCallbacks3 = \"syk62CSZH[9d:%Uny^}TaXdxsSo\";",
                "\t\tconst callbacks3 = new Sort(originalCallbacks3)",
                "\t\tconst sortReturnValue = await callbacks3.sort()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import FenwickTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/fenwick-tree/FenwickTree.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = {}",
                "\t\tconst callbacks = 447;",
                "\t\tconst anon = 65504;",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks, anon)",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst startVertex1 = null;",
                "\t\tconst callbacks1 = undefined;",
                "\t\tconst depthFirstSearchReturnValue1 = await depthFirstSearch(graph1, startVertex1, callbacks1)",
                "\t\tconst getNeighbors2 = () => {};",
                "\t\tconst graph2 = {",
                "\t\t\t\"getNeighbors\": getNeighbors2",
                "\t\t}",
                "\t\tconst startVertex2 = null;",
                "\t\tconst callbacks2 = undefined;",
                "\t\tconst depthFirstSearchReturnValue2 = await depthFirstSearch(graph2, startVertex2, callbacks2)",
                "\t\tconst graph3 = \"./TrieNode\";",
                "\t\tconst startVertex3 = null;",
                "\t\tconst callbacks3 = {}",
                "\t\tconst getNeighbors3 = () => {};",
                "\t\tconst graph4 = {",
                "\t\t\t\"getNeighbors\": getNeighbors3",
                "\t\t}",
                "\t\tconst depthFirstSearchReturnValue3 = await depthFirstSearch(graph3, startVertex3, callbacks3, graph4)",
                "\t\tconst graph5 = (Assignment) => {};",
                "\t\tconst graph6 = \"./TrieNode\";",
                "\t\tconst arraySize = () => {};",
                "\t\tconst callbacks4 = new FenwickTree(arraySize)",
                "\t\tconst depthFirstSearchReturnValue4 = await depthFirstSearch(graph5, graph6, callbacks4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import SegmentTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js\";",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst anon = false;",
                "\t\tconst graph = new Graph(assignment, anon)",
                "\t\tconst startVertex = null;",
                "\t\tconst inputArray = 0.1;",
                "\t\tconst operation = null;",
                "\t\tconst operationFallback = null;",
                "\t\tconst anon1 = new SelectionSort()",
                "\t\tconst callbacks = new SegmentTree(inputArray, operation, operationFallback, anon1)",
                "\t\tconst arrayElement = 0.0999755859375;",
                "\t\tconst arrayElement1 = false;",
                "\t\tconst arrayElement2 = null;",
                "\t\tconst anon2 = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks, anon2)",
                "\t\tconst anon3 = new SelectionSort()",
                "\t\tconst originalArray = {}",
                "\t\tconst sortReturnValue = await anon3.sort(originalArray)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst value = false;",
                "\t\tconst anon = null;",
                "\t\tconst graph = new GraphVertex(value, anon)",
                "\t\tconst startVertex = undefined;",
                "\t\tconst callbacks = \"0011111111111110000000000000000000000000000000000000000000000000\";",
                "\t\tconst anon1 = {}",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = \"./multiplyByTwo\";",
                "\t\tconst originalCallbacks = \"syk62CSZH[9d:%Uny^}TXdxsSo\";",
                "\t\tconst callbacks = new Sort(originalCallbacks)",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks)",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst startVertex1 = null;",
                "\t\tconst localReturn = false;",
                "\t\tconst allowTraversal = (ObjectPattern) => { return localReturn };",
                "\t\tconst enterVertex = true;",
                "\t\tconst leaveVertex = true;",
                "\t\tconst callbacks1 = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst depthFirstSearchReturnValue1 = await depthFirstSearch(graph1, startVertex1, callbacks1)",
                "\t\tconst originalCallbacks1 = \"syk62CSZH[9d:%Uny^}TaXdxsSo\";",
                "\t\tconst callbacks2 = new Sort(originalCallbacks1)",
                "\t\tconst localReturn1 = false;",
                "\t\tconst anon = undefined;",
                "\t\tconst originalCallbacks2 = \"syk62CSZH[9d:%Uny^}TaXdxsSo\";",
                "\t\tconst initSortingCallbacksReturnValue = await callbacks2.initSortingCallbacks(localReturn1, anon, originalCallbacks2)",
                "\t\tconst originalCallbacks3 = \"syk62CSZH[9d:%Uny^}TaXdxsSo\";",
                "\t\tconst callbacks3 = new Sort(originalCallbacks3)",
                "\t\tconst sortReturnValue = await callbacks3.sort()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = null;",
                "\t\tconst originalCallbacks = \"Ly+AWO3Ixb)L=b3+S5y sqjZa&xy.Q'Yhanz\\\"NF+jv/^,Rqz>VVS7vtYL\\\"O}X?@BgiJ4AWhQm>wu2OJ±5S?\\\"sb'\\\\{MKHE)fh(wC\";",
                "\t\tconst callbacks = new Sort(originalCallbacks)",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks)",
                "\t\tconst originalCallbacks1 = \"Ly+AWO3Ixb)L=b3+S5y sqjZa&xy.Q'Yhanz\\\"NF+jv/^,Rqz>VVS7vtYL\\\"O}X?@BgiJ4AWhQm>wu2OJ±5S?\\\"sb'\\\\{MKHE)fh(wC\";",
                "\t\tconst callbacks1 = new Sort(originalCallbacks1)",
                "\t\tconst originalCallbacks2 = false;",
                "\t\tconst initSortingCallbacksReturnValue = await callbacks1.initSortingCallbacks(originalCallbacks2)",
                "\t\tconst originalCallbacks3 = \"Ly+AWO3Ixb)L=b3+S5y sqjZa&xy.Q'Yhanz\\\"NF+jv/^,Rqz>VVS7vtYL\\\"O}X?@BgiJ4AWhQm>wu2OJ±5S?\\\"sb'\\\\{MKHE)fh(wC\";",
                "\t\tconst callbacks2 = new Sort(originalCallbacks3)",
                "\t\tconst originalCallbacks4 = \"O~JaV?pOtef5 n_q9(84MtV1+b{qGEc#&1WKolJRukdP§d-m^P@b/50/[G=Kus8j'sK\\\"B(tN#VLO{|4LP2|SE$f>p$QI,.q§\";",
                "\t\tconst anon = {}",
                "\t\tconst initSortingCallbacksReturnValue1 = await callbacks2.initSortingCallbacks(originalCallbacks4, anon)",
                "\t\tconst originalCallbacks5 = \"Ly+AWO3Ixb)L=b3+S5y sqjZa&xy.Q'Yhanz\\\"NF+jv/^,Rqz>VVS7vtYL\\\"O}X?@BgiJ4AWhQm>wu2OJ±5S?\\\"sb'\\\\{MKHE)fh(wC\";",
                "\t\tconst callbacks3 = new Sort(originalCallbacks5)",
                "\t\tconst sortReturnValue = await callbacks3.sort()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst startVertex = undefined;",
                "\t\tconst callbacks = 2.718281828459045;",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks)",
                "\t\tconst assignment1 = true;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst anon = -239.71962340331936;",
                "\t\tconst getAllVerticesReturnValue = await graph1.getAllVertices(anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import CountingSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js\";",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = null;",
                "\t\tconst callbacks = \">Jz_g-Xs=d+QJE?''S'g1(EsX`)4WMQ8v\\\\)s^6^N,e1)a\";",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks)",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst startVertex1 = null;",
                "\t\tconst enterVertex = () => {};",
                "\t\tconst allowTraversal = () => {};",
                "\t\tconst leaveVertex = () => {};",
                "\t\tconst callbacks1 = {",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst depthFirstSearchReturnValue1 = await depthFirstSearch(graph1, startVertex1, callbacks1)",
                "\t\tconst getNeighbors2 = () => {};",
                "\t\tconst graph2 = {",
                "\t\t\t\"getNeighbors\": getNeighbors2",
                "\t\t}",
                "\t\tconst startVertex2 = null;",
                "\t\tconst callbacks2 = {}",
                "\t\tconst anon = undefined;",
                "\t\tconst depthFirstSearchReturnValue2 = await depthFirstSearch(graph2, startVertex2, callbacks2, anon)",
                "\t\tconst assignment = false;",
                "\t\tconst graph3 = new Graph(assignment)",
                "\t\tconst startVertex3 = undefined;",
                "\t\tconst callbacks3 = undefined;",
                "\t\tconst anon1 = new CountingSort()",
                "\t\tconst depthFirstSearchReturnValue3 = await depthFirstSearch(graph3, startVertex3, callbacks3, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst anon = undefined;",
                "\t\tconst graph = new Graph(assignment, anon)",
                "\t\tconst startVertex = null;",
                "\t\tconst callbacks = 769.1611855904227;",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks)",
                "\t\tconst assignment1 = true;",
                "\t\tconst anon1 = undefined;",
                "\t\tconst graph1 = new Graph(assignment1, anon1)",
                "\t\tconst getVerticesIndicesReturnValue = await graph1.getVerticesIndices()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = null;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst startVertex = null;",
                "\t\tconst callbacks = 14;",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "import detectDirectedCycle from \"../instrumented/javascript-algorithms/src/algorithms/graph/detect-cycle/detectDirectedCycle.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = () => {};",
                "\t\tconst anon = null;",
                "\t\tconst graph = new Graph(assignment, anon)",
                "\t\tconst originalCallbacks = \"DP\";",
                "\t\tconst anon1 = \"./BinarySearchTreeNode\";",
                "\t\tconst arrayElement = new Sort(originalCallbacks, anon1)",
                "\t\tconst anon2 = 0.2;",
                "\t\tconst anon3 = [arrayElement, anon2]",
                "\t\tconst detectDirectedCycleReturnValue = await detectDirectedCycle(graph, anon3)",
                "\t\tconst assignment1 = () => {};",
                "\t\tconst anon4 = 0.2;",
                "\t\tconst graph1 = new Graph(assignment1, anon4)",
                "\t\tconst getVerticesIndicesReturnValue = await graph1.getVerticesIndices()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "import eulerianPath from \"../instrumented/javascript-algorithms/src/algorithms/graph/eulerian-path/eulerianPath.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = undefined;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst anon = \"B95B2(tQq)uKuf^~4fWqtCUr<fCjD#hm%as_CS/eu:ow7#u&_wZbsr\\\\JWe\";",
                "\t\tconst arrayElement = new Sort(anon)",
                "\t\tconst anon1 = [arrayElement]",
                "\t\tconst anon2 = \"B95B2(tQq)uKuf^~4fWqtCUr<fCjD#hm%as_CS/eu:ow7#u&_wZbsr\\\\JWe\";",
                "\t\tconst eulerianPathReturnValue = await eulerianPath(graph, anon1, anon2)",
                "\t\tconst getAllEdges = () => {};",
                "\t\tconst getAllVertices = () => {};",
                "\t\tconst deleteEdge = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getAllEdges\": getAllEdges,",
                "\t\t\t\"getAllVertices\": getAllVertices,",
                "\t\t\t\"deleteEdge\": deleteEdge",
                "\t\t}",
                "\t\tconst eulerianPathReturnValue1 = await eulerianPath(graph1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "import eulerianPath from \"../instrumented/javascript-algorithms/src/algorithms/graph/eulerian-path/eulerianPath.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = undefined;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst anon = 518.0198967370545;",
                "\t\tconst anon1 = new Sort(anon)",
                "\t\tconst anon2 = 518.0198967370545;",
                "\t\tconst eulerianPathReturnValue = await eulerianPath(graph, anon1, anon2)",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst eulerianPathReturnValue1 = await eulerianPath(graph1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "import floydWarshall from \"../instrumented/javascript-algorithms/src/algorithms/graph/floyd-warshall/floydWarshall.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = \"yqF2R]@^F[2Gj<0)Y0Ff,m7AavLFX§L3-EW=|\\\\B|c*dL&x`|)oL68[±!v'lg&'\\n<heU?OCi§f2Q@O4gk§O|f|c_pn;I3Z$\";",
                "\t\tconst anon = \"DFr6io#+F(,9]|IV- ^s=szGYT/f8,W@SpA5\\nw\\nz0s(AT@'\";",
                "\t\tconst graph = new Graph(assignment, anon)",
                "\t\tconst anon1 = false;",
                "\t\tconst arrayElement = \"./DisjointSetItem\";",
                "\t\tconst originalCallbacks = \"rm}&>§>25148)|[F;e%s=W§l(\";",
                "\t\tconst anon2 = 20;",
                "\t\tconst arrayElement1 = new Sort(originalCallbacks, anon2)",
                "\t\tconst anon3 = [arrayElement, arrayElement1]",
                "\t\tconst floydWarshallReturnValue = await floydWarshall(graph, anon1, anon3)",
                "\t\tconst originalCallbacks1 = \"rm}&>§>25148)|[F;e%s=W§l(\";",
                "\t\tconst anon4 = 20;",
                "\t\tconst arrayElement2 = new Sort(originalCallbacks1, anon4)",
                "\t\tconst anon5 = false;",
                "\t\tconst initSortingCallbacksReturnValue = await arrayElement2.initSortingCallbacks(anon5)",
                "\t\tconst getAllVertices = () => {};",
                "\t\tconst findEdge = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getAllVertices\": getAllVertices,",
                "\t\t\t\"findEdge\": findEdge",
                "\t\t}",
                "\t\tconst anon6 = null;",
                "\t\tconst floydWarshallReturnValue1 = await floydWarshall(graph1, anon6)",
                "\t\tconst originalCallbacks2 = \"rm}&>§>25148)|[F;e%s=W§l(\";",
                "\t\tconst anon7 = 20;",
                "\t\tconst arrayElement3 = new Sort(originalCallbacks2, anon7)",
                "\t\tconst anon8 = false;",
                "\t\tconst sortReturnValue = await arrayElement3.sort(anon8)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "import hamiltonianCycle from \"../instrumented/javascript-algorithms/src/algorithms/graph/hamiltonian-cycle/hamiltonianCycle.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = undefined;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst originalCallbacks = 354;",
                "\t\tconst anon = 69;",
                "\t\tconst anon1 = new Sort(originalCallbacks, anon)",
                "\t\tconst anon2 = \"§6)\\\"j<[Yy(~\";",
                "\t\tconst hamiltonianCycleReturnValue = await hamiltonianCycle(graph, anon1, anon2)",
                "\t\tconst originalCallbacks1 = 354;",
                "\t\tconst anon3 = 69;",
                "\t\tconst anon4 = new Sort(originalCallbacks1, anon3)",
                "\t\tconst sortReturnValue = await anon4.sort()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "import hamiltonianCycle from \"../instrumented/javascript-algorithms/src/algorithms/graph/hamiltonian-cycle/hamiltonianCycle.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst assignment1 = true;",
                "\t\tconst assignment2 = true;",
                "\t\tconst anon = null;",
                "\t\tconst anon1 = {}",
                "\t\tconst anon2 = new Sort(assignment2, anon, anon1)",
                "\t\tconst graph = new Graph(assignment, assignment1, anon2)",
                "\t\tconst hamiltonianCycleReturnValue = await hamiltonianCycle(graph)",
                "\t\tconst anon3 = {}",
                "\t\tconst anon4 = 0.2;",
                "\t\tconst hamiltonianCycleReturnValue1 = await hamiltonianCycle(anon3, anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "import hamiltonianCycle from \"../instrumented/javascript-algorithms/src/algorithms/graph/hamiltonian-cycle/hamiltonianCycle.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst anon = undefined;",
                "\t\tconst graph = new Graph(assignment, anon)",
                "\t\tconst originalCallbacks = 469.68564014164303;",
                "\t\tconst anon1 = () => {};",
                "\t\tconst anon2 = new Sort(originalCallbacks, anon1)",
                "\t\tconst anon3 = {}",
                "\t\tconst hamiltonianCycleReturnValue = await hamiltonianCycle(graph, anon2, anon3)",
                "\t\tconst originalCallbacks1 = 469.68564014164303;",
                "\t\tconst anon4 = () => {};",
                "\t\tconst anon5 = new Sort(originalCallbacks1, anon4)",
                "\t\tconst originalCallbacks2 = null;",
                "\t\tconst initSortingCallbacksReturnValue = await anon5.initSortingCallbacks(originalCallbacks2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import stronglyConnectedComponents from \"../instrumented/javascript-algorithms/src/algorithms/graph/strongly-connected-components/stronglyConnectedComponents.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = -925;",
                "\t\tconst graph = [arrayElement, arrayElement1]",
                "\t\tconst stronglyConnectedComponentsReturnValue = await stronglyConnectedComponents(graph)",
                "\t\tconst arrayElement2 = {}",
                "\t\tconst stronglyConnectedComponentsReturnValue1 = await stronglyConnectedComponents(arrayElement2)",
                "\t\tconst getAllVertices = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getAllVertices\": getAllVertices",
                "\t\t}",
                "\t\tconst stronglyConnectedComponentsReturnValue2 = await stronglyConnectedComponents(graph1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import stronglyConnectedComponents from \"../instrumented/javascript-algorithms/src/algorithms/graph/strongly-connected-components/stronglyConnectedComponents.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst graph = null;",
                "\t\tconst stronglyConnectedComponentsReturnValue = await stronglyConnectedComponents(graph)",
                "\t\tconst graph1 = -611;",
                "\t\tconst stronglyConnectedComponentsReturnValue1 = await stronglyConnectedComponents(graph1)",
                "\t\tconst assignment = null;",
                "\t\tconst anon = \"K.oNL\\\"mf3b{QW;-YTJrj\\nXrNj4&497d]f1N\\\"l9/pGJkt~H?SE5M@>RKc]\\tj+^Zh`$b_\";",
                "\t\tconst graph2 = new Graph(assignment, anon)",
                "\t\tconst stronglyConnectedComponentsReturnValue2 = await stronglyConnectedComponents(graph2)",
                "\t\tconst assignment1 = null;",
                "\t\tconst anon1 = \"K.oNL\\\"mf3b{QW;-YTJrj\\nXrNj4&497d]f1N\\\"l9/pGJkt~H?SE5M@>RKc]\\tj+^Zh`$b_\";",
                "\t\tconst graph3 = new Graph(assignment1, anon1)",
                "\t\tconst getWeightReturnValue = await graph3.getWeight()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import stronglyConnectedComponents from \"../instrumented/javascript-algorithms/src/algorithms/graph/strongly-connected-components/stronglyConnectedComponents.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst graph = undefined;",
                "\t\tconst stronglyConnectedComponentsReturnValue = await stronglyConnectedComponents(graph)",
                "\t\tconst getAllVertices = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getAllVertices\": getAllVertices",
                "\t\t}",
                "\t\tconst anon = \"../../math/pascal-triangle/pascalTriangle\";",
                "\t\tconst stronglyConnectedComponentsReturnValue1 = await stronglyConnectedComponents(graph1, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import Queue from \"../instrumented/javascript-algorithms/src/data-structures/queue/Queue.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = 0.75;",
                "\t\tconst weightLimit = new Queue()",
                "\t\tconst anon = false;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack.sortPossibleItemsByValuePerWeightRatio()",
                "\t\tconst possibleItems1 = 0.75;",
                "\t\tconst weightLimit1 = new Queue()",
                "\t\tconst anon1 = false;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst sortPossibleItemsByWeightReturnValue = await knapsack1.sortPossibleItemsByWeight()",
                "\t\tconst possibleItems2 = 0.75;",
                "\t\tconst weightLimit2 = new Queue()",
                "\t\tconst anon2 = false;",
                "\t\tconst knapsack2 = new Knapsack(possibleItems2, weightLimit2, anon2)",
                "\t\tconst arrayElement = undefined;",
                "\t\tconst possibleItems3 = 0.75;",
                "\t\tconst arrayElement1 = \"1111111111101111111111111111111111111111111111111111111111111111\";",
                "\t\tconst arrayElement2 = null;",
                "\t\tconst anon3 = [arrayElement, possibleItems3, arrayElement1, arrayElement2]",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack2.solveZeroOneKnapsackProblem(anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst originalCallbacks = \"dn\\t:]/|AwKBi+_)'Fv\\tw~c]~7Oc[QfGho N)ag_8ba,\\\\uwj_zc[yy;cY=DPhno7Y6|#\";",
                "\t\tconst anon = 9;",
                "\t\tconst possibleItems = new Sort(originalCallbacks, anon)",
                "\t\tconst weightLimit = true;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst anon1 = true;",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack.solveUnboundedKnapsackProblem(anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = \"00111110100110011001100110011010\";",
                "\t\tconst arrayElement1 = \",MA7cod#_BB*\\n@E>a8Y&F\\nrV\\\\c2gu'WWbu@(YWYq>\";",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst possibleItems = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst originalCallbacks = 97;",
                "\t\tconst weightLimit = new Sort(originalCallbacks)",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst originalCallbacks = -243.1725434048834;",
                "\t\tconst anon = {}",
                "\t\tconst objectPattern = new Sort(originalCallbacks, anon)",
                "\t\tconst anon1 = null;",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern, anon1)",
                "\t\tconst totalWeightReturnValue = await knapsackItem.totalWeight",
                "\t\tconst originalCallbacks1 = -243.1725434048834;",
                "\t\tconst anon2 = {}",
                "\t\tconst objectPattern1 = new Sort(originalCallbacks1, anon2)",
                "\t\tconst anon3 = null;",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern1, anon3)",
                "\t\tconst localToStringReturnValue = await knapsackItem1.toString()",
                "\t\tconst originalCallbacks2 = -243.1725434048834;",
                "\t\tconst anon4 = {}",
                "\t\tconst objectPattern2 = new Sort(originalCallbacks2, anon4)",
                "\t\tconst anon5 = null;",
                "\t\tconst knapsackItem2 = new KnapsackItem(objectPattern2, anon5)",
                "\t\tconst localToStringReturnValue1 = await knapsackItem2.toString()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst objectPattern = new RadixSort()",
                "\t\tconst anon = 23;",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern, anon)",
                "\t\tconst objectPattern1 = new RadixSort()",
                "\t\tconst array = -739;",
                "\t\tconst determineNumPassesReturnValue = await objectPattern1.determineNumPasses(array)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst originalCallbacks = \"The method supports only positive integers\";",
                "\t\tconst objectPattern = new Sort(originalCallbacks)",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern)",
                "\t\tconst totalWeightReturnValue = await knapsackItem.totalWeight",
                "\t\tconst originalCallbacks1 = \"The method supports only positive integers\";",
                "\t\tconst objectPattern1 = new Sort(originalCallbacks1)",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern1)",
                "\t\tconst localToStringReturnValue = await knapsackItem1.toString()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst originalCallbacks = \"The method supports only psitive integers\";",
                "\t\tconst objectPattern = new Sort(originalCallbacks)",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern)",
                "\t\tconst totalValueReturnValue = await knapsackItem.totalValue",
                "\t\tconst objectPattern1 = {}",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern1)",
                "\t\tconst anon = null;",
                "\t\tconst localToStringReturnValue = await knapsackItem1.toString(anon)",
                "\t\tconst objectPattern2 = {}",
                "\t\tconst knapsackItem2 = new KnapsackItem(objectPattern2)",
                "\t\tconst anon1 = \"../../../data-structures/graph/GraphVertex\";",
                "\t\tconst localToStringReturnValue1 = await knapsackItem2.toString(anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst originalCallbacks = \"The methid supports only positive integers\";",
                "\t\tconst objectPattern = new Sort(originalCallbacks)",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern)",
                "\t\tconst valuePerWeightRatioReturnValue = await knapsackItem.valuePerWeightRatio",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {updateCellAtIndex} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {validateSameShape} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localLength = 0.3;",
                "\t\tconst a = {",
                "\t\t\t\"length\": localLength",
                "\t\t}",
                "\t\tconst arrayElement = -129.03162575866088;",
                "\t\tconst b = [arrayElement]",
                "\t\tconst validateSameShapeReturnValue = await validateSameShape(a, b)",
                "\t\tconst m = undefined;",
                "\t\tconst localLength1 = 0.3;",
                "\t\tconst a1 = {",
                "\t\t\t\"length\": localLength1",
                "\t\t}",
                "\t\tconst cellValue = 180;",
                "\t\tconst updateCellAtIndexReturnValue = await updateCellAtIndex(m, a1, cellValue)",
                "\t\tconst m1 = undefined;",
                "\t\tconst arrayElement1 = 341.47643498922866;",
                "\t\tconst arrayElement2 = {}",
                "\t\tconst arrayElement3 = {}",
                "\t\tconst arrayElement4 = 7;",
                "\t\tconst cellIndices = [arrayElement1, arrayElement2, arrayElement3, arrayElement4]",
                "\t\tconst cellValue1 = 10344;",
                "\t\tconst anon = () => {};",
                "\t\tconst anon1 = () => {};",
                "\t\tconst updateCellAtIndexReturnValue1 = await updateCellAtIndex(m1, cellIndices, cellValue1, anon, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {t} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = []",
                "\t\tconst m = \"b6=z emZ\\t/+R2Y;Z.'Gr(lcaw{!)$X\\\\`9;ni§'ZE#\";",
                "\t\tconst anon = \"0011001001100110\";",
                "\t\tconst m1 = [arrayElement, m, anon]",
                "\t\tconst arrayElement1 = false;",
                "\t\tconst arrayElement2 = -480;",
                "\t\tconst m2 = [m1, arrayElement1, arrayElement2]",
                "\t\tconst tReturnValue = await t(m2)",
                "\t\tconst anon1 = {}",
                "\t\tconst arrayElement3 = -480;",
                "\t\tconst tReturnValue1 = await t(anon1, arrayElement3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import CountingSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst countingSort = new CountingSort()",
                "\t\tconst originalArray = true;",
                "\t\tconst assignment = 6;",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst anon = () => {};",
                "\t\tconst originalCallbacks = \"J±%Ba\\\"(I=|_eVFJt§uK,1m\";",
                "\t\tconst anon1 = 26;",
                "\t\tconst anon2 = new Sort(originalCallbacks, anon1)",
                "\t\tconst sortReturnValue = await countingSort.sort(originalArray, assignment, assignment1, anon, anon2)",
                "\t\tconst countingSort1 = new CountingSort()",
                "\t\tconst arrayElement = null;",
                "\t\tconst arrayElement1 = () => {};",
                "\t\tconst originalArray1 = [arrayElement, arrayElement1]",
                "\t\tconst assignment2 = {}",
                "\t\tconst assignment3 = undefined;",
                "\t\tconst originalCallbacks1 = \"J±%Ba\\\"(I=|_eVFJt§uK,1m\";",
                "\t\tconst anon3 = () => {};",
                "\t\tconst sortReturnValue1 = await countingSort1.sort(originalArray1, assignment2, assignment3, originalCallbacks1, anon3)",
                "\t\tconst countingSort2 = new CountingSort()",
                "\t\tconst countingSort3 = new CountingSort()",
                "\t\tconst assignment4 = {}",
                "\t\tconst assignment5 = 134.99999;",
                "\t\tconst assignment6 = undefined;",
                "\t\tconst sortReturnValue2 = await countingSort3.sort(assignment4, assignment5, assignment6)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import RedBlackTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst redBlackTree = new RedBlackTree()",
                "\t\tconst localParent = false;",
                "\t\tconst localParent1 = {",
                "\t\t\t\"parent\": localParent",
                "\t\t}",
                "\t\tconst uncle = true;",
                "\t\tconst node = {",
                "\t\t\t\"parent\": localParent1,",
                "\t\t\t\"uncle\": uncle",
                "\t\t}",
                "\t\tconst anon = () => {};",
                "\t\tconst balanceReturnValue = await redBlackTree.balance(node, anon)",
                "\t\tconst redBlackTree1 = new RedBlackTree()",
                "\t\tconst localParent2 = false;",
                "\t\tconst localParent3 = {",
                "\t\t\t\"parent\": localParent2",
                "\t\t}",
                "\t\tconst leftRightRotationReturnValue = await redBlackTree1.leftRightRotation(localParent3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BinaryTreeNode from \"../instrumented/javascript-algorithms/src/data-structures/tree/BinaryTreeNode.js\";",
                "import RedBlackTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst redBlackTree = new RedBlackTree()",
                "\t\tconst assignment = null;",
                "\t\tconst node = new BinaryTreeNode(assignment)",
                "\t\tconst balanceReturnValue = await redBlackTree.balance(node)",
                "\t\tconst redBlackTree1 = new RedBlackTree()",
                "\t\tconst localSet = () => {};",
                "\t\tconst meta = {",
                "\t\t\t\"set\": localSet",
                "\t\t}",
                "\t\tconst node1 = {",
                "\t\t\t\"meta\": meta",
                "\t\t}",
                "\t\tconst anon = false;",
                "\t\tconst makeNodeBlackReturnValue = await redBlackTree1.makeNodeBlack(node1, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import RedBlackTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst redBlackTree = new RedBlackTree()",
                "\t\tconst node = undefined;",
                "\t\tconst originalCallbacks = \"o)Jsn+AX%=i*(tH%D)\";",
                "\t\tconst anon = 3;",
                "\t\tconst anon1 = new Sort(originalCallbacks, anon)",
                "\t\tconst balanceReturnValue = await redBlackTree.balance(node, anon1)",
                "\t\tconst originalCallbacks1 = \"o)Jsn+AX%=i*(tH%D)\";",
                "\t\tconst anon2 = 3;",
                "\t\tconst anon3 = new Sort(originalCallbacks1, anon2)",
                "\t\tconst originalCallbacks2 = undefined;",
                "\t\tconst initSortingCallbacksReturnValue = await anon3.initSortingCallbacks(originalCallbacks2)",
                "\t\tconst originalCallbacks3 = \"o)Jsn+AX%=i*(tH%D)\";",
                "\t\tconst anon4 = 3;",
                "\t\tconst anon5 = new Sort(originalCallbacks3, anon4)",
                "\t\tconst originalCallbacks4 = () => {};",
                "\t\tconst anon6 = () => {};",
                "\t\tconst initSortingCallbacksReturnValue1 = await anon5.initSortingCallbacks(originalCallbacks4, anon6)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import RedBlackTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst redBlackTree = new RedBlackTree()",
                "\t\tconst node = () => {};",
                "\t\tconst anon = {}",
                "\t\tconst balanceReturnValue = await redBlackTree.balance(node, anon)",
                "\t\tconst redBlackTree1 = new RedBlackTree()",
                "\t\tconst arrayElement = false;",
                "\t\tconst value = [arrayElement]",
                "\t\tconst anon1 = {}",
                "\t\tconst anon2 = [anon1]",
                "\t\tconst insertReturnValue = await redBlackTree1.insert(value, anon2)",
                "\t\tconst redBlackTree2 = new RedBlackTree()",
                "\t\tconst anon3 = {}",
                "\t\tconst rightRightRotationReturnValue = await redBlackTree2.rightRightRotation(anon3)",
                "\t\tconst redBlackTree3 = new RedBlackTree()",
                "\t\tconst anon4 = {}",
                "\t\tconst leftRightRotationReturnValue = await redBlackTree3.leftRightRotation(anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import PolynomialHash from \"../instrumented/javascript-algorithms/src/algorithms/cryptography/polynomial-hash/PolynomialHash.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = undefined;",
                "\t\tconst anon = new PolynomialHash(assignment)",
                "\t\tconst prevHash = \"Item not found in the tree\";",
                "\t\tconst localLength = 0.75;",
                "\t\tconst prevWord = {",
                "\t\t\t\"length\": localLength",
                "\t\t}",
                "\t\tconst localLength1 = 912.2663825918139;",
                "\t\tconst newWord = {",
                "\t\t\t\"length\": localLength1",
                "\t\t}",
                "\t\tconst rollReturnValue = await anon.roll(prevHash, prevWord, newWord)",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst anon1 = new PolynomialHash(assignment1)",
                "\t\tconst prevHash1 = 156;",
                "\t\tconst prevWord1 = () => {};",
                "\t\tconst newWord1 = \":5w&DM4?pKP\";",
                "\t\tconst rollReturnValue1 = await anon1.roll(prevHash1, prevWord1, newWord1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst startVertex = null;",
                "\t\tconst assignment1 = false;",
                "\t\tconst assignment2 = undefined;",
                "\t\tconst originalCallbacks = \"1111101111111111\";",
                "\t\tconst anon = new Sort(originalCallbacks)",
                "\t\tconst anon1 = undefined;",
                "\t\tconst newVertex = new GraphEdge(startVertex, assignment1, assignment2, anon, anon1)",
                "\t\tconst anon2 = \"BO±{mvZBQ1\\n(]<A+yCT;OZY\";",
                "\t\tconst addVertexReturnValue = await graph.addVertex(newVertex, anon2)",
                "\t\tconst startVertex1 = null;",
                "\t\tconst assignment3 = false;",
                "\t\tconst assignment4 = undefined;",
                "\t\tconst originalCallbacks1 = \"1111101111111111\";",
                "\t\tconst anon3 = new Sort(originalCallbacks1)",
                "\t\tconst anon4 = undefined;",
                "\t\tconst newVertex1 = new GraphEdge(startVertex1, assignment3, assignment4, anon3, anon4)",
                "\t\tconst anon5 = null;",
                "\t\tconst getKeyReturnValue = await newVertex1.getKey(anon5)",
                "\t\tconst originalCallbacks2 = \"1111101111111111\";",
                "\t\tconst anon6 = new Sort(originalCallbacks2)",
                "\t\tconst sortReturnValue = await anon6.sort()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Trie from \"../instrumented/javascript-algorithms/src/data-structures/trie/Trie.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = \"0011001001100110\";",
                "\t\tconst arrayElement = new Trie(anon)",
                "\t\tconst word = undefined;",
                "\t\tconst anon1 = undefined;",
                "\t\tconst addWordReturnValue = await arrayElement.addWord(word, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst originalCallbacks = \"The method suports only positive integers\";",
                "\t\tconst objectPattern = new Sort(originalCallbacks)",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern)",
                "\t\tconst localToStringReturnValue = await knapsackItem.toString()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import PolynomialHash from \"../instrumented/javascript-algorithms/src/algorithms/cryptography/polynomial-hash/PolynomialHash.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = undefined;",
                "\t\tconst anon = 32;",
                "\t\tconst anon1 = {}",
                "\t\tconst objectPattern = new PolynomialHash(assignment, anon, anon1)",
                "\t\tconst prevHash = 214.16961175295955;",
                "\t\tconst prevWord = \".&)uIlkgO±Bm72j`v8*PmZ8/ `DB;\";",
                "\t\tconst arrayElement = \"Matrices have different dimensions\";",
                "\t\tconst arrayElement1 = false;",
                "\t\tconst newWord = [arrayElement, arrayElement1]",
                "\t\tconst rollReturnValue = await objectPattern.roll(prevHash, prevWord, newWord)",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst anon2 = 32;",
                "\t\tconst anon3 = {}",
                "\t\tconst objectPattern1 = new PolynomialHash(assignment1, anon2, anon3)",
                "\t\tconst prevHash1 = \"Invalid matrix format\";",
                "\t\tconst prevWord1 = \".&)uIlkgO±Bm72j`v8*PmZ8/ `DB;\";",
                "\t\tconst anon4 = {}",
                "\t\tconst assignment2 = undefined;",
                "\t\tconst rollReturnValue1 = await objectPattern1.roll(prevHash1, prevWord1, anon4, assignment2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash5": {
        "crashProject": "javascript-algorithms",
        "trace": "    at GraphEdge.getKey (javascript-algorithms/src/data-structures/graph/GraphEdge.js:17:45)\n    at Graph._context [as deleteEdge] (javascript-algorithms/src/data-structures/graph/Graph.js:97:25)\n    at _callee$ (.syntest/tests/tempTest.spec.js:18:38)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.Promise [as next] (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:1:1)\n",
        "errors": [
            "TypeError: this.startVertex.getKey is not a function",
            "TypeError: Cannot read properties of null (reading 'getKey')",
            "TypeError: Cannot read properties of undefined (reading 'getNeighbors')",
            "TypeError: this.endVertex.getKey is not a function",
            "TypeError: callbacks.enterVertex is not a function",
            "TypeError: graph.getNeighbors is not a function",
            "TypeError: Cannot read properties of undefined (reading 'forEach')",
            "RangeError: Invalid array length",
            "TypeError: array.reduce is not a function",
            "TypeError: Cannot read properties of undefined (reading 'getKey')",
            "TypeError: this.keyCallback is not a function",
            "TypeError: Cannot read properties of undefined (reading 'codePointAt')",
            "TypeError: Cannot create property 'compareCallback' on string '1111101111111111'",
            "TypeError: graph.getAllVertices is not a function",
            "TypeError: undefined is not iterable (cannot read property Symbol(Symbol.iterator))",
            "TypeError: Cannot read properties of null (reading 'length')",
            "TypeError: originalArray.slice is not a function",
            "TypeError: Cannot read properties of undefined (reading 'length')",
            "TypeError: Cannot create property 'compareCallback' on string 'The method supports only positive inWegers'",
            "TypeError: Cannot create property 'compareCallback' on string 'The method suports only positive integers'",
            "TypeError: Cannot create property 'compareCallback' on string 'The method sup/orts only positive integers'",
            "TypeError: Cannot create property 'compareCallback' on string 'The method supports only positive integers'",
            "TypeError: _char2.codePointAt is not a function",
            "TypeError: Cannot create property 'compareCallback' on string 'The metho supports only positive integers'",
            "TypeError: Cannot create property 'compareCallback' on number '-243.1725434048834'",
            "TypeError: Cannot create property 'compareCallback' on string 'The method supports onlypositive integers'",
            "TypeError: Cannot create property 'compareCallback' on string 'The method supports only ositive integers'",
            "TypeError: Cannot create property 'compareCallback' on string './BinarySearchTreeNode'",
            "Error: Invalid matrix format",
            "TypeError: Cannot read properties of undefined (reading 'get')",
            "TypeError: Cannot read properties of null (reading 'meta')",
            "TypeError: Cannot read properties of undefined (reading 'meta')",
            "TypeError: Cannot read properties of null (reading 'getNeighbors')",
            "TypeError: Cannot create property 'compareCallback' on boolean 'true'"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import bellmanFord from \"../instrumented/javascript-algorithms/src/algorithms/graph/bellman-ford/bellmanFord.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst getKey = () => {};",
                "\t\tconst startVertex = {",
                "\t\t\t\"getKey\": getKey",
                "\t\t}",
                "\t\tconst bellmanFordReturnValue = await bellmanFord(graph, startVertex)",
                "\t\tconst assignment1 = false;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst getKey1 = () => {};",
                "\t\tconst endVertex = null;",
                "\t\tconst assignment2 = 19;",
                "\t\tconst edge = new GraphEdge(getKey1, endVertex, assignment2)",
                "\t\tconst deleteEdgeReturnValue = await graph1.deleteEdge(edge)",
                "\t\tconst assignment3 = false;",
                "\t\tconst graph2 = new Graph(assignment3)",
                "\t\tconst getKey2 = () => {};",
                "\t\tconst startVertex1 = {",
                "\t\t\t\"getKey\": getKey2",
                "\t\t}",
                "\t\tconst addEdgeReturnValue = await graph2.addEdge(startVertex1)",
                "\t\tconst assignment4 = false;",
                "\t\tconst graph3 = new Graph(assignment4)",
                "\t\tconst vertexKey = 1.7976931348623157e+308;",
                "\t\tconst getVertexByKeyReturnValue = await graph3.getVertexByKey(vertexKey)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import bellmanFord from \"../instrumented/javascript-algorithms/src/algorithms/graph/bellman-ford/bellmanFord.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = undefined;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst getKey = () => {};",
                "\t\tconst startVertex = {",
                "\t\t\t\"getKey\": getKey",
                "\t\t}",
                "\t\tconst bellmanFordReturnValue = await bellmanFord(graph, startVertex)",
                "\t\tconst startVertex1 = null;",
                "\t\tconst endVertex = []",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst startVertex2 = new GraphEdge(startVertex1, endVertex, assignment1)",
                "\t\tconst anon = {}",
                "\t\tconst localToStringReturnValue = await startVertex2.toString(anon)",
                "\t\tconst startVertex3 = null;",
                "\t\tconst endVertex1 = []",
                "\t\tconst assignment2 = undefined;",
                "\t\tconst startVertex4 = new GraphEdge(startVertex3, endVertex1, assignment2)",
                "\t\tconst reverseReturnValue = await startVertex4.reverse()",
                "\t\tconst startVertex5 = null;",
                "\t\tconst endVertex2 = []",
                "\t\tconst assignment3 = undefined;",
                "\t\tconst startVertex6 = new GraphEdge(startVertex5, endVertex2, assignment3)",
                "\t\tconst reverseReturnValue1 = await startVertex6.reverse()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import bellmanFord from \"../instrumented/javascript-algorithms/src/algorithms/graph/bellman-ford/bellmanFord.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst getKey = () => {};",
                "\t\tconst startVertex = {",
                "\t\t\t\"getKey\": getKey",
                "\t\t}",
                "\t\tconst anon = 193;",
                "\t\tconst bellmanFordReturnValue = await bellmanFord(graph, startVertex, anon)",
                "\t\tconst assignment1 = true;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst assignment2 = true;",
                "\t\tconst graph2 = new Graph(assignment2)",
                "\t\tconst getNeighborsReturnValue = await graph1.getNeighbors(graph2)",
                "\t\tconst assignment3 = true;",
                "\t\tconst graph3 = new Graph(assignment3)",
                "\t\tconst vertexKey = \"00110110100110010000001000011010\";",
                "\t\tconst getVertexByKeyReturnValue = await graph3.getVertexByKey(vertexKey)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import bellmanFord from \"../instrumented/javascript-algorithms/src/algorithms/graph/bellman-ford/bellmanFord.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst anon = null;",
                "\t\tconst graph = new Graph(assignment, anon)",
                "\t\tconst getKey = () => {};",
                "\t\tconst startVertex = {",
                "\t\t\t\"getKey\": getKey",
                "\t\t}",
                "\t\tconst bellmanFordReturnValue = await bellmanFord(graph, startVertex)",
                "\t\tconst assignment1 = true;",
                "\t\tconst anon1 = null;",
                "\t\tconst graph1 = new Graph(assignment1, anon1)",
                "\t\tconst anon2 = 26;",
                "\t\tconst arrayElement = 32;",
                "\t\tconst anon3 = [anon2, arrayElement]",
                "\t\tconst getKey1 = () => {};",
                "\t\tconst getVerticesIndicesReturnValue = await graph1.getVerticesIndices(anon3, getKey1)",
                "\t\tconst assignment2 = true;",
                "\t\tconst anon4 = null;",
                "\t\tconst graph2 = new Graph(assignment2, anon4)",
                "\t\tconst getVerticesIndicesReturnValue1 = await graph2.getVerticesIndices()",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst arrayElement2 = 32;",
                "\t\tconst anon5 = [arrayElement1, arrayElement2]",
                "\t\tconst getKey2 = () => {};",
                "\t\tconst startVertex1 = {",
                "\t\t\t\"getKey\": getKey2",
                "\t\t}",
                "\t\tconst endVertex = \"Prim's algorithms works only for undirected graphs\";",
                "\t\tconst assignment3 = undefined;",
                "\t\tconst arrayElement3 = null;",
                "\t\tconst startVertex2 = new GraphEdge(startVertex1, endVertex, assignment3, arrayElement3)",
                "\t\tconst bellmanFordReturnValue1 = await bellmanFord(anon5, startVertex2)",
                "\t\tconst assignment4 = true;",
                "\t\tconst anon6 = null;",
                "\t\tconst graph3 = new Graph(assignment4, anon6)",
                "\t\tconst getAllEdgesReturnValue = await graph3.getAllEdges()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst value = true;",
                "\t\tconst graph = new GraphVertex(value)",
                "\t\tconst startVertex = 15;",
                "\t\tconst originalCallbacks = {}",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\tconst value1 = true;",
                "\t\tconst graph1 = new GraphVertex(value1)",
                "\t\tconst vertex = null;",
                "\t\tconst findEdgeReturnValue = await graph1.findEdge(vertex)",
                "\t\tconst originalCallbacks1 = {}",
                "\t\tconst startVertex1 = -677;",
                "\t\tconst allowTraversal = true;",
                "\t\tconst enterVertex = true;",
                "\t\tconst leaveVertex = false;",
                "\t\tconst originalCallbacks2 = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(originalCallbacks1, startVertex1, originalCallbacks2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst value = () => {};",
                "\t\tconst graph = new GraphVertex(value)",
                "\t\tconst startVertex = {}",
                "\t\tconst originalCallbacks = undefined;",
                "\t\tconst anon = \"'I/q~>:lxbJy@9a9b[9FL*1 om9\\n!±efm>!~[*lpR\\\"\\\"0|qgG'v\\t=8K5};W,oHtK~wq'oYCG\";",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks, anon)",
                "\t\tconst startVertex1 = {}",
                "\t\tconst startVertex2 = 780;",
                "\t\tconst localReturn = true;",
                "\t\tconst allowTraversal = (ObjectPattern) => { return localReturn };",
                "\t\tconst enterVertex = false;",
                "\t\tconst leaveVertex = true;",
                "\t\tconst originalCallbacks1 = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(startVertex1, startVertex2, originalCallbacks1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst value = true;",
                "\t\tconst anon = null;",
                "\t\tconst graph = new GraphVertex(value, anon)",
                "\t\tconst startVertex = 369.94721060533925;",
                "\t\tconst allowTraversal = true;",
                "\t\tconst enterVertex = false;",
                "\t\tconst leaveVertex = false;",
                "\t\tconst originalCallbacks = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex1 = \":) \";",
                "\t\tconst originalCallbacks1 = {}",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(graph1, startVertex1, originalCallbacks1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import DoublyLinkedListNode from \"../instrumented/javascript-algorithms/src/data-structures/doubly-linked-list/DoublyLinkedListNode.js\";",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import SegmentTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst value = false;",
                "\t\tconst graph = new GraphVertex(value)",
                "\t\tconst arrayElement = undefined;",
                "\t\tconst value1 = {}",
                "\t\tconst assignment = undefined;",
                "\t\tconst assignment1 = \"ggq&Nglij5QvIy7y{JT2K§E)-|\\\\Itx{aAnh%W$;2<N{§byGp(GBhF%#gT(Ikc1DJL$^!3§=\";",
                "\t\tconst arrayElement1 = new DoublyLinkedListNode(value1, assignment, assignment1)",
                "\t\tconst arrayElement2 = () => {};",
                "\t\tconst startVertex = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst originalCallbacks = () => {};",
                "\t\tconst anon = \"+R\\\\;ID,TsCKyZ=F±:=VKm26kzqALyXIIF7;; \\nFQ#,±%\";",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks, anon)",
                "\t\tconst value2 = false;",
                "\t\tconst graph1 = new GraphVertex(value2)",
                "\t\tconst inputArray = -817.6611080419775;",
                "\t\tconst operation = () => {};",
                "\t\tconst anon1 = \"+R\\\\;ID,TsCKyZ=F±:=VKm26kzqALyXIIF7;; \\nFQ#,±%\";",
                "\t\tconst arrayElement3 = 144;",
                "\t\tconst operationFallback = [anon1, arrayElement3]",
                "\t\tconst edge = new SegmentTree(inputArray, operation, operationFallback)",
                "\t\tconst deleteEdgeReturnValue = await graph1.deleteEdge(edge)",
                "\t\tconst value3 = false;",
                "\t\tconst graph2 = new GraphVertex(value3)",
                "\t\tconst getNeighborsReturnValue = await graph2.getNeighbors()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import MaxHeap from \"../instrumented/javascript-algorithms/src/data-structures/heap/MaxHeap.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst value = {}",
                "\t\tconst graph = new GraphVertex(value)",
                "\t\tconst startVertex = undefined;",
                "\t\tconst callbacks = new RadixSort()",
                "\t\tconst anon = -767.7727579874518;",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks, anon)",
                "\t\tconst callbacks1 = new RadixSort()",
                "\t\tconst array = new MaxHeap()",
                "\t\tconst arrayElement = \"0011111100000000\";",
                "\t\tconst arrayElement1 = \"../../math/euclidean-distance/euclideanDistance\";",
                "\t\tconst arrayElement2 = true;",
                "\t\tconst anon1 = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst determineNumPassesReturnValue = await callbacks1.determineNumPasses(array, anon1)",
                "\t\tconst value1 = {}",
                "\t\tconst graph1 = new GraphVertex(value1)",
                "\t\tconst edge = -918.3001490887492;",
                "\t\tconst deleteEdgeReturnValue = await graph1.deleteEdge(edge)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import detectDirectedCycle from \"../instrumented/javascript-algorithms/src/algorithms/graph/detect-cycle/detectDirectedCycle.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst anon = \"Matrices have different shapes\";",
                "\t\tconst detectDirectedCycleReturnValue = await detectDirectedCycle(graph, anon)",
                "\t\tconst assignment1 = false;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst startVertex = undefined;",
                "\t\tconst endVertex = {}",
                "\t\tconst assignment2 = undefined;",
                "\t\tconst newVertex = new GraphEdge(startVertex, endVertex, assignment2)",
                "\t\tconst anon1 = () => {};",
                "\t\tconst addVertexReturnValue = await graph1.addVertex(newVertex, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import DisjointSetItem from \"../instrumented/javascript-algorithms/src/data-structures/disjoint-set/DisjointSetItem.js\";",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import detectDirectedCycle from \"../instrumented/javascript-algorithms/src/algorithms/graph/detect-cycle/detectDirectedCycle.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst detectDirectedCycleReturnValue = await detectDirectedCycle(graph)",
                "\t\tconst assignment1 = false;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst assignment2 = false;",
                "\t\tconst keyCallback = 170;",
                "\t\tconst startVertex = new DisjointSetItem(assignment2, keyCallback)",
                "\t\tconst endVertex = 979.5036001640901;",
                "\t\tconst findEdgeReturnValue = await graph1.findEdge(startVertex, endVertex)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import PolynomialHash from \"../instrumented/javascript-algorithms/src/algorithms/cryptography/polynomial-hash/PolynomialHash.js\";",
                "import detectDirectedCycle from \"../instrumented/javascript-algorithms/src/algorithms/graph/detect-cycle/detectDirectedCycle.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst anon = new PolynomialHash(assignment1)",
                "\t\tconst detectDirectedCycleReturnValue = await detectDirectedCycle(graph, anon)",
                "\t\tconst assignment2 = undefined;",
                "\t\tconst anon1 = new PolynomialHash(assignment2)",
                "\t\tconst prevHash = \"Item not found in the tree\";",
                "\t\tconst localLength = 0.75;",
                "\t\tconst prevWord = {",
                "\t\t\t\"length\": localLength",
                "\t\t}",
                "\t\tconst localLength1 = 912.2663825918139;",
                "\t\tconst newWord = {",
                "\t\t\t\"length\": localLength1",
                "\t\t}",
                "\t\tconst rollReturnValue = await anon1.roll(prevHash, prevWord, newWord)",
                "\t\tconst assignment3 = undefined;",
                "\t\tconst anon2 = new PolynomialHash(assignment3)",
                "\t\tconst prevHash1 = 156;",
                "\t\tconst prevWord1 = () => {};",
                "\t\tconst newWord1 = \":5w&DM4?pKP\";",
                "\t\tconst rollReturnValue1 = await anon2.roll(prevHash1, prevWord1, newWord1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "import floydWarshall from \"../instrumented/javascript-algorithms/src/algorithms/graph/floyd-warshall/floydWarshall.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst floydWarshallReturnValue = await floydWarshall(graph)",
                "\t\tconst assignment1 = false;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst startVertex = null;",
                "\t\tconst assignment2 = false;",
                "\t\tconst assignment3 = undefined;",
                "\t\tconst originalCallbacks = \"1111101111111111\";",
                "\t\tconst anon = new Sort(originalCallbacks)",
                "\t\tconst anon1 = undefined;",
                "\t\tconst newVertex = new GraphEdge(startVertex, assignment2, assignment3, anon, anon1)",
                "\t\tconst anon2 = \"BO±{mvZBQ1\\n(]<A+yCT;OZY\";",
                "\t\tconst addVertexReturnValue = await graph1.addVertex(newVertex, anon2)",
                "\t\tconst startVertex1 = null;",
                "\t\tconst assignment4 = false;",
                "\t\tconst assignment5 = undefined;",
                "\t\tconst originalCallbacks1 = \"1111101111111111\";",
                "\t\tconst anon3 = new Sort(originalCallbacks1)",
                "\t\tconst anon4 = undefined;",
                "\t\tconst newVertex1 = new GraphEdge(startVertex1, assignment4, assignment5, anon3, anon4)",
                "\t\tconst anon5 = null;",
                "\t\tconst getKeyReturnValue = await newVertex1.getKey(anon5)",
                "\t\tconst originalCallbacks2 = \"1111101111111111\";",
                "\t\tconst anon6 = new Sort(originalCallbacks2)",
                "\t\tconst sortReturnValue = await anon6.sort()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import stronglyConnectedComponents from \"../instrumented/javascript-algorithms/src/algorithms/graph/strongly-connected-components/stronglyConnectedComponents.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst stronglyConnectedComponentsReturnValue = await stronglyConnectedComponents(graph)",
                "\t\tconst getAllVertices = {}",
                "\t\tconst graph1 = {",
                "\t\t\t\"getAllVertices\": getAllVertices",
                "\t\t}",
                "\t\tconst anon = {}",
                "\t\tconst stronglyConnectedComponentsReturnValue1 = await stronglyConnectedComponents(graph1, anon)",
                "\t\tconst assignment1 = true;",
                "\t\tconst graph2 = new Graph(assignment1)",
                "\t\tconst vertexKey = () => {};",
                "\t\tconst getVertexByKeyReturnValue = await graph2.getVertexByKey(vertexKey)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import Trie from \"../instrumented/javascript-algorithms/src/data-structures/trie/Trie.js\";",
                "import stronglyConnectedComponents from \"../instrumented/javascript-algorithms/src/algorithms/graph/strongly-connected-components/stronglyConnectedComponents.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst anon = true;",
                "\t\tconst graph = new Graph(assignment, anon)",
                "\t\tconst stronglyConnectedComponentsReturnValue = await stronglyConnectedComponents(graph)",
                "\t\tconst anon1 = \"0011001001100110\";",
                "\t\tconst arrayElement = new Trie(anon1)",
                "\t\tconst word = undefined;",
                "\t\tconst anon2 = undefined;",
                "\t\tconst addWordReturnValue = await arrayElement.addWord(word, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = null;",
                "\t\tconst weightLimit = {}",
                "\t\tconst anon = {}",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = null;",
                "\t\tconst weightLimit1 = {}",
                "\t\tconst anon1 = {}",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst sortPossibleItemsByWeightReturnValue = await knapsack1.sortPossibleItemsByWeight()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = false;",
                "\t\tconst weightLimit = -683;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst totalWeightReturnValue = await knapsack.totalWeight",
                "\t\tconst possibleItems1 = false;",
                "\t\tconst weightLimit1 = -683;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst sortPossibleItemsByValueReturnValue = await knapsack1.sortPossibleItemsByValue()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = undefined;",
                "\t\tconst weightLimit = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon = undefined;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = undefined;",
                "\t\tconst weightLimit1 = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst arrayElement = \"s,T#x±/x%tofen\\n$O:y/[]CDHU=:!hf(mDl#±6RHb;2/=AY0Q[o8^5eX{)1^>{ Tl0dLg{J\";",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, arrayElement)",
                "\t\tconst anon1 = null;",
                "\t\tconst anon2 = () => {};",
                "\t\tconst anon3 = new RadixSort(anon2)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio(anon1, anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst objectPattern = {}",
                "\t\tconst anon = null;",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern, anon)",
                "\t\tconst totalWeightReturnValue = await knapsackItem.totalWeight",
                "\t\tconst originalCallbacks = \"The method supports only positive inWegers\";",
                "\t\tconst objectPattern1 = new Sort(originalCallbacks)",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern1)",
                "\t\tconst localToStringReturnValue = await knapsackItem1.toString()",
                "\t\tconst objectPattern2 = {}",
                "\t\tconst anon1 = null;",
                "\t\tconst knapsackItem2 = new KnapsackItem(objectPattern2, anon1)",
                "\t\tconst localToStringReturnValue1 = await knapsackItem2.toString()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst objectPattern = {}",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern)",
                "\t\tconst totalWeightReturnValue = await knapsackItem.totalWeight",
                "\t\tconst originalCallbacks = \"The method suports only positive integers\";",
                "\t\tconst objectPattern1 = new Sort(originalCallbacks)",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern1)",
                "\t\tconst localToStringReturnValue = await knapsackItem1.toString()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst objectPattern = {}",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern)",
                "\t\tconst totalWeightReturnValue = await knapsackItem.totalWeight",
                "\t\tconst originalCallbacks = \"The method sup/orts only positive integers\";",
                "\t\tconst objectPattern1 = new Sort(originalCallbacks)",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern1)",
                "\t\tconst localToStringReturnValue = await knapsackItem1.toString()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import QuickSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSort.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst objectPattern = new QuickSort()",
                "\t\tconst anon = -278;",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern, anon)",
                "\t\tconst valuePerWeightRatioReturnValue = await knapsackItem.valuePerWeightRatio",
                "\t\tconst originalCallbacks = \"The method supports only positive integers\";",
                "\t\tconst objectPattern1 = new Sort(originalCallbacks)",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern1)",
                "\t\tconst anon1 = () => {};",
                "\t\tconst localToStringReturnValue = await knapsackItem1.toString(anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import PolynomialHash from \"../instrumented/javascript-algorithms/src/algorithms/cryptography/polynomial-hash/PolynomialHash.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = undefined;",
                "\t\tconst anon = 32;",
                "\t\tconst anon1 = {}",
                "\t\tconst objectPattern = new PolynomialHash(assignment, anon, anon1)",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern)",
                "\t\tconst totalWeightReturnValue = await knapsackItem.totalWeight",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst anon2 = 32;",
                "\t\tconst anon3 = {}",
                "\t\tconst objectPattern1 = new PolynomialHash(assignment1, anon2, anon3)",
                "\t\tconst prevHash = 214.16961175295955;",
                "\t\tconst prevWord = \".&)uIlkgO±Bm72j`v8*PmZ8/ `DB;\";",
                "\t\tconst arrayElement = \"Matrices have different dimensions\";",
                "\t\tconst arrayElement1 = false;",
                "\t\tconst newWord = [arrayElement, arrayElement1]",
                "\t\tconst rollReturnValue = await objectPattern1.roll(prevHash, prevWord, newWord)",
                "\t\tconst assignment2 = undefined;",
                "\t\tconst anon4 = 32;",
                "\t\tconst anon5 = {}",
                "\t\tconst objectPattern2 = new PolynomialHash(assignment2, anon4, anon5)",
                "\t\tconst prevHash1 = \"Invalid matrix format\";",
                "\t\tconst prevWord1 = \".&)uIlkgO±Bm72j`v8*PmZ8/ `DB;\";",
                "\t\tconst anon6 = {}",
                "\t\tconst assignment3 = undefined;",
                "\t\tconst rollReturnValue1 = await objectPattern2.roll(prevHash1, prevWord1, anon6, assignment3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst objectPattern = {}",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern)",
                "\t\tconst anon = \"LU^%0Nuk/A];\\\"A*\\nVaJe1tP(tDNh$~e\\\\#;?UZ`b.$@ZhCY;\";",
                "\t\tconst localToStringReturnValue = await knapsackItem.toString(anon)",
                "\t\tconst originalCallbacks = \"The metho supports only positive integers\";",
                "\t\tconst objectPattern1 = new Sort(originalCallbacks)",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern1)",
                "\t\tconst localToStringReturnValue1 = await knapsackItem1.toString()",
                "\t\tconst objectPattern2 = {}",
                "\t\tconst knapsackItem2 = new KnapsackItem(objectPattern2)",
                "\t\tconst localToStringReturnValue2 = await knapsackItem2.toString()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst objectPattern = {}",
                "\t\tconst arrayElement = 0.75;",
                "\t\tconst objectPattern1 = [arrayElement]",
                "\t\tconst anon = false;",
                "\t\tconst anon1 = () => {};",
                "\t\tconst anon2 = new KnapsackItem(objectPattern1, anon, anon1)",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern, anon2)",
                "\t\tconst totalValueReturnValue = await knapsackItem.totalValue",
                "\t\tconst originalCallbacks = -243.1725434048834;",
                "\t\tconst anon3 = {}",
                "\t\tconst objectPattern2 = new Sort(originalCallbacks, anon3)",
                "\t\tconst anon4 = null;",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern2, anon4)",
                "\t\tconst anon5 = -540;",
                "\t\tconst localToStringReturnValue = await knapsackItem1.toString(anon5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst objectPattern = 698;",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern)",
                "\t\tconst totalWeightReturnValue = await knapsackItem.totalWeight",
                "\t\tconst originalCallbacks = \"The method supports onlypositive integers\";",
                "\t\tconst objectPattern1 = new Sort(originalCallbacks)",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern1)",
                "\t\tconst localToStringReturnValue = await knapsackItem1.toString()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import DoublyLinkedList from \"../instrumented/javascript-algorithms/src/data-structures/doubly-linked-list/DoublyLinkedList.js\";",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst comparatorFunction = \"±L  liv\";",
                "\t\tconst objectPattern = new DoublyLinkedList(comparatorFunction)",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern)",
                "\t\tconst totalWeightReturnValue = await knapsackItem.totalWeight",
                "\t\tconst comparatorFunction1 = \"±L  liv\";",
                "\t\tconst objectPattern1 = new DoublyLinkedList(comparatorFunction1)",
                "\t\tconst value = null;",
                "\t\tconst comparatorFunction2 = \"±L  liv\";",
                "\t\tconst anon = 17;",
                "\t\tconst anon1 = 554.1153128575834;",
                "\t\tconst prependReturnValue = await objectPattern1.prepend(value, comparatorFunction2, anon, anon1)",
                "\t\tconst comparatorFunction3 = \"±L  liv\";",
                "\t\tconst objectPattern2 = new DoublyLinkedList(comparatorFunction3)",
                "\t\tconst assignment = false;",
                "\t\tconst value1 = new Graph(assignment)",
                "\t\tconst anon2 = false;",
                "\t\tconst anon3 = () => {};",
                "\t\tconst prependReturnValue1 = await objectPattern2.prepend(value1, anon2, anon3)",
                "\t\tconst originalCallbacks = \"The method supports only ositive integers\";",
                "\t\tconst objectPattern3 = new Sort(originalCallbacks)",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern3)",
                "\t\tconst valuePerWeightRatioReturnValue = await knapsackItem1.valuePerWeightRatio",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "import {SortTester} from \"../instrumented/javascript-algorithms/src/algorithms/sorting/SortTester.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst objectPattern = {}",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern)",
                "\t\tconst totalWeightReturnValue = await knapsackItem.totalWeight",
                "\t\tconst objectPattern1 = new SortTester()",
                "\t\tconst originalCallbacks = \"./BinarySearchTreeNode\";",
                "\t\tconst anon = 9;",
                "\t\tconst anon1 = false;",
                "\t\tconst sortingClass = new Sort(originalCallbacks, anon, anon1)",
                "\t\tconst testSortWithCustomComparatorReturnValue = await objectPattern1.testSortWithCustomComparator(sortingClass)",
                "\t\tconst objectPattern2 = new SortTester()",
                "\t\tconst sortingClass1 = undefined;",
                "\t\tconst anon2 = null;",
                "\t\tconst testSortWithCustomComparatorReturnValue1 = await objectPattern2.testSortWithCustomComparator(sortingClass1, anon2)",
                "\t\tconst arrayElement = undefined;",
                "\t\tconst arrayElement1 = false;",
                "\t\tconst arrayElement2 = true;",
                "\t\tconst originalCallbacks1 = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst sortingClass2 = new Sort(originalCallbacks1)",
                "\t\tconst sortReturnValue = await sortingClass2.sort()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {generate} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {validateSameShape} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {zeros} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = -822;",
                "\t\tconst arrayElement2 = 307.888150243552;",
                "\t\tconst mShape = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst zerosReturnValue = await zeros(mShape)",
                "\t\tconst arrayElement3 = -17.151100217355747;",
                "\t\tconst arrayElement4 = -822;",
                "\t\tconst mShape1 = [arrayElement3, arrayElement4]",
                "\t\tconst fill = () => {};",
                "\t\tconst generateReturnValue = await generate(mShape1, fill)",
                "\t\tconst localLength = -403;",
                "\t\tconst a = {",
                "\t\t\t\"length\": localLength",
                "\t\t}",
                "\t\tconst localLength1 = -653;",
                "\t\tconst b = {",
                "\t\t\t\"length\": localLength1",
                "\t\t}",
                "\t\tconst anon = \"7y'%#,4=JN/Oz:KOhqenQ?§Rb}[S$PnA 8H~}fM)S~SA§8E87uWBE3§v2?gF *~6[oO*ErNX\";",
                "\t\tconst validateSameShapeReturnValue = await validateSameShape(a, b, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import HashTable from \"../instrumented/javascript-algorithms/src/data-structures/hash-table/HashTable.js\";",
                "import RedBlackTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst redBlackTree = new RedBlackTree()",
                "\t\tconst assignment = undefined;",
                "\t\tconst meta = new HashTable(assignment)",
                "\t\tconst node = {",
                "\t\t\t\"meta\": meta",
                "\t\t}",
                "\t\tconst isNodeBlackReturnValue = await redBlackTree.isNodeBlack(node)",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst meta1 = new HashTable(assignment1)",
                "\t\tconst key = \"0011110000000000\";",
                "\t\tconst value = () => {};",
                "\t\tconst localSetReturnValue = await meta1.set(key, value)",
                "\t\tconst redBlackTree1 = new RedBlackTree()",
                "\t\tconst value1 = () => {};",
                "\t\tconst isNodeColoredReturnValue = await redBlackTree1.isNodeColored(value1)",
                "\t\tconst redBlackTree2 = new RedBlackTree()",
                "\t\tconst assignment2 = undefined;",
                "\t\tconst meta2 = new HashTable(assignment2)",
                "\t\tconst node1 = {",
                "\t\t\t\"meta\": meta2",
                "\t\t}",
                "\t\tconst makeNodeRedReturnValue = await redBlackTree2.makeNodeRed(node1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BinaryTreeNode from \"../instrumented/javascript-algorithms/src/data-structures/tree/BinaryTreeNode.js\";",
                "import RedBlackTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst redBlackTree = new RedBlackTree()",
                "\t\tconst value = undefined;",
                "\t\tconst insertReturnValue = await redBlackTree.insert(value)",
                "\t\tconst redBlackTree1 = new RedBlackTree()",
                "\t\tconst assignment = null;",
                "\t\tconst anon = 1;",
                "\t\tconst node = new BinaryTreeNode(assignment, anon)",
                "\t\tconst anon1 = 396.8308760883983;",
                "\t\tconst balanceReturnValue = await redBlackTree1.balance(node, anon1)",
                "\t\tconst redBlackTree2 = new RedBlackTree()",
                "\t\tconst assignment1 = null;",
                "\t\tconst value1 = [assignment1]",
                "\t\tconst removeReturnValue = await redBlackTree2.remove(value1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import HashTable from \"../instrumented/javascript-algorithms/src/data-structures/hash-table/HashTable.js\";",
                "import RedBlackTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst redBlackTree = new RedBlackTree()",
                "\t\tconst value = \"./BinarySearchTreeNode\";",
                "\t\tconst insertReturnValue = await redBlackTree.insert(value)",
                "\t\tconst redBlackTree1 = new RedBlackTree()",
                "\t\tconst assignment = 17;",
                "\t\tconst anon = \"2~ki~v~}XNvLlJ5;7~WJ}`)Mp_0VD(mI§fHI3\\\"HhePRdME-8{\";",
                "\t\tconst anon1 = () => {};",
                "\t\tconst meta = new HashTable(assignment, anon, anon1)",
                "\t\tconst node = {",
                "\t\t\t\"meta\": meta",
                "\t\t}",
                "\t\tconst makeNodeRedReturnValue = await redBlackTree1.makeNodeRed(node)",
                "\t\tconst redBlackTree2 = new RedBlackTree()",
                "\t\tconst assignment1 = 17;",
                "\t\tconst anon2 = \"2~ki~v~}XNvLlJ5;7~WJ}`)Mp_0VD(mI§fHI3\\\"HhePRdME-8{\";",
                "\t\tconst anon3 = () => {};",
                "\t\tconst meta1 = new HashTable(assignment1, anon2, anon3)",
                "\t\tconst node1 = {",
                "\t\t\t\"meta\": meta1",
                "\t\t}",
                "\t\tconst anon4 = () => {};",
                "\t\tconst isNodeRedReturnValue = await redBlackTree2.isNodeRed(node1, anon4)",
                "\t\tconst redBlackTree3 = new RedBlackTree()",
                "\t\tconst node2 = undefined;",
                "\t\tconst isNodeColoredReturnValue = await redBlackTree3.isNodeColored(node2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BinarySearchTreeNode from \"../instrumented/javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTreeNode.js\";",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import LinkedListNode from \"../instrumented/javascript-algorithms/src/data-structures/linked-list/LinkedListNode.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst value = {}",
                "\t\tconst assignment = null;",
                "\t\tconst anon = 11;",
                "\t\tconst value1 = new LinkedListNode(value, assignment, anon)",
                "\t\tconst graph = new GraphVertex(value1)",
                "\t\tconst startVertex = true;",
                "\t\tconst enterVertex = () => {};",
                "\t\tconst allowTraversal = () => {};",
                "\t\tconst leaveVertex = () => {};",
                "\t\tconst originalCallbacks = {",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst assignment1 = null;",
                "\t\tconst assignment2 = false;",
                "\t\tconst anon1 = new BinarySearchTreeNode(assignment1, assignment2)",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks, anon1)",
                "\t\tconst assignment3 = null;",
                "\t\tconst assignment4 = false;",
                "\t\tconst anon2 = new BinarySearchTreeNode(assignment3, assignment4)",
                "\t\tconst value2 = undefined;",
                "\t\tconst containsReturnValue = await anon2.contains(value2)",
                "\t\tconst graph1 = null;",
                "\t\tconst startVertex1 = 1;",
                "\t\tconst originalCallbacks1 = {}",
                "\t\tconst anon3 = \"Matrices have incompatible shape for multiplication\";",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(graph1, startVertex1, originalCallbacks1, anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import Sort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/Sort.js\";",
                "import floydWarshall from \"../instrumented/javascript-algorithms/src/algorithms/graph/floyd-warshall/floydWarshall.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = null;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst floydWarshallReturnValue = await floydWarshall(graph)",
                "\t\tconst graph1 = \"../../../utils/comparator/Comparator\";",
                "\t\tconst originalCallbacks = true;",
                "\t\tconst anon = () => {};",
                "\t\tconst anon1 = new Sort(originalCallbacks, anon)",
                "\t\tconst floydWarshallReturnValue1 = await floydWarshall(graph1, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash6": {
        "crashProject": "javascript-algorithms",
        "trace": "    at reduce (javascript-algorithms/src/algorithms/graph/travelling-salesman/bfTravellingSalesman.js:24:282)\n    at Array.reduce (<anonymous>)\n    at findAllPaths (javascript-algorithms/src/algorithms/graph/travelling-salesman/bfTravellingSalesman.js:24:82)\n    at bfTravellingSalesman (javascript-algorithms/src/algorithms/graph/travelling-salesman/bfTravellingSalesman.js:75:78)\n    at _callee$ (.syntest/tests/tempTest.spec.js:12:75)\n    at tryCatch (.syntest/tests/tempTest.spec.js:5:114)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:5:114)\n    at Generator.next (.syntest/tests/tempTest.spec.js:5:114)\n    at resolve (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at gen (.syntest/tests/tempTest.spec.js:2:1)\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading 'getKey')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import bfTravellingSalesman from \"../instrumented/javascript-algorithms/src/algorithms/graph/travelling-salesman/bfTravellingSalesman.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst anon = \":kA]MdA.AqQjHh7§;eT^=b:'bw**'kA:\\\\)/vlN_y:-\\\"i5^#LVT?OI<.9POO>8Fl§ZjVR\\\\,<#Lvy_\";",
                "\t\tconst bfTravellingSalesmanReturnValue = await bfTravellingSalesman(graph, anon)",
                "\t\tconst assignment1 = true;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst getAdjacencyMatrixReturnValue = await graph1.getAdjacencyMatrix()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash7": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Graph.getNeighbors (javascript-algorithms/src/data-structures/graph/Graph.js:34:19)\n    at _loop (javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js:64:36)\n    at breadthFirstSearch (javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js:59:255)\n    at call (.syntest/tests/tempTest.spec.js:19:77)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot read properties of null (reading 'getNeighbors')",
            "TypeError: vertex.getNeighbors is not a function",
            "TypeError: Cannot read properties of undefined (reading 'getNeighbors')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import Heap from \"../instrumented/javascript-algorithms/src/data-structures/heap/Heap.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst anon = 948.4513216734481;",
                "\t\tconst graph = new Graph(assignment, anon)",
                "\t\tconst startVertex = null;",
                "\t\tconst allowTraversal = true;",
                "\t\tconst enterVertex = false;",
                "\t\tconst leaveVertex = true;",
                "\t\tconst originalCallbacks = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst anon1 = null;",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks, anon1)",
                "\t\tconst arrayElement = \"0\";",
                "\t\tconst getNeighbors = [arrayElement]",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex1 = () => {};",
                "\t\tconst anon2 = 948.4513216734481;",
                "\t\tconst anon3 = false;",
                "\t\tconst originalCallbacks1 = new Heap(anon2, anon3)",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(graph1, startVertex1, originalCallbacks1)",
                "\t\tconst anon4 = 948.4513216734481;",
                "\t\tconst anon5 = false;",
                "\t\tconst originalCallbacks2 = new Heap(anon4, anon5)",
                "\t\tconst anon6 = 948.4513216734481;",
                "\t\tconst assignment1 = 7;",
                "\t\tconst anon7 = undefined;",
                "\t\tconst removeReturnValue = await originalCallbacks2.remove(anon6, assignment1, anon7)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst anon = () => {};",
                "\t\tconst graph = new Graph(assignment, anon)",
                "\t\tconst startVertex = () => {};",
                "\t\tconst originalCallbacks = undefined;",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\tconst assignment1 = false;",
                "\t\tconst anon1 = () => {};",
                "\t\tconst graph1 = new Graph(assignment1, anon1)",
                "\t\tconst getAllVerticesReturnValue = await graph1.getAllVertices()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst anon = null;",
                "\t\tconst anon1 = \"+±@2±^n$O\";",
                "\t\tconst anon2 = null;",
                "\t\tconst graph = new Graph(assignment, anon, anon1, anon2)",
                "\t\tconst startVertex = undefined;",
                "\t\tconst arrayElement = -306;",
                "\t\tconst originalCallbacks = [arrayElement]",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash8": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Graph.getNeighbors (javascript-algorithms/src/data-structures/graph/Graph.js:34:19)\n    at _loop (javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js:64:36)\n    at breadthFirstSearch (javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js:59:255)\n    at _callee$ (.syntest/tests/tempTest.spec.js:19:28)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.Promise [as next] (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:1:1)\n",
        "errors": [
            "TypeError: vertex.getNeighbors is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import QuickSortInPlace from \"../instrumented/javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSortInPlace.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst value = () => {};",
                "\t\tconst anon = \"0000000000000001\";",
                "\t\tconst graph = new GraphVertex(value, anon)",
                "\t\tconst startVertex = () => {};",
                "\t\tconst originalCallbacks = new QuickSortInPlace()",
                "\t\tconst anon1 = \"./BinarySearchTreeNode\";",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks, anon1)",
                "\t\tconst assignment = true;",
                "\t\tconst graph1 = new Graph(assignment)",
                "\t\tconst startVertex1 = {}",
                "\t\tconst originalCallbacks1 = {}",
                "\t\tconst startVertex2 = () => {};",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(graph1, startVertex1, originalCallbacks1, startVertex2)",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph2 = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst anon2 = \"0000000000000001\";",
                "\t\tconst allowTraversal = undefined;",
                "\t\tconst enterVertex = undefined;",
                "\t\tconst leaveVertex = false;",
                "\t\tconst originalCallbacks2 = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst anon3 = 1.401298464324817e-45;",
                "\t\tconst breadthFirstSearchReturnValue2 = await breadthFirstSearch(graph2, anon2, originalCallbacks2, anon3)",
                "\t\tconst value1 = () => {};",
                "\t\tconst anon4 = \"0000000000000001\";",
                "\t\tconst graph3 = new GraphVertex(value1, anon4)",
                "\t\tconst deleteAllEdgesReturnValue = await graph3.deleteAllEdges()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash9": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Function.initSortingCallbacks (javascript-algorithms/src/algorithms/sorting/Sort.js:25:30)\n    at new construct (javascript-algorithms/src/algorithms/sorting/Sort.js:13:27)\n    at InsertionSort.apply (javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js:1:28)\n    at new findEdgeReturnValue (javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js:3:35)\n    at _callee$ (.syntest/tests/tempTest.spec.js:19:9)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:1:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:33)\n    at .syntest/tests/tempTest.spec.js:2:33\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:33)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot create property 'compareCallback' on number '-378'",
            "TypeError: Cannot create property 'compareCallback' on number '13'",
            "TypeError: Cannot create property 'compareCallback' on string 'e4),rgM)z'",
            "TypeError: Cannot create property 'compareCallback' on string ':`§[)cVs)}6nB25b:O8Vjr(U\tT|$?jrw_Ub/-[v§ A%PDrCmD:7<-{Q8qdF'",
            "TypeError: Cannot create property 'compareCallback' on string '<IW>t\"w'\\F./XO=p&W-;b>5Uxx)'2{2,;o_35XL^!B0uav<u'",
            "TypeError: Cannot create property 'compareCallback' on string '<IW>t\"w'\\F./XO=p&W-;b>5Uxx)'2{2;o_35XL^!B0uav<u'",
            "TypeError: Cannot create property 'compareCallback' on string '<IW>t\"w'\\F./XO=p&W-;b>5Uxx)'2{2,;o_35XL^!y0uav<u'",
            "TypeError: Cannot create property 'compareCallback' on string '=p1_L'ZzhU)=,ct^p}-{\"fO9A=8\tp5%!w`§TV+[dnU< q\" 4[~]tP]aQD*.W4@'",
            "TypeError: Cannot create property 'compareCallback' on string '$'",
            "TypeError: Cannot create property 'compareCallback' on number '551.4521145231581'",
            "TypeError: Cannot create property 'compareCallback' on boolean 'true'",
            "TypeError: Cannot create property 'compareCallback' on string '.$'",
            "TypeError: Cannot create property 'compareCallback' on string '0011001001100110'",
            "TypeError: Cannot create property 'compareCallback' on string '00111110100110011001100110011010'",
            "TypeError: Cannot create property 'compareCallback' on number '603.8516783970265'",
            "TypeError: Cannot create property 'compareCallback' on number '31'",
            "TypeError: Cannot create property 'compareCallback' on number '-955.6913960703118'",
            "TypeError: Cannot create property 'compareCallback' on string 'LW6;k/l~PPE~rRFmC±~p$4I1/NS,;6rw>@gc]U6wNSUVy>WIR;u?!§vS'I[]cZ^'Cehu;w0I^aZ;OY3U5>oa'",
            "TypeError: Cannot create property 'compareCallback' on number '-765'",
            "TypeError: Cannot create property 'compareCallback' on number '100'",
            "TypeError: Cannot create property 'compareCallback' on number '-252'",
            "TypeError: Cannot create property 'compareCallback' on string '../bits/bitLength'",
            "TypeError: Cannot create property 'compareCallback' on string '101111111011100110011001100110P110011001100110011001100110011010'",
            "TypeError: Cannot create property 'compareCallback' on number '94.49076598608576'",
            "TypeError: Cannot create property 'compareCallback' on string '11111111011111111111111111111111'",
            "TypeError: Cannot create property 'compareCallback' on number '327.07247951703016'"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import ComplexNumber from \"../instrumented/javascript-algorithms/src/algorithms/math/complex-number/ComplexNumber.js\";",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import LinkedList from \"../instrumented/javascript-algorithms/src/data-structures/linked-list/LinkedList.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst anon = 208.12886459046194;",
                "\t\tconst anon1 = \"../bits/bitLength\";",
                "\t\tconst graph = new Graph(assignment, anon, anon1)",
                "\t\tconst arrayElement = \"./BinarySearchTreeNode\";",
                "\t\tconst arrayElement1 = 31;",
                "\t\tconst anon2 = -378;",
                "\t\tconst arrayElement2 = 135;",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst anon3 = null;",
                "\t\tconst anon4 = true;",
                "\t\tconst arrayElement3 = new ComplexNumber(assignment1, anon3, anon4)",
                "\t\tconst anon5 = [arrayElement2, arrayElement3]",
                "\t\tconst arrayElement4 = new InsertionSort(anon2, anon5)",
                "\t\tconst comparatorFunction = [arrayElement, arrayElement1, arrayElement4]",
                "\t\tconst startVertex = new LinkedList(comparatorFunction)",
                "\t\tconst allowTraversal = true;",
                "\t\tconst enterVertex = undefined;",
                "\t\tconst leaveVertex = false;",
                "\t\tconst originalCallbacks = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\tconst anon6 = -378;",
                "\t\tconst arrayElement5 = 135;",
                "\t\tconst assignment2 = undefined;",
                "\t\tconst anon7 = null;",
                "\t\tconst anon8 = true;",
                "\t\tconst arrayElement6 = new ComplexNumber(assignment2, anon7, anon8)",
                "\t\tconst anon9 = [arrayElement5, arrayElement6]",
                "\t\tconst arrayElement7 = new InsertionSort(anon6, anon9)",
                "\t\tconst allowTraversal1 = true;",
                "\t\tconst enterVertex1 = undefined;",
                "\t\tconst leaveVertex1 = false;",
                "\t\tconst originalCallbacks1 = {",
                "\t\t\t\"allowTraversal\": allowTraversal1,",
                "\t\t\t\"enterVertex\": enterVertex1,",
                "\t\t\t\"leaveVertex\": leaveVertex1",
                "\t\t}",
                "\t\tconst sortReturnValue = await arrayElement7.sort(originalCallbacks1)",
                "\t\tconst allowTraversal2 = true;",
                "\t\tconst enterVertex2 = undefined;",
                "\t\tconst leaveVertex2 = false;",
                "\t\tconst originalCallbacks2 = {",
                "\t\t\t\"allowTraversal\": allowTraversal2,",
                "\t\t\t\"enterVertex\": enterVertex2,",
                "\t\t\t\"leaveVertex\": leaveVertex2",
                "\t\t}",
                "\t\tconst arrayElement8 = \"./BinarySearchTreeNode\";",
                "\t\tconst allowTraversal3 = true;",
                "\t\tconst enterVertex3 = false;",
                "\t\tconst leaveVertex3 = true;",
                "\t\tconst originalCallbacks3 = {",
                "\t\t\t\"allowTraversal\": allowTraversal3,",
                "\t\t\t\"enterVertex\": enterVertex3,",
                "\t\t\t\"leaveVertex\": leaveVertex3",
                "\t\t}",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(originalCallbacks2, arrayElement8, originalCallbacks3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BubbleSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/bubble-sort/BubbleSort.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst anon = 13;",
                "\t\tconst anon1 = null;",
                "\t\tconst arrayElement = new BubbleSort(anon, anon1)",
                "\t\tconst arrayElement1 = \"i`Y|&F7u]h\";",
                "\t\tconst startVertex = [arrayElement, arrayElement1]",
                "\t\tconst allowTraversal = true;",
                "\t\tconst enterVertex = false;",
                "\t\tconst leaveVertex = true;",
                "\t\tconst originalCallbacks = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst arrayElement2 = null;",
                "\t\tconst anon2 = [arrayElement2]",
                "\t\tconst anon3 = \"./QueenPosition\";",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks, anon2, anon3)",
                "\t\tconst anon4 = 13;",
                "\t\tconst anon5 = null;",
                "\t\tconst arrayElement3 = new BubbleSort(anon4, anon5)",
                "\t\tconst arrayElement4 = null;",
                "\t\tconst anon6 = [arrayElement4]",
                "\t\tconst sortReturnValue = await arrayElement3.sort(anon6)",
                "\t\tconst anon7 = 13;",
                "\t\tconst anon8 = null;",
                "\t\tconst arrayElement5 = new BubbleSort(anon7, anon8)",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst sortReturnValue1 = await arrayElement5.sort(graph1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = 790;",
                "\t\tconst anon = \"e4),rgM)z\";",
                "\t\tconst originalCallbacks = new InsertionSort(anon)",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\tconst anon1 = \"e4),rgM)z\";",
                "\t\tconst originalCallbacks1 = new InsertionSort(anon1)",
                "\t\tconst originalArray = []",
                "\t\tconst sortReturnValue = await originalCallbacks1.sort(originalArray)",
                "\t\tconst anon2 = \"e4),rgM)z\";",
                "\t\tconst originalCallbacks2 = new InsertionSort(anon2)",
                "\t\tconst originalArray1 = []",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst originalArray2 = [originalArray1, arrayElement]",
                "\t\tconst sortReturnValue1 = await originalCallbacks2.sort(originalArray2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = \":`§[)cVs)}6nB25b:O8Vjr(U\\tT|$?jrw_Ub/-[v§ A%PDrCmD:7<-{Q8qdF\";",
                "\t\tconst value = new SelectionSort(anon)",
                "\t\tconst anon1 = false;",
                "\t\tconst graph = new GraphVertex(value, anon1)",
                "\t\tconst startVertex = {}",
                "\t\tconst originalCallbacks = {}",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\tconst anon2 = \":`§[)cVs)}6nB25b:O8Vjr(U\\tT|$?jrw_Ub/-[v§ A%PDrCmD:7<-{Q8qdF\";",
                "\t\tconst value1 = new SelectionSort(anon2)",
                "\t\tconst anon3 = false;",
                "\t\tconst graph1 = new GraphVertex(value1, anon3)",
                "\t\tconst originalCallbacks1 = {}",
                "\t\tconst anon4 = () => {};",
                "\t\tconst deleteEdgeReturnValue = await graph1.deleteEdge(originalCallbacks1, anon4)",
                "\t\tconst originalCallbacks2 = {}",
                "\t\tconst anon5 = () => {};",
                "\t\tconst originalCallbacks3 = {}",
                "\t\tconst anon6 = () => {};",
                "\t\tconst breadthFirstSearchReturnValue1 = await breadthFirstSearch(originalCallbacks2, anon5, originalCallbacks3, anon6)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = 12;",
                "\t\tconst anon = \"<IW>t\\\"w'\\\\F./XO=p&W-;b>5Uxx)'2{2,;o_35XL^!B0uav<u\";",
                "\t\tconst callbacks = new SelectionSort(anon)",
                "\t\tconst anon1 = () => {};",
                "\t\tconst anon2 = {}",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks, anon1, anon2)",
                "\t\tconst anon3 = \"<IW>t\\\"w'\\\\F./XO=p&W-;b>5Uxx)'2{2,;o_35XL^!B0uav<u\";",
                "\t\tconst callbacks1 = new SelectionSort(anon3)",
                "\t\tconst arrayElement = true;",
                "\t\tconst arrayElement1 = \"'ddpJ*n'RNJ\\t2<KR7T4PZXMIx%TAWa7wO=)5V >os|Y'p! Z-lK5hCWlt;.iN#]1F=Gt_w7z!y# Q{jiwqZWh'\\t')±*K\";",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst arrayElement3 = null;",
                "\t\tconst originalArray = [arrayElement, arrayElement1, graph1, arrayElement2, arrayElement3]",
                "\t\tconst sortReturnValue = await callbacks1.sort(originalArray)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = 12;",
                "\t\tconst anon = \"<IW>t\\\"w'\\\\F./XO=p&W-;b>5Uxx)'2{2;o_35XL^!B0uav<u\";",
                "\t\tconst callbacks = new SelectionSort(anon)",
                "\t\tconst anon1 = () => {};",
                "\t\tconst anon2 = {}",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks, anon1, anon2)",
                "\t\tconst anon3 = \"<IW>t\\\"w'\\\\F./XO=p&W-;b>5Uxx)'2{2,;o_35XL^!B0uav<u\";",
                "\t\tconst callbacks1 = new SelectionSort(anon3)",
                "\t\tconst arrayElement = true;",
                "\t\tconst arrayElement1 = \"'ddpJ*n'RNJ\\t2<KR7T4PZXMIx%TAWa7wO=)5V >os|Y'p! Z-lK5hCWlt;.iN#]1F=Gt_w7z!y# Q{jiwqZWh'\\t')±*K\";",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst arrayElement3 = null;",
                "\t\tconst originalArray = [arrayElement, arrayElement1, graph1, arrayElement2, arrayElement3]",
                "\t\tconst sortReturnValue = await callbacks1.sort(originalArray)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = 12;",
                "\t\tconst anon = \"<IW>t\\\"w'\\\\F./XO=p&W-;b>5Uxx)'2{2,;o_35XL^!y0uav<u\";",
                "\t\tconst callbacks = new SelectionSort(anon)",
                "\t\tconst anon1 = () => {};",
                "\t\tconst anon2 = {}",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks, anon1, anon2)",
                "\t\tconst anon3 = \"<IW>t\\\"w'\\\\F./XO=p&W-;b>5Uxx)'2{2,;o_35XL^!B0uav<u\";",
                "\t\tconst callbacks1 = new SelectionSort(anon3)",
                "\t\tconst arrayElement = true;",
                "\t\tconst arrayElement1 = \"'ddpJ*n'RNJ\\t2<KR7T4PZXMIx%TAWa7wO=)5V >os|Y'p! Z-lK5hCWlt;.iN#]1F=Gt_w7z!y# Q{jiwqZWh'\\t')±*K\";",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst arrayElement3 = null;",
                "\t\tconst originalArray = [arrayElement, arrayElement1, graph1, arrayElement2, arrayElement3]",
                "\t\tconst sortReturnValue = await callbacks1.sort(originalArray)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import DisjointSet from \"../instrumented/javascript-algorithms/src/data-structures/disjoint-set/DisjointSet.js\";",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = 15;",
                "\t\tconst keyCallback = 100;",
                "\t\tconst anon = null;",
                "\t\tconst callbacks = new DisjointSet(keyCallback, anon)",
                "\t\tconst anon1 = \"=p1_L'ZzhU)=,ct^p}-{\\\"fO9A=8\\tp5%!w`§TV+[dnU< q\\\" 4[~]tP]aQD*.W4@\";",
                "\t\tconst anon2 = new InsertionSort(anon1)",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = 12;",
                "\t\tconst anon = \"$\";",
                "\t\tconst callbacks = new SelectionSort(anon)",
                "\t\tconst anon1 = () => {};",
                "\t\tconst anon2 = {}",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks, anon1, anon2)",
                "\t\tconst anon3 = \"<IW>t\\\"w'\\\\F./XO=p&W-;b>5Uxx)'2{2,;o_35XL^!B0uav<u\";",
                "\t\tconst callbacks1 = new SelectionSort(anon3)",
                "\t\tconst arrayElement = true;",
                "\t\tconst arrayElement1 = \"'ddpJ*n'RNJ\\t2<KR7T4PZXMIx%TAWa7wO=)5V >os|Y'p! Z-lK5hCWlt;.iN#]1F=Gt_w7z!y# Q{jiwqZWh'\\t')±*K\";",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst arrayElement3 = null;",
                "\t\tconst originalArray = [arrayElement, arrayElement1, graph1, arrayElement2, arrayElement3]",
                "\t\tconst sortReturnValue = await callbacks1.sort(originalArray)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex = 12;",
                "\t\tconst anon = 551.4521145231581;",
                "\t\tconst callbacks = new SelectionSort(anon)",
                "\t\tconst anon1 = () => {};",
                "\t\tconst anon2 = {}",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks, anon1, anon2)",
                "\t\tconst anon3 = \"<IW>t\\\"w'\\\\F./XO=p&W-;b>5Uxx)'2{2,;o_35XL^!B0uav<u\";",
                "\t\tconst callbacks1 = new SelectionSort(anon3)",
                "\t\tconst arrayElement = true;",
                "\t\tconst arrayElement1 = \"'ddpJ*n'RNJ\\t2<KR7T4PZXMIx%TAWa7wO=)5V >os|Y'p! Z-lK5hCWlt;.iN#]1F=Gt_w7z!y# Q{jiwqZWh'\\t')±*K\";",
                "\t\tconst getNeighbors1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors1",
                "\t\t}",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst arrayElement3 = null;",
                "\t\tconst originalArray = [arrayElement, arrayElement1, graph1, arrayElement2, arrayElement3]",
                "\t\tconst sortReturnValue = await callbacks1.sort(originalArray)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import QuickSortInPlace from \"../instrumented/javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSortInPlace.js\";",
                "import eulerianPath from \"../instrumented/javascript-algorithms/src/algorithms/graph/eulerian-path/eulerianPath.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst anon = true;",
                "\t\tconst anon1 = new QuickSortInPlace(anon)",
                "\t\tconst graph = new Graph(assignment, anon1)",
                "\t\tconst eulerianPathReturnValue = await eulerianPath(graph)",
                "\t\tconst assignment1 = false;",
                "\t\tconst anon2 = true;",
                "\t\tconst anon3 = new QuickSortInPlace(anon2)",
                "\t\tconst graph1 = new Graph(assignment1, anon3)",
                "\t\tconst startVertex = () => {};",
                "\t\tconst endVertex = null;",
                "\t\tconst assignment2 = 23;",
                "\t\tconst edge = new GraphEdge(startVertex, endVertex, assignment2)",
                "\t\tconst deleteEdgeReturnValue = await graph1.deleteEdge(edge)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BubbleSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/bubble-sort/BubbleSort.js\";",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import MinHeap from \"../instrumented/javascript-algorithms/src/data-structures/heap/MinHeap.js\";",
                "import floydWarshall from \"../instrumented/javascript-algorithms/src/algorithms/graph/floyd-warshall/floydWarshall.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst anon = true;",
                "\t\tconst graph = new Graph(assignment, anon)",
                "\t\tconst arrayElement = \".$\";",
                "\t\tconst anon1 = new BubbleSort(arrayElement)",
                "\t\tconst floydWarshallReturnValue = await floydWarshall(graph, anon1)",
                "\t\tconst anon2 = new BubbleSort()",
                "\t\tconst arrayElement1 = \".$\";",
                "\t\tconst anon3 = true;",
                "\t\tconst arrayElement2 = \"00111101110011001100110011001101\";",
                "\t\tconst originalArray = [arrayElement1, anon3, arrayElement2]",
                "\t\tconst sortReturnValue = await anon2.sort(originalArray)",
                "\t\tconst anon4 = new BubbleSort()",
                "\t\tconst originalArray1 = new MinHeap()",
                "\t\tconst anon5 = null;",
                "\t\tconst sortReturnValue1 = await anon4.sort(originalArray1, anon5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "import Trie from \"../instrumented/javascript-algorithms/src/data-structures/trie/Trie.js\";",
                "import stronglyConnectedComponents from \"../instrumented/javascript-algorithms/src/algorithms/graph/strongly-connected-components/stronglyConnectedComponents.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = 569;",
                "\t\tconst anon = \"0011001001100110\";",
                "\t\tconst arrayElement1 = new SelectionSort(anon)",
                "\t\tconst arrayElement2 = null;",
                "\t\tconst graph = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst stronglyConnectedComponentsReturnValue = await stronglyConnectedComponents(graph)",
                "\t\tconst anon1 = \"0011001001100110\";",
                "\t\tconst arrayElement3 = new Trie(anon1)",
                "\t\tconst word = undefined;",
                "\t\tconst anon2 = undefined;",
                "\t\tconst addWordReturnValue = await arrayElement3.addWord(word, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = \"00111110100110011001100110011010\";",
                "\t\tconst objectPattern = new InsertionSort(arrayElement)",
                "\t\tconst arrayElement1 = new KnapsackItem(objectPattern)",
                "\t\tconst arrayElement2 = 94.49076598608576;",
                "\t\tconst arrayElement3 = \"11000001110110010100000000000000\";",
                "\t\tconst arrayElement4 = new SelectionSort()",
                "\t\tconst possibleItems = [arrayElement1, arrayElement2, arrayElement3, arrayElement4]",
                "\t\tconst weightLimit = false;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\tconst possibleItems1 = \"10111101101100100110)11001101\";",
                "\t\tconst weightLimit1 = {}",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst sortPossibleItemsByValueReturnValue = await knapsack1.sortPossibleItemsByValue()",
                "\t\tconst anon = null;",
                "\t\tconst objectPattern1 = new InsertionSort(anon)",
                "\t\tconst arrayElement5 = new KnapsackItem(objectPattern1)",
                "\t\tconst arrayElement6 = \"s,T#x±/x%tofen\\n$O:y/[]CDHU=:!hf(mDl#±6RHb;2/=AY0Q[o8^5eX{)1^>{ Tl0dLg{J\";",
                "\t\tconst arrayElement7 = \"11000001110110010100000000000000\";",
                "\t\tconst arrayElement8 = new SelectionSort()",
                "\t\tconst possibleItems2 = [arrayElement5, arrayElement6, arrayElement7, arrayElement8]",
                "\t\tconst weightLimit2 = true;",
                "\t\tconst knapsack2 = new Knapsack(possibleItems2, weightLimit2)",
                "\t\tconst anon1 = false;",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack2.solveUnboundedKnapsackProblem(anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = 603.8516783970265;",
                "\t\tconst objectPattern = new InsertionSort(anon)",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern)",
                "\t\tconst valuePerWeightRatioReturnValue = await knapsackItem.valuePerWeightRatio",
                "\t\tconst anon1 = 603.8516783970265;",
                "\t\tconst objectPattern1 = new InsertionSort(anon1)",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern1)",
                "\t\tconst anon2 = 603.8516783970265;",
                "\t\tconst localToStringReturnValue = await knapsackItem1.toString(anon2)",
                "\t\tconst anon3 = 603.8516783970265;",
                "\t\tconst objectPattern2 = new InsertionSort(anon3)",
                "\t\tconst value = undefined;",
                "\t\tconst originalArray = new GraphVertex(value)",
                "\t\tconst anon4 = () => {};",
                "\t\tconst sortReturnValue = await objectPattern2.sort(originalArray, anon4)",
                "\t\tconst anon5 = 603.8516783970265;",
                "\t\tconst objectPattern3 = new InsertionSort(anon5)",
                "\t\tconst arrayElement = true;",
                "\t\tconst arrayElement1 = true;",
                "\t\tconst originalArray1 = [arrayElement, arrayElement1]",
                "\t\tconst sortReturnValue1 = await objectPattern3.sort(originalArray1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import QuickSortInPlace from \"../instrumented/javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSortInPlace.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = 31;",
                "\t\tconst objectPattern = new QuickSortInPlace(anon)",
                "\t\tconst anon1 = null;",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern, anon1)",
                "\t\tconst totalWeightReturnValue = await knapsackItem.totalWeight",
                "\t\tconst anon2 = 31;",
                "\t\tconst objectPattern1 = new QuickSortInPlace(anon2)",
                "\t\tconst anon3 = null;",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern1, anon3)",
                "\t\tconst anon4 = \"0011111111111100000000000000000000000000000000000000000000000000\";",
                "\t\tconst localToStringReturnValue = await knapsackItem1.toString(anon4)",
                "\t\tconst anon5 = 31;",
                "\t\tconst objectPattern2 = new QuickSortInPlace(anon5)",
                "\t\tconst originalArray = () => {};",
                "\t\tconst assignment = 0.0999755859375;",
                "\t\tconst assignment1 = -385.6829828025526;",
                "\t\tconst assignment2 = true;",
                "\t\tconst sortReturnValue = await objectPattern2.sort(originalArray, assignment, assignment1, assignment2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BubbleSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/bubble-sort/BubbleSort.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = -955.6913960703118;",
                "\t\tconst objectPattern = new BubbleSort(anon)",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern)",
                "\t\tconst totalValueReturnValue = await knapsackItem.totalValue",
                "\t\tconst objectPattern1 = {}",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern1)",
                "\t\tconst localToStringReturnValue = await knapsackItem1.toString()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Comparator from \"../instrumented/javascript-algorithms/src/utils/comparator/Comparator.js\";",
                "import HashTable from \"../instrumented/javascript-algorithms/src/data-structures/hash-table/HashTable.js\";",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = 12;",
                "\t\tconst anon = \"LW6;k/l~PPE~rRFmC±~p$4I1/NS,;6rw>@gc]U6wNSUVy>WIR;u?!§vS'I[]cZ^'Cehu;w0I^aZ;OY3U5>oa\";",
                "\t\tconst anon1 = -331;",
                "\t\tconst anon2 = new InsertionSort(anon, anon1)",
                "\t\tconst objectPattern = new HashTable(assignment, anon2)",
                "\t\tconst anon3 = \"The data is empty\";",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern, anon3)",
                "\t\tconst arrayElement = -335.3461254054821;",
                "\t\tconst compareFunction = true;",
                "\t\tconst arrayElement1 = new Comparator(compareFunction)",
                "\t\tconst arrayElement2 = {}",
                "\t\tconst arrayElement3 = 5381;",
                "\t\tconst arrayElement4 = [arrayElement2, arrayElement3]",
                "\t\tconst anon4 = [arrayElement, arrayElement1, arrayElement4]",
                "\t\tconst localToStringReturnValue = await knapsackItem.toString(anon4)",
                "\t\tconst assignment1 = 12;",
                "\t\tconst anon5 = \"LW6;k/l~PPE~rRFmC±~p$4I1/NS,;6rw>@gc]U6wNSUVy>WIR;u?!§vS'I[]cZ^'Cehu;w0I^aZ;OY3U5>oa\";",
                "\t\tconst anon6 = -331;",
                "\t\tconst anon7 = new InsertionSort(anon5, anon6)",
                "\t\tconst objectPattern1 = new HashTable(assignment1, anon7)",
                "\t\tconst anon8 = \"The data is empty\";",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern1, anon8)",
                "\t\tconst localToStringReturnValue1 = await knapsackItem1.toString()",
                "\t\tconst assignment2 = 12;",
                "\t\tconst anon9 = \"LW6;k/l~PPE~rRFmC±~p$4I1/NS,;6rw>@gc]U6wNSUVy>WIR;u?!§vS'I[]cZ^'Cehu;w0I^aZ;OY3U5>oa\";",
                "\t\tconst anon10 = -331;",
                "\t\tconst anon11 = new InsertionSort(anon9, anon10)",
                "\t\tconst objectPattern2 = new HashTable(assignment2, anon11)",
                "\t\tconst anon12 = () => {};",
                "\t\tconst getKeysReturnValue = await objectPattern2.getKeys(anon12)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "import {dot} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst anon = -765;",
                "\t\tconst arrayElement1 = new SelectionSort(anon)",
                "\t\tconst arrayElement2 = -405.1263586045593;",
                "\t\tconst anon1 = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst arrayElement3 = () => {};",
                "\t\tconst arrayElement4 = \"./countSetBits\";",
                "\t\tconst arrayElement5 = -405.1263586045593;",
                "\t\tconst anon2 = [arrayElement3, arrayElement4, arrayElement5]",
                "\t\tconst dotReturnValue = await dot(anon1, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import CountingSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js\";",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst countingSort = new CountingSort()",
                "\t\tconst countingSort1 = new CountingSort()",
                "\t\tconst anon = 100;",
                "\t\tconst arrayElement = new InsertionSort(anon)",
                "\t\tconst arrayElement1 = true;",
                "\t\tconst originalArray = [arrayElement, arrayElement1]",
                "\t\tconst assignment = undefined;",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst sortReturnValue = await countingSort1.sort(originalArray, assignment, assignment1)",
                "\t\tconst countingSort2 = new CountingSort()",
                "\t\tconst originalArray1 = \"../../../data-structures/graph/GraphVertex\";",
                "\t\tconst assignment2 = 1.75;",
                "\t\tconst assignment3 = false;",
                "\t\tconst sortReturnValue1 = await countingSort2.sort(originalArray1, assignment2, assignment3)",
                "\t\tconst countingSort3 = new CountingSort()",
                "\t\tconst originalArray2 = () => {};",
                "\t\tconst arrayElement2 = true;",
                "\t\tconst assignment4 = undefined;",
                "\t\tconst anon1 = 100;",
                "\t\tconst assignment5 = 1.75;",
                "\t\tconst sortReturnValue2 = await countingSort3.sort(originalArray2, arrayElement2, assignment4, anon1, assignment5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import CountingSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js\";",
                "import QuickSortInPlace from \"../instrumented/javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSortInPlace.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst countingSort = new CountingSort()",
                "\t\tconst originalArray = \"bbbb\";",
                "\t\tconst assignment = undefined;",
                "\t\tconst assignment1 = false;",
                "\t\tconst anon = -252;",
                "\t\tconst anon1 = 70;",
                "\t\tconst anon2 = new QuickSortInPlace(anon, anon1)",
                "\t\tconst sortReturnValue = await countingSort.sort(originalArray, assignment, assignment1, anon2)",
                "\t\tconst countingSort1 = new CountingSort()",
                "\t\tconst originalArray1 = \"bbbb\";",
                "\t\tconst originalArray2 = [originalArray1]",
                "\t\tconst assignment2 = undefined;",
                "\t\tconst assignment3 = undefined;",
                "\t\tconst sortReturnValue1 = await countingSort1.sort(originalArray2, assignment2, assignment3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import stronglyConnectedComponents from \"../instrumented/javascript-algorithms/src/algorithms/graph/strongly-connected-components/stronglyConnectedComponents.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = \"../bits/bitLength\";",
                "\t\tconst anon1 = 554.0160170259253;",
                "\t\tconst getAllVertices = new InsertionSort(anon, anon1)",
                "\t\tconst graph = {",
                "\t\t\t\"getAllVertices\": getAllVertices",
                "\t\t}",
                "\t\tconst anon2 = false;",
                "\t\tconst stronglyConnectedComponentsReturnValue = await stronglyConnectedComponents(graph, anon2)",
                "\t\tconst assignment = true;",
                "\t\tconst graph1 = new Graph(assignment)",
                "\t\tconst vertexKey = () => {};",
                "\t\tconst getVertexByKeyReturnValue = await graph1.getVertexByKey(vertexKey)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = \"101111111011100110011001100110P110011001100110011001100110011010\";",
                "\t\tconst objectPattern = new InsertionSort(anon)",
                "\t\tconst originalArray = 97;",
                "\t\tconst anon1 = undefined;",
                "\t\tconst weightLimit = false;",
                "\t\tconst sortReturnValue = await objectPattern.sort(originalArray, anon1, weightLimit)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = 94.49076598608576;",
                "\t\tconst objectPattern = new InsertionSort(arrayElement)",
                "\t\tconst originalArray = 97;",
                "\t\tconst anon = undefined;",
                "\t\tconst weightLimit = () => {};",
                "\t\tconst sortReturnValue = await objectPattern.sort(originalArray, anon, weightLimit)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = \"11111111011111111111111111111111\";",
                "\t\tconst objectPattern = new InsertionSort(anon)",
                "\t\tconst originalArray = 97;",
                "\t\tconst anon1 = undefined;",
                "\t\tconst weightLimit = false;",
                "\t\tconst sortReturnValue = await objectPattern.sort(originalArray, anon1, weightLimit)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import {validateSameShape} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = 327.07247951703016;",
                "\t\tconst a = new InsertionSort(anon)",
                "\t\tconst b = {}",
                "\t\tconst validateSameShapeReturnValue = await validateSameShape(a, b)",
                "\t\tconst anon1 = 327.07247951703016;",
                "\t\tconst a1 = new InsertionSort(anon1)",
                "\t\tconst b1 = {}",
                "\t\tconst sortReturnValue = await a1.sort(b1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash10": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Function.initSortingCallbacks (javascript-algorithms/src/algorithms/sorting/Sort.js:25:30)\n    at new construct (javascript-algorithms/src/algorithms/sorting/Sort.js:13:27)\n    at SelectionSort.apply (javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js:1:28)\n    at new SelectionSort (javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js:3:35)\n    at _callee$ (.syntest/tests/tempTest.spec.js:19:28)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.Promise [as next] (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:1:1)\n",
        "errors": [
            "TypeError: Cannot create property 'compareCallback' on string 'Either dataSet or labels or toClassify were not set'",
            "TypeError: Cannot create property 'compareCallback' on string '../bits/bitLength'",
            "TypeError: Cannot create property 'compareCallback' on string '101111111011100110011001100110P110011001100110011001100110011010'",
            "TypeError: Cannot create property 'compareCallback' on boolean 'true'",
            "TypeError: Cannot create property 'compareCallback' on string 'NYYOlS3*T^$}aP7A/)ib&p(Hz]dVb}, MH?\"6%r'",
            "TypeError: Cannot create property 'compareCallback' on number '94.49076598608576'",
            "TypeError: Cannot create property 'compareCallback' on string '-Sg?'",
            "TypeError: Cannot create property 'compareCallback' on number '10345.5595703125'",
            "TypeError: Cannot create property 'compareCallback' on number '0.2'",
            "TypeError: Cannot create property 'compareCallback' on string './countSetBits'",
            "TypeError: Cannot create property 'compareCallback' on number '327.07247951703016'",
            "TypeError: Cannot create property 'compareCallback' on string '0011001001100110'",
            "TypeError: Cannot create property 'compareCallback' on number '10'",
            "TypeError: Cannot create property 'compareCallback' on string '5x\\+k si1_#[8r)TUkGmLUo06!h`j#`±2('",
            "TypeError: Cannot create property 'compareCallback' on string 'Lmn``lt25LJicF`40e\"W7hc|§,S.#b.x@([Hp`e'u<i W*g`o0t6N\\CW§x\"YM=?3e'L]|8Ea$|'"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import MinHeap from \"../instrumented/javascript-algorithms/src/data-structures/heap/MinHeap.js\";",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "import breadthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/breadth-first-search/breadthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = null;",
                "\t\tconst value = new SelectionSort(anon)",
                "\t\tconst graph = new GraphVertex(value)",
                "\t\tconst anon1 = undefined;",
                "\t\tconst startVertex = new MinHeap(anon1)",
                "\t\tconst enterVertex = () => {};",
                "\t\tconst allowTraversal = () => {};",
                "\t\tconst leaveVertex = () => {};",
                "\t\tconst originalCallbacks = {",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst breadthFirstSearchReturnValue = await breadthFirstSearch(graph, startVertex, originalCallbacks)",
                "\t\tconst anon2 = \"Either dataSet or labels or toClassify were not set\";",
                "\t\tconst value1 = new SelectionSort(anon2)",
                "\t\tconst anon3 = null;",
                "\t\tconst anon4 = undefined;",
                "\t\tconst originalArray = [anon3, anon4]",
                "\t\tconst sortReturnValue = await value1.sort(originalArray)",
                "\t\tconst anon5 = null;",
                "\t\tconst value2 = new SelectionSort(anon5)",
                "\t\tconst graph1 = new GraphVertex(value2)",
                "\t\tconst getEdgesReturnValue = await graph1.getEdges()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import stronglyConnectedComponents from \"../instrumented/javascript-algorithms/src/algorithms/graph/strongly-connected-components/stronglyConnectedComponents.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst stronglyConnectedComponentsReturnValue = await stronglyConnectedComponents(graph)",
                "\t\tconst anon = \"../bits/bitLength\";",
                "\t\tconst anon1 = 554.0160170259253;",
                "\t\tconst getAllVertices = new InsertionSort(anon, anon1)",
                "\t\tconst graph1 = {",
                "\t\t\t\"getAllVertices\": getAllVertices",
                "\t\t}",
                "\t\tconst anon2 = false;",
                "\t\tconst stronglyConnectedComponentsReturnValue1 = await stronglyConnectedComponents(graph1, anon2)",
                "\t\tconst assignment1 = true;",
                "\t\tconst graph2 = new Graph(assignment1)",
                "\t\tconst vertexKey = () => {};",
                "\t\tconst getVertexByKeyReturnValue = await graph2.getVertexByKey(vertexKey)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = null;",
                "\t\tconst objectPattern = new InsertionSort(anon)",
                "\t\tconst arrayElement = new KnapsackItem(objectPattern)",
                "\t\tconst arrayElement1 = 94.49076598608576;",
                "\t\tconst arrayElement2 = \"11000001110110010100000000000000\";",
                "\t\tconst arrayElement3 = new SelectionSort()",
                "\t\tconst possibleItems = [arrayElement, arrayElement1, arrayElement2, arrayElement3]",
                "\t\tconst weightLimit = false;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst anon1 = \"Uo`u§H-!v.g8,f[m;:4P:?fk[ldA;kV6DfA2Y/=B±A8Q\\nhU§±T~qZ~{X(8hp=F''e±D=>Q^O@g'5ZVLOXYPb _\";",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack.sortPossibleItemsByValuePerWeightRatio(anon1)",
                "\t\tconst anon2 = \"101111111011100110011001100110P110011001100110011001100110011010\";",
                "\t\tconst objectPattern1 = new InsertionSort(anon2)",
                "\t\tconst originalArray = 97;",
                "\t\tconst anon3 = undefined;",
                "\t\tconst weightLimit1 = false;",
                "\t\tconst sortReturnValue = await objectPattern1.sort(originalArray, anon3, weightLimit1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = null;",
                "\t\tconst objectPattern = new InsertionSort(anon)",
                "\t\tconst arrayElement = new KnapsackItem(objectPattern)",
                "\t\tconst arrayElement1 = 94.49076598608576;",
                "\t\tconst arrayElement2 = \"11000001110110010100000000000000\";",
                "\t\tconst arrayElement3 = new SelectionSort()",
                "\t\tconst possibleItems = [arrayElement, arrayElement1, arrayElement2, arrayElement3]",
                "\t\tconst weightLimit = false;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst anon1 = \"Uo`u§H-!v.g8,f[m;:4P:?fk[ldA;kV6DfA2Y/=B±A8Q\\nhU§±T~qZ~{X(8hp=F''e±D=>Q^O@g'5ZVLOXYPb _\";",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack.sortPossibleItemsByValuePerWeightRatio(anon1)",
                "\t\tconst anon2 = true;",
                "\t\tconst objectPattern1 = new InsertionSort(anon2)",
                "\t\tconst originalArray = 97;",
                "\t\tconst anon3 = undefined;",
                "\t\tconst weightLimit1 = true;",
                "\t\tconst sortReturnValue = await objectPattern1.sort(originalArray, anon3, weightLimit1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import ComplexNumber from \"../instrumented/javascript-algorithms/src/algorithms/math/complex-number/ComplexNumber.js\";",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = 13;",
                "\t\tconst arrayElement1 = 135;",
                "\t\tconst possibleItems = [arrayElement, arrayElement1]",
                "\t\tconst weightLimit = 568;",
                "\t\tconst assignment = undefined;",
                "\t\tconst anon = true;",
                "\t\tconst anon1 = new ComplexNumber(assignment, anon)",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon1)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack.sortPossibleItemsByValuePerWeightRatio()",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst anon2 = true;",
                "\t\tconst anon3 = new ComplexNumber(assignment1, anon2)",
                "\t\tconst anon4 = \"NYYOlS3*T^$}aP7A/)ib&p(Hz]dVb}, MH?\\\"6%r\";",
                "\t\tconst anon5 = () => {};",
                "\t\tconst anon6 = \"0011110000000000\";",
                "\t\tconst anon7 = {}",
                "\t\tconst assignment2 = new InsertionSort(anon4, anon5, anon6, anon7)",
                "\t\tconst getPolarFormReturnValue = await anon3.getPolarForm(assignment2)",
                "\t\tconst arrayElement2 = 13;",
                "\t\tconst arrayElement3 = 135;",
                "\t\tconst possibleItems1 = [arrayElement2, arrayElement3]",
                "\t\tconst weightLimit1 = 568;",
                "\t\tconst assignment3 = undefined;",
                "\t\tconst anon8 = true;",
                "\t\tconst anon9 = new ComplexNumber(assignment3, anon8)",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon9)",
                "\t\tconst anon10 = \"NYYOlS3*T^$}aP7A/)ib&p(Hz]dVb}, MH?\\\"6%r\";",
                "\t\tconst anon11 = \"0011110000000000\";",
                "\t\tconst sortPossibleItemsByValueReturnValue = await knapsack1.sortPossibleItemsByValue(anon10, anon11)",
                "\t\tconst anon12 = \"NYYOlS3*T^$}aP7A/)ib&p(Hz]dVb}, MH?\\\"6%r\";",
                "\t\tconst anon13 = () => {};",
                "\t\tconst anon14 = \"0011110000000000\";",
                "\t\tconst anon15 = {}",
                "\t\tconst assignment4 = new InsertionSort(anon12, anon13, anon14, anon15)",
                "\t\tconst arrayElement4 = 13;",
                "\t\tconst arrayElement5 = 135;",
                "\t\tconst possibleItems2 = [arrayElement4, arrayElement5]",
                "\t\tconst sortReturnValue = await assignment4.sort(possibleItems2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = null;",
                "\t\tconst objectPattern = new InsertionSort(anon)",
                "\t\tconst arrayElement = new KnapsackItem(objectPattern)",
                "\t\tconst arrayElement1 = 94.49076598608576;",
                "\t\tconst arrayElement2 = \"11000001110110010100000000000000\";",
                "\t\tconst arrayElement3 = new SelectionSort()",
                "\t\tconst possibleItems = [arrayElement, arrayElement1, arrayElement2, arrayElement3]",
                "\t\tconst weightLimit = false;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst anon1 = \"Uo`u§H-!v.g8,f[m;:4P:?fk[ldA;kV6DfA2Y/=B±A8Q\\nhU§±T~qZ~{X(8hp=F''e±D=>Q^O@g'5ZVLOXYPb _\";",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack.sortPossibleItemsByValuePerWeightRatio(anon1)",
                "\t\tconst arrayElement4 = 94.49076598608576;",
                "\t\tconst objectPattern1 = new InsertionSort(arrayElement4)",
                "\t\tconst originalArray = 97;",
                "\t\tconst anon2 = undefined;",
                "\t\tconst weightLimit1 = () => {};",
                "\t\tconst sortReturnValue = await objectPattern1.sort(originalArray, anon2, weightLimit1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = null;",
                "\t\tconst objectPattern = new InsertionSort(anon)",
                "\t\tconst arrayElement = new KnapsackItem(objectPattern)",
                "\t\tconst arrayElement1 = 94.49076598608576;",
                "\t\tconst arrayElement2 = \"11000001110110010100000000000000\";",
                "\t\tconst arrayElement3 = new SelectionSort()",
                "\t\tconst possibleItems = [arrayElement, arrayElement1, arrayElement2, arrayElement3]",
                "\t\tconst weightLimit = false;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst anon1 = \"Uo`u§H-!v.g8,f[m;:4P:?fk[ldA;kV6DfA2Y/=B±A8Q\\nhU§±T~qZ~{X(8hp=F''e±D=>Q^O@g'5ZVLOXYPb _\";",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack.sortPossibleItemsByValuePerWeightRatio(anon1)",
                "\t\tconst anon2 = \"-Sg?\";",
                "\t\tconst objectPattern1 = new InsertionSort(anon2)",
                "\t\tconst originalArray = 88;",
                "\t\tconst anon3 = undefined;",
                "\t\tconst weightLimit1 = false;",
                "\t\tconst sortReturnValue = await objectPattern1.sort(originalArray, anon3, weightLimit1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import QuickSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst objectPattern = new QuickSort()",
                "\t\tconst anon = -278;",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern, anon)",
                "\t\tconst valuePerWeightRatioReturnValue = await knapsackItem.valuePerWeightRatio",
                "\t\tconst anon1 = 10345.5595703125;",
                "\t\tconst anon2 = \"z6*ZF.}rs)wZ}Ku5$J+*^e-Q?hn<po^SbSW(=fQpjwRQhIsvBa\";",
                "\t\tconst objectPattern1 = new QuickSort(anon1, anon2)",
                "\t\tconst anon3 = -280;",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern1, anon3)",
                "\t\tconst anon4 = () => {};",
                "\t\tconst localToStringReturnValue = await knapsackItem1.toString(anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import MergeSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js\";",
                "import {getCellAtIndex} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {walk} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst m = () => {};",
                "\t\tconst localVisit = (cellIndices, cellValue) => {};",
                "\t\tconst anon = 0.2;",
                "\t\tconst anon1 = null;",
                "\t\tconst anon2 = \"../../../data-structures/heap/MinHeap\";",
                "\t\tconst walkReturnValue = await walk(m, localVisit, anon, anon1, anon2)",
                "\t\tconst m1 = {}",
                "\t\tconst arrayElement = undefined;",
                "\t\tconst anon3 = 0.2;",
                "\t\tconst anon4 = 0.2;",
                "\t\tconst anon5 = undefined;",
                "\t\tconst arrayElement1 = new MergeSort(anon3, anon4, anon5)",
                "\t\tconst cellIndices = [arrayElement, arrayElement1]",
                "\t\tconst getCellAtIndexReturnValue = await getCellAtIndex(m1, cellIndices)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import MergeSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js\";",
                "import {getCellAtIndex} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {walk} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst m = () => {};",
                "\t\tconst localVisit = (cellIndices, cellValue) => {};",
                "\t\tconst anon = 0.2;",
                "\t\tconst anon1 = null;",
                "\t\tconst anon2 = \"../../../data-structures/heap/MinHeap\";",
                "\t\tconst walkReturnValue = await walk(m, localVisit, anon, anon1, anon2)",
                "\t\tconst m1 = {}",
                "\t\tconst arrayElement = undefined;",
                "\t\tconst arrayElement1 = \"./countSetBits\";",
                "\t\tconst anon3 = 0.2;",
                "\t\tconst anon4 = undefined;",
                "\t\tconst arrayElement2 = new MergeSort(arrayElement1, anon3, anon4)",
                "\t\tconst cellIndices = [arrayElement, arrayElement2]",
                "\t\tconst getCellAtIndexReturnValue = await getCellAtIndex(m1, cellIndices)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import {validateSameShape} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {zeros} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst mShape = () => {};",
                "\t\tconst zerosReturnValue = await zeros(mShape)",
                "\t\tconst anon = 327.07247951703016;",
                "\t\tconst a = new InsertionSort(anon)",
                "\t\tconst b = {}",
                "\t\tconst validateSameShapeReturnValue = await validateSameShape(a, b)",
                "\t\tconst anon1 = 327.07247951703016;",
                "\t\tconst a1 = new InsertionSort(anon1)",
                "\t\tconst b1 = {}",
                "\t\tconst sortReturnValue = await a1.sort(b1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import MergeSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js\";",
                "import {getCellAtIndex} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {walk} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst m = () => {};",
                "\t\tconst localVisit = (cellIndices, cellValue) => {};",
                "\t\tconst anon = 0.2;",
                "\t\tconst anon1 = -212;",
                "\t\tconst anon2 = \"../../../data-structures/heap/MinHeap\";",
                "\t\tconst walkReturnValue = await walk(m, localVisit, anon, anon1, anon2)",
                "\t\tconst m1 = {}",
                "\t\tconst arrayElement = undefined;",
                "\t\tconst anon3 = \"0011001001100110\";",
                "\t\tconst anon4 = 0.2;",
                "\t\tconst anon5 = undefined;",
                "\t\tconst arrayElement1 = new MergeSort(anon3, anon4, anon5)",
                "\t\tconst cellIndices = [arrayElement, arrayElement1]",
                "\t\tconst getCellAtIndexReturnValue = await getCellAtIndex(m1, cellIndices)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import MergeSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js\";",
                "import {getCellAtIndex} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {walk} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst m = () => {};",
                "\t\tconst localVisit = (cellIndices, cellValue) => {};",
                "\t\tconst anon = -11;",
                "\t\tconst anon1 = null;",
                "\t\tconst anon2 = \"../../../data-structures/heap/MinHeap\";",
                "\t\tconst walkReturnValue = await walk(m, localVisit, anon, anon1, anon2)",
                "\t\tconst m1 = {}",
                "\t\tconst arrayElement = undefined;",
                "\t\tconst anon3 = 10;",
                "\t\tconst anon4 = 0.2;",
                "\t\tconst anon5 = undefined;",
                "\t\tconst arrayElement1 = new MergeSort(anon3, anon4, anon5)",
                "\t\tconst cellIndices = [arrayElement, arrayElement1]",
                "\t\tconst getCellAtIndexReturnValue = await getCellAtIndex(m1, cellIndices)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import MergeSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js\";",
                "import {getCellAtIndex} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {walk} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst m = () => {};",
                "\t\tconst localVisit = (cellIndices, cellValue) => {};",
                "\t\tconst anon = 0.2;",
                "\t\tconst anon1 = null;",
                "\t\tconst anon2 = \"../../../data-structures/heap/MinHeap\";",
                "\t\tconst walkReturnValue = await walk(m, localVisit, anon, anon1, anon2)",
                "\t\tconst m1 = {}",
                "\t\tconst arrayElement = undefined;",
                "\t\tconst arrayElement1 = \"5x\\\\+k si1_#[8r)TUkGmLUo06!h`j#`±2(\";",
                "\t\tconst anon3 = 0.2;",
                "\t\tconst anon4 = undefined;",
                "\t\tconst arrayElement2 = new MergeSort(arrayElement1, anon3, anon4)",
                "\t\tconst cellIndices = [arrayElement, arrayElement2]",
                "\t\tconst getCellAtIndexReturnValue = await getCellAtIndex(m1, cellIndices)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import QuickSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSort.js\";",
                "import stronglyConnectedComponents from \"../instrumented/javascript-algorithms/src/algorithms/graph/strongly-connected-components/stronglyConnectedComponents.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst anon = true;",
                "\t\tconst graph = new Graph(assignment, anon)",
                "\t\tconst stronglyConnectedComponentsReturnValue = await stronglyConnectedComponents(graph)",
                "\t\tconst startVertex = \"{Hlr)LFIC!F\\\"nBoDL±or*hmB9Yl3.§-|{c%X;C_e9<(m%UcpKouJ~heH^MY}-7rP?:~7PGY4]Kf&\\\"%]!;W4r^lK/~`q\";",
                "\t\tconst anon1 = \"Lmn``lt25LJicF`40e\\\"W7hc|§,S.#b.x@([Hp`e'u<i W*g`o0t6N\\\\CW§x\\\"YM=?3e'L]|8Ea$|\";",
                "\t\tconst endVertex = new QuickSort(anon1)",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst anon2 = () => {};",
                "\t\tconst graph1 = new GraphEdge(startVertex, endVertex, assignment1, anon2)",
                "\t\tconst stronglyConnectedComponentsReturnValue1 = await stronglyConnectedComponents(graph1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash11": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Graph.getNeighbors (javascript-algorithms/src/data-structures/graph/Graph.js:34:19)\n    at depthFirstSearchRecursive (javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js:51:9)\n    at depthFirstSearch (javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js:67:3)\n    at _callee$ (.syntest/tests/tempTest.spec.js:13:71)\n    at tryCatch (.syntest/tests/tempTest.spec.js:5:114)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:5:114)\n    at Generator.next (.syntest/tests/tempTest.spec.js:5:114)\n    at resolve (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at gen (.syntest/tests/tempTest.spec.js:2:1)\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot read properties of null (reading 'getNeighbors')",
            "TypeError: vertex.getNeighbors is not a function",
            "TypeError: Cannot read properties of undefined (reading 'getNeighbors')",
            "TypeError: originalArray.slice is not a function",
            "TypeError: Cannot read properties of undefined (reading 'length')",
            "TypeError: Cannot read properties of null (reading 'length')",
            "Error: Invalid matrix format"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst anon = undefined;",
                "\t\tconst graph = new Graph(assignment, anon)",
                "\t\tconst startVertex = null;",
                "\t\tconst callbacks = {}",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks)",
                "\t\tconst getNeighbors = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getNeighbors\": getNeighbors",
                "\t\t}",
                "\t\tconst startVertex1 = null;",
                "\t\tconst allowTraversal = true;",
                "\t\tconst startVertex2 = null;",
                "\t\tconst leaveVertex = false;",
                "\t\tconst callbacks1 = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": startVertex2,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst anon1 = 16;",
                "\t\tconst depthFirstSearchReturnValue1 = await depthFirstSearch(graph1, startVertex1, callbacks1, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst anon = \"0011111111111000000000000000000000000000000000000000000000000000\";",
                "\t\tconst graph = new Graph(assignment, anon)",
                "\t\tconst arrayElement = 17;",
                "\t\tconst arrayElement1 = \"0000000000000000000000000000000000000000000000000000000000000000\";",
                "\t\tconst startVertex = [arrayElement, arrayElement1]",
                "\t\tconst callbacks = undefined;",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks)",
                "\t\tconst assignment1 = false;",
                "\t\tconst anon1 = \"0011111111111000000000000000000000000000000000000000000000000000\";",
                "\t\tconst graph1 = new Graph(assignment1, anon1)",
                "\t\tconst getKey = () => {};",
                "\t\tconst newVertex = {",
                "\t\t\t\"getKey\": getKey",
                "\t\t}",
                "\t\tconst addVertexReturnValue = await graph1.addVertex(newVertex)",
                "\t\tconst assignment2 = false;",
                "\t\tconst anon2 = \"0011111111111000000000000000000000000000000000000000000000000000\";",
                "\t\tconst graph2 = new Graph(assignment2, anon2)",
                "\t\tconst getAllVerticesReturnValue = await graph2.getAllVertices()",
                "\t\tconst assignment3 = false;",
                "\t\tconst anon3 = \"0011111111111000000000000000000000000000000000000000000000000000\";",
                "\t\tconst graph3 = new Graph(assignment3, anon3)",
                "\t\tconst getAdjacencyMatrixReturnValue = await graph3.getAdjacencyMatrix()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import SimplePolynomialHash from \"../instrumented/javascript-algorithms/src/algorithms/cryptography/polynomial-hash/SimplePolynomialHash.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = undefined;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst startVertex = undefined;",
                "\t\tconst allowTraversal = false;",
                "\t\tconst enterVertex = false;",
                "\t\tconst leaveVertex = false;",
                "\t\tconst callbacks = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst arrayElement = new SimplePolynomialHash(assignment1)",
                "\t\tconst anon = [arrayElement]",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks, anon)",
                "\t\tconst assignment2 = undefined;",
                "\t\tconst graph1 = new Graph(assignment2)",
                "\t\tconst anon1 = null;",
                "\t\tconst anon2 = \"A\";",
                "\t\tconst getWeightReturnValue = await graph1.getWeight(anon1, anon2)",
                "\t\tconst assignment3 = undefined;",
                "\t\tconst graph2 = new Graph(assignment3)",
                "\t\tconst getWeightReturnValue1 = await graph2.getWeight()",
                "\t\tconst assignment4 = undefined;",
                "\t\tconst graph3 = new Graph(assignment4)",
                "\t\tconst anon3 = 822.0614504141993;",
                "\t\tconst getAllVerticesReturnValue = await graph3.getAllVertices(anon3)",
                "\t\tconst assignment5 = undefined;",
                "\t\tconst graph4 = new Graph(assignment5)",
                "\t\tconst localToStringReturnValue = await graph4.toString()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = -75;",
                "\t\tconst weightLimit = null;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\tconst possibleItems1 = -75;",
                "\t\tconst weightLimit1 = null;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst sortPossibleItemsByValueReturnValue = await knapsack1.sortPossibleItemsByValue()",
                "\t\tconst possibleItems2 = \"6}XU\";",
                "\t\tconst weightLimit2 = \"\\\"Y`5iO-7@?~1c/8&X)jl@I}ZOHC\\\\z+tBhF\\\"#{d[@C+%y,CJEB@\\tv5XR*.,0cP\\nD\\nNo±=k\";",
                "\t\tconst anon = \"-Sg?\";",
                "\t\tconst possibleItems3 = -75;",
                "\t\tconst knapsack2 = new Knapsack(possibleItems2, weightLimit2, anon, possibleItems3)",
                "\t\tconst anon1 = {}",
                "\t\tconst sortPossibleItemsByValueReturnValue1 = await knapsack2.sortPossibleItemsByValue(anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = undefined;",
                "\t\tconst arrayElement = \"+@6,8#4$1?|/?+j}zkvzj_>1mo§eG~*S-oDw}ja\\\\J4jNyaKUh\\nY;dcES\\\"|j68]+otV,U\\tJ67p\\\\D4{'$T]\";",
                "\t\tconst arrayElement1 = new InsertionSort()",
                "\t\tconst arrayElement2 = \"Prim's algorithms works only for undirected graphs\";",
                "\t\tconst weightLimit = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst anon = null;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\tconst possibleItems1 = undefined;",
                "\t\tconst arrayElement3 = \"+@6,8#4$1?|/?+j}zkvzj_>1mo§eG~*S-oDw}ja\\\\J4jNyaKUh\\nY;dcES\\\"|j68]+otV,U\\tJ67p\\\\D4{'$T]\";",
                "\t\tconst arrayElement4 = new InsertionSort()",
                "\t\tconst arrayElement5 = \"Prim's algorithms works only for undirected graphs\";",
                "\t\tconst weightLimit1 = [arrayElement3, arrayElement4, arrayElement5]",
                "\t\tconst anon1 = null;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack1.solveUnboundedKnapsackProblem()",
                "\t\tconst arrayElement6 = new InsertionSort()",
                "\t\tconst arrayElement7 = \"+@6,8#4$1?|/?+j}zkvzj_>1mo§eG~*S-oDw}ja\\\\J4jNyaKUh\\nY;dcES\\\"|j68]+otV,U\\tJ67p\\\\D4{'$T]\";",
                "\t\tconst arrayElement8 = new InsertionSort()",
                "\t\tconst arrayElement9 = \"Prim's algorithms works only for undirected graphs\";",
                "\t\tconst weightLimit2 = [arrayElement7, arrayElement8, arrayElement9]",
                "\t\tconst anon2 = {}",
                "\t\tconst sortReturnValue = await arrayElement6.sort(weightLimit2, anon2)",
                "\t\tconst possibleItems2 = undefined;",
                "\t\tconst arrayElement10 = \"+@6,8#4$1?|/?+j}zkvzj_>1mo§eG~*S-oDw}ja\\\\J4jNyaKUh\\nY;dcES\\\"|j68]+otV,U\\tJ67p\\\\D4{'$T]\";",
                "\t\tconst arrayElement11 = new InsertionSort()",
                "\t\tconst arrayElement12 = \"Prim's algorithms works only for undirected graphs\";",
                "\t\tconst weightLimit3 = [arrayElement10, arrayElement11, arrayElement12]",
                "\t\tconst anon3 = null;",
                "\t\tconst knapsack2 = new Knapsack(possibleItems2, weightLimit3, anon3)",
                "\t\tconst anon4 = false;",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue1 = await knapsack2.solveZeroOneKnapsackProblem(anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = null;",
                "\t\tconst weightLimit = \"n\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\tconst possibleItems1 = null;",
                "\t\tconst weightLimit1 = \"n\";",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BinarySearchTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTree.js\";",
                "import DoublyLinkedListNode from \"../instrumented/javascript-algorithms/src/data-structures/doubly-linked-list/DoublyLinkedListNode.js\";",
                "import MergeSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js\";",
                "import Queue from \"../instrumented/javascript-algorithms/src/data-structures/queue/Queue.js\";",
                "import {dot} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {t} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst arrayElement2 = () => {};",
                "\t\tconst arrayElement3 = -284;",
                "\t\tconst nodeValueCompareFunction = true;",
                "\t\tconst arrayElement4 = new BinarySearchTree(nodeValueCompareFunction)",
                "\t\tconst arrayElement5 = [arrayElement2, arrayElement3, arrayElement4]",
                "\t\tconst m = [arrayElement, arrayElement1, arrayElement5]",
                "\t\tconst anon = \"xEldo$L|h!2Dz/3H1.GTQsubE,F#±Y-z5U+%M\";",
                "\t\tconst value = new Queue()",
                "\t\tconst assignment = undefined;",
                "\t\tconst assignment1 = null;",
                "\t\tconst anon1 = false;",
                "\t\tconst anon2 = null;",
                "\t\tconst anon3 = new DoublyLinkedListNode(value, assignment, assignment1, anon1, anon2)",
                "\t\tconst anon4 = new MergeSort(anon3)",
                "\t\tconst tReturnValue = await t(m, anon, anon4)",
                "\t\tconst anon5 = \"xEldo$L|h!2Dz/3H1.GTQsubE,F#±Y-z5U+%M\";",
                "\t\tconst arrayElement6 = 101;",
                "\t\tconst b = [arrayElement6]",
                "\t\tconst dotReturnValue = await dot(anon5, b)",
                "\t\tconst value1 = new Queue()",
                "\t\tconst arrayElement7 = null;",
                "\t\tconst enqueueReturnValue = await value1.enqueue(arrayElement7)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash12": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Graph.getNeighbors (javascript-algorithms/src/data-structures/graph/Graph.js:34:19)\n    at depthFirstSearchRecursive (javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js:51:9)\n    at depthFirstSearch (javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js:67:3)\n    at call (.syntest/tests/tempTest.spec.js:21:4)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading 'getNeighbors')",
            "TypeError: Cannot read properties of null (reading 'getNeighbors')",
            "TypeError: originalArray.slice is not a function",
            "TypeError: Cannot read properties of null (reading 'length')",
            "TypeError: Cannot read properties of undefined (reading 'length')",
            "Error: Invalid matrix format"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst value = true;",
                "\t\tconst graph = new GraphVertex(value)",
                "\t\tconst startVertex = null;",
                "\t\tconst callbacks = {}",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks)",
                "\t\tconst assignment = undefined;",
                "\t\tconst anon = undefined;",
                "\t\tconst graph1 = new Graph(assignment, anon)",
                "\t\tconst startVertex1 = undefined;",
                "\t\tconst allowTraversal = true;",
                "\t\tconst enterVertex = false;",
                "\t\tconst leaveVertex = false;",
                "\t\tconst callbacks1 = {",
                "\t\t\t\"allowTraversal\": allowTraversal,",
                "\t\t\t\"enterVertex\": enterVertex,",
                "\t\t\t\"leaveVertex\": leaveVertex",
                "\t\t}",
                "\t\tconst depthFirstSearchReturnValue1 = await depthFirstSearch(graph1, startVertex1, callbacks1)",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst anon1 = undefined;",
                "\t\tconst graph2 = new Graph(assignment1, anon1)",
                "\t\tconst getKey = () => {};",
                "\t\tconst getKey1 = () => {};",
                "\t\tconst startVertex2 = {",
                "\t\t\t\"getKey\": getKey1",
                "\t\t}",
                "\t\tconst value1 = true;",
                "\t\tconst graph3 = new GraphVertex(value1)",
                "\t\tconst edge = {",
                "\t\t\t\"getKey\": getKey,",
                "\t\t\t\"startVertex\": startVertex2,",
                "\t\t\t\"endVertex\": graph3",
                "\t\t}",
                "\t\tconst anon2 = \"The data is empty\";",
                "\t\tconst deleteEdgeReturnValue = await graph2.deleteEdge(edge, anon2)",
                "\t\tconst value2 = true;",
                "\t\tconst graph4 = new GraphVertex(value2)",
                "\t\tconst getNeighborsReturnValue = await graph4.getNeighbors()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst value = false;",
                "\t\tconst graph = new GraphVertex(value)",
                "\t\tconst startVertex = null;",
                "\t\tconst callbacks = undefined;",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks)",
                "\t\tconst assignment = undefined;",
                "\t\tconst graph1 = new Graph(assignment)",
                "\t\tconst startVertex1 = null;",
                "\t\tconst callbacks1 = {}",
                "\t\tconst anon = \"*4lx`b}F)G'F\\\"KBi+DfEL?&&[P1;\\np5|+\";",
                "\t\tconst callbacks2 = undefined;",
                "\t\tconst depthFirstSearchReturnValue1 = await depthFirstSearch(graph1, startVertex1, callbacks1, anon, callbacks2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = true;",
                "\t\tconst weightLimit = \"+dho\\tiL7@HY.nn(l§u!2 N>XR§BoWKu$L2o/X|ll7{W:/^q;q[6^9l}ssWF{\\nL;8^h&EE\\\"\\n^esoC3c7HN/=ui&xRY!\";",
                "\t\tconst arrayElement = false;",
                "\t\tconst anon = [arrayElement]",
                "\t\tconst anon1 = \"s'w+Z*7qy>SO{V\\\"=e()7ui±.G_:jQV)KA,|#2wYJg0\\\"-*&GF//B`]/*[d8f5Q&y(fS$O_u:4QVmdioK5&62 \";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon, anon1)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = true;",
                "\t\tconst weightLimit1 = \"+dho\\tiL7@HY.nn(l§u!2 N>XR§BoWKu$L2o/X|ll7{W:/^q;q[6^9l}ssWF{\\nL;8^h&EE\\\"\\n^esoC3c7HN/=ui&xRY!\";",
                "\t\tconst arrayElement1 = false;",
                "\t\tconst anon2 = [arrayElement1]",
                "\t\tconst anon3 = \"s'w+Z*7qy>SO{V\\\"=e()7ui±.G_:jQV)KA,|#2wYJg0\\\"-*&GF//B`]/*[d8f5Q&y(fS$O_u:4QVmdioK5&62 \";",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon2, anon3)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack1.solveZeroOneKnapsackProblem()",
                "\t\tconst possibleItems2 = true;",
                "\t\tconst weightLimit2 = \"+dho\\tiL7@HY.nn(l§u!2 N>XR§BoWKu$L2o/X|ll7{W:/^q;q[6^9l}ssWF{\\nL;8^h&EE\\\"\\n^esoC3c7HN/=ui&xRY!\";",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst anon4 = [arrayElement2]",
                "\t\tconst anon5 = \"s'w+Z*7qy>SO{V\\\"=e()7ui±.G_:jQV)KA,|#2wYJg0\\\"-*&GF//B`]/*[d8f5Q&y(fS$O_u:4QVmdioK5&62 \";",
                "\t\tconst knapsack2 = new Knapsack(possibleItems2, weightLimit2, anon4, anon5)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack2.sortPossibleItemsByValuePerWeightRatio()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = null;",
                "\t\tconst weightLimit = false;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst totalWeightReturnValue = await knapsack.totalWeight",
                "\t\tconst possibleItems1 = null;",
                "\t\tconst weightLimit1 = false;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack1.solveZeroOneKnapsackProblem()",
                "\t\tconst possibleItems2 = null;",
                "\t\tconst weightLimit2 = false;",
                "\t\tconst knapsack2 = new Knapsack(possibleItems2, weightLimit2)",
                "\t\tconst sortPossibleItemsByValueReturnValue = await knapsack2.sortPossibleItemsByValue()",
                "\t\tconst possibleItems3 = null;",
                "\t\tconst weightLimit3 = false;",
                "\t\tconst knapsack3 = new Knapsack(possibleItems3, weightLimit3)",
                "\t\tconst anon = \",k+tzfSBk7§mw=|,(Y±$3;=Z-iI\";",
                "\t\tconst sortPossibleItemsByValueReturnValue1 = await knapsack3.sortPossibleItemsByValue(anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"1011110000000000\";",
                "\t\tconst weightLimit = null;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = \"101110000000000\";",
                "\t\tconst weightLimit1 = null;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst anon = () => {};",
                "\t\tconst sortPossibleItemsByValueReturnValue = await knapsack1.sortPossibleItemsByValue(anon)",
                "\t\tconst possibleItems2 = undefined;",
                "\t\tconst anon1 = 11;",
                "\t\tconst knapsack2 = new Knapsack(possibleItems2, anon1)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack2.solveZeroOneKnapsackProblem()",
                "\t\tconst possibleItems3 = \"1011110000000000\";",
                "\t\tconst anon2 = 11;",
                "\t\tconst knapsack3 = new Knapsack(possibleItems3, anon2)",
                "\t\tconst anon3 = 11;",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack3.solveUnboundedKnapsackProblem(anon3)",
                "\t\tconst possibleItems4 = \"1011110000000000\";",
                "\t\tconst weightLimit2 = null;",
                "\t\tconst knapsack4 = new Knapsack(possibleItems4, weightLimit2)",
                "\t\tconst sortPossibleItemsByValueReturnValue1 = await knapsack4.sortPossibleItemsByValue()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {dot} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {t} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {zeros} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = 3;",
                "\t\tconst arrayElement1 = 67;",
                "\t\tconst arrayElement2 = 14;",
                "\t\tconst mShape = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst anon = null;",
                "\t\tconst arrayElement3 = () => {};",
                "\t\tconst arrayElement4 = \"./countSetBits\";",
                "\t\tconst arrayElement5 = -405.1263586045593;",
                "\t\tconst anon1 = [arrayElement3, arrayElement4, arrayElement5]",
                "\t\tconst zerosReturnValue = await zeros(mShape, anon, anon1)",
                "\t\tconst arrayElement6 = () => {};",
                "\t\tconst arrayElement7 = \"./countSetBits\";",
                "\t\tconst arrayElement8 = -405.1263586045593;",
                "\t\tconst anon2 = [arrayElement6, arrayElement7, arrayElement8]",
                "\t\tconst arrayElement9 = () => {};",
                "\t\tconst arrayElement10 = \"./countSetBits\";",
                "\t\tconst arrayElement11 = -405.1263586045593;",
                "\t\tconst anon3 = [arrayElement9, arrayElement10, arrayElement11]",
                "\t\tconst dotReturnValue = await dot(anon2, anon3)",
                "\t\tconst arrayElement12 = \"./countSetBits\";",
                "\t\tconst arrayElement13 = () => {};",
                "\t\tconst arrayElement14 = \"./countSetBits\";",
                "\t\tconst arrayElement15 = -405.1263586045593;",
                "\t\tconst anon4 = [arrayElement13, arrayElement14, arrayElement15]",
                "\t\tconst arrayElement16 = 219.2959096160489;",
                "\t\tconst arrayElement17 = () => {};",
                "\t\tconst m = [arrayElement12, anon4, arrayElement16, arrayElement17]",
                "\t\tconst tReturnValue = await t(m)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash13": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Function.initSortingCallbacks (javascript-algorithms/src/algorithms/sorting/Sort.js:25:30)\n    at new construct (javascript-algorithms/src/algorithms/sorting/Sort.js:13:27)\n    at CountingSort.apply (javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js:16:125)\n    at new CountingSort (javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js:16:158)\n    at call (.syntest/tests/tempTest.spec.js:13:71)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot create property 'compareCallback' on number '-600.415534042658'",
            "TypeError: Cannot create property 'compareCallback' on boolean 'true'",
            "TypeError: Cannot create property 'compareCallback' on string '../algorithms/math/factorial/factorial'",
            "TypeError: Cannot create property 'compareCallback' on string 'Items must not be empty'",
            "TypeError: Cannot create property 'compareCallback' on number '-688.6913524785332'"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import CountingSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js\";",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import depthFirstSearch from \"../instrumented/javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst value = true;",
                "\t\tconst anon = {}",
                "\t\tconst graph = new GraphVertex(value, anon)",
                "\t\tconst startVertex = null;",
                "\t\tconst anon1 = -600.415534042658;",
                "\t\tconst callbacks = new CountingSort(anon1)",
                "\t\tconst anon2 = 402;",
                "\t\tconst anon3 = 11;",
                "\t\tconst depthFirstSearchReturnValue = await depthFirstSearch(graph, startVertex, callbacks, anon2, anon3)",
                "\t\tconst value1 = true;",
                "\t\tconst anon4 = {}",
                "\t\tconst graph1 = new GraphVertex(value1, anon4)",
                "\t\tconst getEdgesReturnValue = await graph1.getEdges()",
                "\t\tconst value2 = true;",
                "\t\tconst anon5 = {}",
                "\t\tconst graph2 = new GraphVertex(value2, anon5)",
                "\t\tconst vertex = \"Matrices have incompatible shape for multiplication\";",
                "\t\tconst anon6 = () => {};",
                "\t\tconst hasNeighborReturnValue = await graph2.hasNeighbor(vertex, anon6)",
                "\t\tconst value3 = true;",
                "\t\tconst anon7 = {}",
                "\t\tconst graph3 = new GraphVertex(value3, anon7)",
                "\t\tconst vertex1 = \"lmh$_c*}e\";",
                "\t\tconst anon8 = {}",
                "\t\tconst hasNeighborReturnValue1 = await graph3.hasNeighbor(vertex1, anon8)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import CountingSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst countingSort = new CountingSort(assignment)",
                "\t\tconst countingSort1 = new CountingSort()",
                "\t\tconst arrayElement = \"Tuj1{^O§m~'{9N9Z^K§p~orkroa|w#'±T'9Z)hjNzL<\\tzL(BM1\\\"Puo/R*@ICxww`N-go8Y'nG~Ap,\\tb\";",
                "\t\tconst originalArray = [arrayElement]",
                "\t\tconst assignment1 = true;",
                "\t\tconst assignment2 = undefined;",
                "\t\tconst anon = -480;",
                "\t\tconst anon1 = undefined;",
                "\t\tconst sortReturnValue = await countingSort1.sort(originalArray, assignment1, assignment2, anon, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import CountingSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = \"../algorithms/math/factorial/factorial\";",
                "\t\tconst countingSort = new CountingSort(anon)",
                "\t\tconst countingSort1 = new CountingSort()",
                "\t\tconst forEach = () => {};",
                "\t\tconst localLength = 935;",
                "\t\tconst originalArray = {",
                "\t\t\t\"forEach\": forEach,",
                "\t\t\t\"length\": localLength",
                "\t\t}",
                "\t\tconst assignment = 1.7976931348623157e+308;",
                "\t\tconst assignment1 = false;",
                "\t\tconst sortReturnValue = await countingSort1.sort(originalArray, assignment, assignment1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import CountingSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = \"Items must not be empty\";",
                "\t\tconst localLength = 730.8622779157381;",
                "\t\tconst countingSort = new CountingSort(anon, localLength)",
                "\t\tconst countingSort1 = new CountingSort()",
                "\t\tconst forEach = () => {};",
                "\t\tconst localLength1 = 730.8622779157381;",
                "\t\tconst originalArray = {",
                "\t\t\t\"forEach\": forEach,",
                "\t\t\t\"length\": localLength1",
                "\t\t}",
                "\t\tconst assignment = -580;",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst anon1 = true;",
                "\t\tconst sortReturnValue = await countingSort1.sort(originalArray, assignment, assignment1, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import CountingSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst countingSort = new CountingSort()",
                "\t\tconst anon = -688.6913524785332;",
                "\t\tconst countingSort1 = new CountingSort(anon)",
                "\t\tconst anon1 = -480;",
                "\t\tconst originalArray = [anon1]",
                "\t\tconst assignment = true;",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst anon2 = -480;",
                "\t\tconst anon3 = undefined;",
                "\t\tconst sortReturnValue = await countingSort1.sort(originalArray, assignment, assignment1, anon2, anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash14": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Function.initSortingCallbacks (javascript-algorithms/src/algorithms/sorting/Sort.js:25:30)\n    at new construct (javascript-algorithms/src/algorithms/sorting/Sort.js:13:27)\n    at RadixSort.apply (javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js:1:28)\n    at new depthFirstSearchReturnValue (javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js:8:31)\n    at call (.syntest/tests/tempTest.spec.js:24:9)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: Cannot create property 'compareCallback' on string '#9_'",
            "TypeError: Cannot create property 'compareCallback' on string '#_'",
            "TypeError: Cannot create property 'compareCallback' on string '1100000000111011001010000000000000000000000000000000000000000000'",
            "TypeError: Cannot create property 'compareCallback' on number '0.25'",
            "TypeError: Cannot create property 'compareCallback' on string ';+SDE'",
            "TypeError: Cannot create property 'compareCallback' on number '5'",
            "TypeError: Cannot create property 'compareCallback' on number '94.49076598608576'",
            "TypeError: Cannot create property 'compareCallback' on string '../utils/imageData'",
            "TypeError: Cannot create property 'compareCallback' on string '../BinaryTreeNode'",
            "TypeError: Cannot create property 'compareCallback' on string '0011111010011}011001100110011010'",
            "TypeError: Cannot create property 'compareCallback' on number '-699.1859255191646'",
            "TypeError: Cannot create property 'compareCallback' on string '0011111111001001100110011001100110011001100110011001100110011010'",
            "TypeError: Cannot create property 'compareCallback' on boolean 'true'",
            "TypeError: Cannot create property 'compareCallback' on string '0111101111111111'",
            "TypeError: Cannot create property 'compareCallback' on string '-S?'",
            "TypeError: Cannot create property 'compareCallback' on number '11'",
            "TypeError: Cannot create property 'compareCallback' on string 'q'"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BinaryTreeNode from \"../instrumented/javascript-algorithms/src/data-structures/tree/BinaryTreeNode.js\";",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "import detectDirectedCycle from \"../instrumented/javascript-algorithms/src/algorithms/graph/detect-cycle/detectDirectedCycle.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst detectDirectedCycleReturnValue = await detectDirectedCycle(graph)",
                "\t\tconst assignment1 = true;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst getWeightReturnValue = await graph1.getWeight()",
                "\t\tconst assignment2 = true;",
                "\t\tconst graph2 = new Graph(assignment2)",
                "\t\tconst anon = \"#9_\";",
                "\t\tconst startVertex = new RadixSort(anon)",
                "\t\tconst endVertex = \"F9@qF{_OBC\\nz$cSu!6^MlRUDQg/<5+/cFrw±A\";",
                "\t\tconst assignment3 = 0.75;",
                "\t\tconst startVertex1 = new GraphEdge(startVertex, endVertex, assignment3)",
                "\t\tconst assignment4 = undefined;",
                "\t\tconst endVertex1 = new BinaryTreeNode(assignment4)",
                "\t\tconst findEdgeReturnValue = await graph2.findEdge(startVertex1, endVertex1)",
                "\t\tconst assignment5 = true;",
                "\t\tconst graph3 = new Graph(assignment5)",
                "\t\tconst anon1 = \"#9_\";",
                "\t\tconst startVertex2 = new RadixSort(anon1)",
                "\t\tconst endVertex2 = \"F9@qF{_OBC\\nz$cSu!6^MlRUDQg/<5+/cFrw±A\";",
                "\t\tconst assignment6 = 0.75;",
                "\t\tconst startVertex3 = new GraphEdge(startVertex2, endVertex2, assignment6)",
                "\t\tconst anon2 = null;",
                "\t\tconst addEdgeReturnValue = await graph3.addEdge(startVertex3, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BinaryTreeNode from \"../instrumented/javascript-algorithms/src/data-structures/tree/BinaryTreeNode.js\";",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "import detectDirectedCycle from \"../instrumented/javascript-algorithms/src/algorithms/graph/detect-cycle/detectDirectedCycle.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst detectDirectedCycleReturnValue = await detectDirectedCycle(graph)",
                "\t\tconst assignment1 = true;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst getWeightReturnValue = await graph1.getWeight()",
                "\t\tconst assignment2 = true;",
                "\t\tconst graph2 = new Graph(assignment2)",
                "\t\tconst anon = \"#_\";",
                "\t\tconst startVertex = new RadixSort(anon)",
                "\t\tconst endVertex = \"F9@qF{_OBC\\nz$cSu!6^MlRUDQg/<5+/cFrw±A\";",
                "\t\tconst assignment3 = 0.75;",
                "\t\tconst startVertex1 = new GraphEdge(startVertex, endVertex, assignment3)",
                "\t\tconst assignment4 = undefined;",
                "\t\tconst endVertex1 = new BinaryTreeNode(assignment4)",
                "\t\tconst findEdgeReturnValue = await graph2.findEdge(startVertex1, endVertex1)",
                "\t\tconst assignment5 = true;",
                "\t\tconst graph3 = new Graph(assignment5)",
                "\t\tconst anon1 = \"#9_\";",
                "\t\tconst startVertex2 = new RadixSort(anon1)",
                "\t\tconst endVertex2 = \"F9@qF{_OBC\\nz$cSu!6^MlRUDQg/<5+/cFrw±A\";",
                "\t\tconst assignment6 = 0.75;",
                "\t\tconst startVertex3 = new GraphEdge(startVertex2, endVertex2, assignment6)",
                "\t\tconst anon2 = null;",
                "\t\tconst addEdgeReturnValue = await graph3.addEdge(startVertex3, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BinaryTreeNode from \"../instrumented/javascript-algorithms/src/data-structures/tree/BinaryTreeNode.js\";",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "import RedBlackTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js\";",
                "import floydWarshall from \"../instrumented/javascript-algorithms/src/algorithms/graph/floyd-warshall/floydWarshall.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst floydWarshallReturnValue = await floydWarshall(graph)",
                "\t\tconst anon = new RedBlackTree()",
                "\t\tconst assignment1 = -216.70434218097887;",
                "\t\tconst anon1 = {}",
                "\t\tconst grandParentNode = new BinaryTreeNode(assignment1, anon1)",
                "\t\tconst anon2 = \"1100000000111011001010000000000000000000000000000000000000000000\";",
                "\t\tconst anon3 = \"../../../data-structures/stack/Stack\";",
                "\t\tconst anon4 = new RadixSort(anon2, anon3)",
                "\t\tconst leftLeftRotationReturnValue = await anon.leftLeftRotation(grandParentNode, anon4)",
                "\t\tconst anon5 = new RedBlackTree()",
                "\t\tconst anon6 = {}",
                "\t\tconst leftLeftRotationReturnValue1 = await anon5.leftLeftRotation(anon6)",
                "\t\tconst anon7 = \"1100000000111011001010000000000000000000000000000000000000000000\";",
                "\t\tconst anon8 = \"../../../data-structures/stack/Stack\";",
                "\t\tconst anon9 = new RadixSort(anon7, anon8)",
                "\t\tconst arrayElement = 67;",
                "\t\tconst arrayElement1 = 10344;",
                "\t\tconst array = [arrayElement, arrayElement1]",
                "\t\tconst anon10 = undefined;",
                "\t\tconst isArrayOfNumbersReturnValue = await anon9.isArrayOfNumbers(array, anon10)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = undefined;",
                "\t\tconst weightLimit = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon = undefined;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst anon1 = null;",
                "\t\tconst anon2 = 0.25;",
                "\t\tconst knapsack1 = new Knapsack(anon1, anon2)",
                "\t\tconst anon3 = null;",
                "\t\tconst anon4 = 0.25;",
                "\t\tconst anon5 = new RadixSort(anon4)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio(anon3, anon5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = undefined;",
                "\t\tconst weightLimit = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon = undefined;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = undefined;",
                "\t\tconst weightLimit1 = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon1 = undefined;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst anon2 = null;",
                "\t\tconst anon3 = \";+SDE\";",
                "\t\tconst anon4 = new RadixSort(anon3)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio(anon2, anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = undefined;",
                "\t\tconst weightLimit = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon = undefined;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = undefined;",
                "\t\tconst weightLimit1 = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon1 = undefined;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst anon2 = null;",
                "\t\tconst anon3 = 5;",
                "\t\tconst anon4 = new RadixSort(anon3)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio(anon2, anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = undefined;",
                "\t\tconst weightLimit = \"g±±sPk@@5:Eq`I| fhz\";",
                "\t\tconst anon = undefined;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = undefined;",
                "\t\tconst weightLimit1 = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon1 = undefined;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst anon2 = null;",
                "\t\tconst arrayElement = 94.49076598608576;",
                "\t\tconst anon3 = new RadixSort(arrayElement)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio(anon2, anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = undefined;",
                "\t\tconst weightLimit = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon = undefined;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = undefined;",
                "\t\tconst weightLimit1 = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon1 = undefined;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst anon2 = null;",
                "\t\tconst anon3 = \"../utils/imageData\";",
                "\t\tconst anon4 = new RadixSort(anon3)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio(anon2, anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = undefined;",
                "\t\tconst weightLimit = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon = undefined;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = undefined;",
                "\t\tconst weightLimit1 = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst arrayElement = \"s,T#x±/x%tofen\\n$O:y/[]CDHU=:!hf(mDl#±6RHb;2/=AY0Q[o8^5eX{)1^>{ Tl0dLg{J\";",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, arrayElement)",
                "\t\tconst anon1 = null;",
                "\t\tconst anon2 = \"../BinaryTreeNode\";",
                "\t\tconst anon3 = new RadixSort(anon2)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio(anon1, anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = undefined;",
                "\t\tconst weightLimit = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon = undefined;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = undefined;",
                "\t\tconst weightLimit1 = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon1 = undefined;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst anon2 = null;",
                "\t\tconst arrayElement = \"0011111010011}011001100110011010\";",
                "\t\tconst anon3 = new RadixSort(arrayElement)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio(anon2, anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = undefined;",
                "\t\tconst weightLimit = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon = undefined;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = undefined;",
                "\t\tconst weightLimit1 = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon1 = undefined;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst anon2 = null;",
                "\t\tconst anon3 = -699.1859255191646;",
                "\t\tconst anon4 = new RadixSort(anon3)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio(anon2, anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"1011110000000000\";",
                "\t\tconst weightLimit = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon = undefined;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = undefined;",
                "\t\tconst weightLimit1 = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon1 = undefined;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst anon2 = null;",
                "\t\tconst anon3 = \"0011111111001001100110011001100110011001100110011001100110011010\";",
                "\t\tconst anon4 = new RadixSort(anon3)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio(anon2, anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = undefined;",
                "\t\tconst weightLimit = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon = undefined;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = undefined;",
                "\t\tconst weightLimit1 = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon1 = undefined;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst anon2 = null;",
                "\t\tconst anon3 = true;",
                "\t\tconst anon4 = new RadixSort(anon3)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio(anon2, anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = undefined;",
                "\t\tconst weightLimit = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon = undefined;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = undefined;",
                "\t\tconst weightLimit1 = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon1 = undefined;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst anon2 = null;",
                "\t\tconst anon3 = \"0111101111111111\";",
                "\t\tconst anon4 = new RadixSort(anon3)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio(anon2, anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = undefined;",
                "\t\tconst weightLimit = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon = undefined;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = undefined;",
                "\t\tconst weightLimit1 = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon1 = undefined;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst anon2 = null;",
                "\t\tconst anon3 = \"-S?\";",
                "\t\tconst anon4 = new RadixSort(anon3)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio(anon2, anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = undefined;",
                "\t\tconst weightLimit = \"g±±sPk@j5:Eq`I| fhz\";",
                "\t\tconst anon = undefined;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = undefined;",
                "\t\tconst weightLimit1 = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon1 = undefined;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst anon2 = null;",
                "\t\tconst anon3 = 11;",
                "\t\tconst anon4 = new RadixSort(anon3)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio(anon2, anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import RadixSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/radix-sort/RadixSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = undefined;",
                "\t\tconst weightLimit = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon = undefined;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = undefined;",
                "\t\tconst weightLimit1 = \"g±±sPk@`5:Eq`I| fhz\";",
                "\t\tconst anon1 = undefined;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst anon2 = true;",
                "\t\tconst anon3 = \"q\";",
                "\t\tconst anon4 = new RadixSort(anon3)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio(anon2, anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash15": {
        "crashProject": "javascript-algorithms",
        "trace": "    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:81:39)\n    at SegmentTree.buildSegmentTree (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:52:10)\n    at new SegmentTree (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:17:10)\n    at _callee$ (.syntest/tests/tempTest.spec.js:18:23)\n    at tryCatch (.syntest/tests/tempTest.spec.js:7:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:7:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:7:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:7:130)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: this.operation is not a function",
            "TypeError: Cannot read properties of null (reading 'length')",
            "TypeError: originalArray.slice is not a function",
            "TypeError: Cannot read properties of undefined (reading 'length')",
            "RangeError: Invalid array length"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import SegmentTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js\";",
                "import detectDirectedCycle from \"../instrumented/javascript-algorithms/src/algorithms/graph/detect-cycle/detectDirectedCycle.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = 781;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst assignment1 = 781;",
                "\t\tconst assignment2 = 781;",
                "\t\tconst anon = \"@ v{vS5_r<W&FF@<Ua?h*Mq'NF=±<GdM.&0A;6saZdG<uL|;6%ewH_±%DX-MqMstTN6%8±k~Yd${yrW\";",
                "\t\tconst inputArray = [assignment2, anon]",
                "\t\tconst operation = null;",
                "\t\tconst operationFallback = null;",
                "\t\tconst arrayElement = new SegmentTree(inputArray, operation, operationFallback)",
                "\t\tconst anon1 = [assignment1, arrayElement]",
                "\t\tconst detectDirectedCycleReturnValue = await detectDirectedCycle(graph, anon1)",
                "\t\tconst assignment3 = undefined;",
                "\t\tconst anon2 = \"@ v{vS5_r<W&FF@<Ua?h*Mq'NF=±<GdM.&0A;6saZdG<uL|;6%ewH_±%DX-MqMstTN6%8±k~Yd${yrW\";",
                "\t\tconst anon3 = \"$shHry= acx!'7§[;\\nv*=\\nYyZ7#`4f$'/ANGCXApIJy(IJKm`=QZfR,+qCf}h\";",
                "\t\tconst graph1 = new Graph(assignment3, anon2, anon3)",
                "\t\tconst localToStringReturnValue = await graph1.toString()",
                "\t\tconst assignment4 = 781;",
                "\t\tconst graph2 = new Graph(assignment4)",
                "\t\tconst edge = 18;",
                "\t\tconst deleteEdgeReturnValue = await graph2.deleteEdge(edge)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = null;",
                "\t\tconst weightLimit = 366;",
                "\t\tconst arrayElement = 37;",
                "\t\tconst arrayElement1 = [arrayElement]",
                "\t\tconst arrayElement2 = undefined;",
                "\t\tconst anon = [arrayElement1, arrayElement2]",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack.solveUnboundedKnapsackProblem()",
                "\t\tconst possibleItems1 = null;",
                "\t\tconst weightLimit1 = 366;",
                "\t\tconst arrayElement3 = 37;",
                "\t\tconst arrayElement4 = [arrayElement3]",
                "\t\tconst arrayElement5 = undefined;",
                "\t\tconst anon1 = [arrayElement4, arrayElement5]",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst anon2 = () => {};",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack1.solveZeroOneKnapsackProblem(anon2)",
                "\t\tconst possibleItems2 = null;",
                "\t\tconst weightLimit2 = 366;",
                "\t\tconst arrayElement6 = 37;",
                "\t\tconst arrayElement7 = [arrayElement6]",
                "\t\tconst arrayElement8 = undefined;",
                "\t\tconst anon3 = [arrayElement7, arrayElement8]",
                "\t\tconst knapsack2 = new Knapsack(possibleItems2, weightLimit2, anon3)",
                "\t\tconst anon4 = true;",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue1 = await knapsack2.solveZeroOneKnapsackProblem(anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import DisjointSetItem from \"../instrumented/javascript-algorithms/src/data-structures/disjoint-set/DisjointSetItem.js\";",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = 3.4028234663852886e+38;",
                "\t\tconst weightLimit = false;",
                "\t\tconst arrayElement = \"../matrix/Matrix\";",
                "\t\tconst arrayElement1 = {}",
                "\t\tconst arrayElement2 = \"s,T#x±/x%tofen\\n$O:y/[]CDHU=:!hf(mDl#±6RHb;2/=AY0Q[o8^5eX{)1^>{ Tl0dLg{J\";",
                "\t\tconst value = false;",
                "\t\tconst arrayElement3 = [arrayElement1, arrayElement2, value]",
                "\t\tconst anon = [arrayElement, arrayElement3]",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack.solveUnboundedKnapsackProblem()",
                "\t\tconst value1 = false;",
                "\t\tconst keyCallback = (startVertex, endVertex, Assignment) => {};",
                "\t\tconst anon1 = 0.25;",
                "\t\tconst anon2 = \"1011111110111001100110011001100110011001100110011001100110011010\";",
                "\t\tconst anon3 = new DisjointSetItem(value1, keyCallback, anon1, anon2)",
                "\t\tconst isRootReturnValue = await anon3.isRoot()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = undefined;",
                "\t\tconst weightLimit = {}",
                "\t\tconst anon = 0.33333;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack.solveUnboundedKnapsackProblem()",
                "\t\tconst possibleItems1 = undefined;",
                "\t\tconst weightLimit1 = {}",
                "\t\tconst anon1 = 0.33333;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {walk} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {zeros} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = 340.26768586488447;",
                "\t\tconst mShape = [arrayElement]",
                "\t\tconst anon = {}",
                "\t\tconst zerosReturnValue = await zeros(mShape, anon)",
                "\t\tconst localLength = 32;",
                "\t\tconst m = {",
                "\t\t\t\"length\": localLength",
                "\t\t}",
                "\t\tconst localVisit = (cellIndices, cellValue) => {};",
                "\t\tconst walkReturnValue = await walk(m, localVisit)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash16": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Object.enterVertex (javascript-algorithms/src/algorithms/graph/detect-cycle/detectUndirectedCycle.js:32:86)\n    at depthFirstSearchRecursive (javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js:49:13)\n    at depthFirstSearch (javascript-algorithms/src/algorithms/graph/depth-first-search/depthFirstSearch.js:67:3)\n    at anon (javascript-algorithms/src/algorithms/graph/detect-cycle/detectUndirectedCycle.js:56:19)\n    at _callee$ (.syntest/tests/tempTest.spec.js:14:40)\n    at tryCatch (.syntest/tests/tempTest.spec.js:6:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:6:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:6:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:7:1)\n    at _next (.syntest/tests/tempTest.spec.js:7:130)\n    at .syntest/tests/tempTest.spec.js:7:130\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:7:130)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading 'getKey')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import detectUndirectedCycle from \"../instrumented/javascript-algorithms/src/algorithms/graph/detect-cycle/detectUndirectedCycle.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = undefined;",
                "\t\tconst anon = true;",
                "\t\tconst graph = new Graph(assignment, anon)",
                "\t\tconst anon1 = undefined;",
                "\t\tconst detectUndirectedCycleReturnValue = await detectUndirectedCycle(graph, anon1)",
                "\t\tconst getAllVertices = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"getAllVertices\": getAllVertices",
                "\t\t}",
                "\t\tconst detectUndirectedCycleReturnValue1 = await detectUndirectedCycle(graph1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash17": {
        "crashProject": "javascript-algorithms",
        "trace": "    at map (javascript-algorithms/src/algorithms/graph/hamiltonian-cycle/hamiltonianCycle.js:64:155)\n    at Array.map (<anonymous>)\n    at hamiltonianCycleRecursive (javascript-algorithms/src/algorithms/graph/hamiltonian-cycle/hamiltonianCycle.js:64:61)\n    at hamiltonianCycle (javascript-algorithms/src/algorithms/graph/hamiltonian-cycle/hamiltonianCycle.js:124:27)\n    at call (.syntest/tests/tempTest.spec.js:12:58)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading 'value')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import hamiltonianCycle from \"../instrumented/javascript-algorithms/src/algorithms/graph/hamiltonian-cycle/hamiltonianCycle.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = undefined;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst anon = \"[X\\n-.Oi/p.AEj\\tvTjO&a±(<}}c@wfd-spW+-KrnshJ;1w:tsM#\";",
                "\t\tconst hamiltonianCycleReturnValue = await hamiltonianCycle(graph, anon)",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst graph1 = new Graph(assignment1)",
                "\t\tconst getKey = () => {};",
                "\t\tconst newVertex = {",
                "\t\t\t\"getKey\": getKey",
                "\t\t}",
                "\t\tconst addVertexReturnValue = await graph1.addVertex(newVertex)",
                "\t\tconst assignment2 = undefined;",
                "\t\tconst graph2 = new Graph(assignment2)",
                "\t\tconst getAdjacencyMatrixReturnValue = await graph2.getAdjacencyMatrix()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash18": {
        "crashProject": "javascript-algorithms",
        "trace": "    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:81:39)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildSegmentTree (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:52:10)\n    at new SegmentTree (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:17:10)\n    at _callee$ (.syntest/tests/tempTest.spec.js:13:69)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.Promise [as next] (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:1:1)\n    at .syntest/tests/tempTest.spec.js:1:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:1:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: this.operation is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import SegmentTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js\";",
                "import hamiltonianCycle from \"../instrumented/javascript-algorithms/src/algorithms/graph/hamiltonian-cycle/hamiltonianCycle.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = true;",
                "\t\tconst inputArray = \"$OaKMo3+Of>A[ria!47QMRyKkSk*=~!f pAw\\\"J4TQjgcJny65'@ N)vS=R'P_mi<S:(N]m(kYwhIt,!z\";",
                "\t\tconst operation = false;",
                "\t\tconst assignment1 = true;",
                "\t\tconst anon = 0.2;",
                "\t\tconst anon1 = new SegmentTree(inputArray, operation, assignment1, anon)",
                "\t\tconst graph = new Graph(assignment, anon1)",
                "\t\tconst hamiltonianCycleReturnValue = await hamiltonianCycle(graph)",
                "\t\tconst anon2 = {}",
                "\t\tconst anon3 = 0.2;",
                "\t\tconst hamiltonianCycleReturnValue1 = await hamiltonianCycle(anon2, anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash19": {
        "crashProject": "javascript-algorithms",
        "trace": "    at _iterableToArray (javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSort.js:1:28)\n    at _toConsumableArray (javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSort.js:1:28)\n    at QuickSort.sort (javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSort.js:10:16)\n    at kruskal (javascript-algorithms/src/algorithms/graph/kruskal/kruskal.js:33:82)\n    at _callee$ (.syntest/tests/tempTest.spec.js:14:27)\n    at tryCatch (.syntest/tests/tempTest.spec.js:4:120)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:4:120)\n    at Generator.next (.syntest/tests/tempTest.spec.js:4:120)\n    at resolve (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at gen (.syntest/tests/tempTest.spec.js:2:1)\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: undefined is not iterable (cannot read property Symbol(Symbol.iterator))"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import kruskal from \"../instrumented/javascript-algorithms/src/algorithms/graph/kruskal/kruskal.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst isDirected = null;",
                "\t\tconst getAllEdges = () => {};",
                "\t\tconst getAllVertices = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"isDirected\": isDirected,",
                "\t\t\t\"getAllEdges\": getAllEdges,",
                "\t\t\t\"getAllVertices\": getAllVertices",
                "\t\t}",
                "\t\tconst kruskalReturnValue = await kruskal(graph)",
                "\t\tconst isDirected1 = null;",
                "\t\tconst getAllEdges1 = () => {};",
                "\t\tconst getAllVertices1 = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"isDirected\": isDirected1,",
                "\t\t\t\"getAllEdges\": getAllEdges1,",
                "\t\t\t\"getAllVertices\": getAllVertices1",
                "\t\t}",
                "\t\tconst kruskalReturnValue1 = await kruskal(graph1)",
                "\t\tconst isDirected2 = null;",
                "\t\tconst getAllEdges2 = () => {};",
                "\t\tconst getAllVertices2 = () => {};",
                "\t\tconst graph2 = {",
                "\t\t\t\"isDirected\": isDirected2,",
                "\t\t\t\"getAllEdges\": getAllEdges2,",
                "\t\t\t\"getAllVertices\": getAllVertices2",
                "\t\t}",
                "\t\tconst kruskalReturnValue2 = await kruskal(graph2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash20": {
        "crashProject": "javascript-algorithms",
        "trace": "    at _iterableToArray (javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSort.js:1:28)\n    at _toConsumableArray (javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSort.js:1:28)\n    at QuickSort.sort (javascript-algorithms/src/algorithms/sorting/quick-sort/QuickSort.js:10:16)\n    at kruskal (javascript-algorithms/src/algorithms/graph/kruskal/kruskal.js:33:82)\n    at call (.syntest/tests/tempTest.spec.js:21:66)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: undefined is not iterable (cannot read property Symbol(Symbol.iterator))"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import kruskal from \"../instrumented/javascript-algorithms/src/algorithms/graph/kruskal/kruskal.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst graph = new Graph(assignment)",
                "\t\tconst arrayElement = undefined;",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst arrayElement2 = 41;",
                "\t\tconst anon = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst kruskalReturnValue = await kruskal(graph, anon)",
                "\t\tconst isDirected = null;",
                "\t\tconst getAllEdges = () => {};",
                "\t\tconst getAllVertices = () => {};",
                "\t\tconst graph1 = {",
                "\t\t\t\"isDirected\": isDirected,",
                "\t\t\t\"getAllEdges\": getAllEdges,",
                "\t\t\t\"getAllVertices\": getAllVertices",
                "\t\t}",
                "\t\tconst kruskalReturnValue1 = await kruskal(graph1)",
                "\t\tconst isDirected1 = null;",
                "\t\tconst getAllEdges1 = () => {};",
                "\t\tconst getAllVertices1 = () => {};",
                "\t\tconst graph2 = {",
                "\t\t\t\"isDirected\": isDirected1,",
                "\t\t\t\"getAllEdges\": getAllEdges1,",
                "\t\t\t\"getAllVertices\": getAllVertices1",
                "\t\t}",
                "\t\tconst kruskalReturnValue2 = await kruskal(graph2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash21": {
        "crashProject": "javascript-algorithms",
        "trace": "    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:81:39)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildSegmentTree (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:52:10)\n    at new _context (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:17:10)\n    at call (.syntest/tests/tempTest.spec.js:16:47)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: this.operation is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import SegmentTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js\";",
                "import kruskal from \"../instrumented/javascript-algorithms/src/algorithms/graph/kruskal/kruskal.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst isDirected = true;",
                "\t\tconst getAllEdges = () => {};",
                "\t\tconst getAllVertices = () => {};",
                "\t\tconst graph = {",
                "\t\t\t\"isDirected\": isDirected,",
                "\t\t\t\"getAllEdges\": getAllEdges,",
                "\t\t\t\"getAllVertices\": getAllVertices",
                "\t\t}",
                "\t\tconst inputArray = \"./QueenPosition\";",
                "\t\tconst operation = false;",
                "\t\tconst operationFallback = undefined;",
                "\t\tconst anon = new SegmentTree(inputArray, operation, operationFallback)",
                "\t\tconst kruskalReturnValue = await kruskal(graph, anon)",
                "\t\tconst inputArray1 = \"./QueenPosition\";",
                "\t\tconst operation1 = false;",
                "\t\tconst operationFallback1 = undefined;",
                "\t\tconst anon1 = new SegmentTree(inputArray1, operation1, operationFallback1)",
                "\t\tconst inputArray2 = \"./QueenPosition\";",
                "\t\tconst rightInputIndex = -469;",
                "\t\tconst position = null;",
                "\t\tconst getAllEdges1 = () => {};",
                "\t\tconst buildTreeRecursivelyReturnValue = await anon1.buildTreeRecursively(inputArray2, rightInputIndex, position, getAllEdges1)",
                "\t\tconst inputArray3 = \"./QueenPosition\";",
                "\t\tconst operation2 = false;",
                "\t\tconst operationFallback2 = undefined;",
                "\t\tconst anon2 = new SegmentTree(inputArray3, operation2, operationFallback2)",
                "\t\tconst rightInputIndex1 = -469;",
                "\t\tconst rightInputIndex2 = -469;",
                "\t\tconst rightInputIndex3 = -469;",
                "\t\tconst rightIndex = 13;",
                "\t\tconst position1 = null;",
                "\t\tconst rangeQueryRecursiveReturnValue = await anon2.rangeQueryRecursive(rightInputIndex1, rightInputIndex2, rightInputIndex3, rightIndex, position1)",
                "\t\tconst inputArray4 = \"./QueenPosition\";",
                "\t\tconst operation3 = false;",
                "\t\tconst operationFallback3 = undefined;",
                "\t\tconst anon3 = new SegmentTree(inputArray4, operation3, operationFallback3)",
                "\t\tconst buildSegmentTreeReturnValue = await anon3.buildSegmentTree()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash22": {
        "crashProject": "javascript-algorithms",
        "trace": "    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:81:39)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildSegmentTree (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:52:10)\n    at new SegmentTree (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:17:10)\n    at _callee$ (.syntest/tests/tempTest.spec.js:13:42)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.Promise [as next] (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:1:1)\n    at .syntest/tests/tempTest.spec.js:1:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:1:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: this.operation is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import SegmentTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js\";",
                "import prim from \"../instrumented/javascript-algorithms/src/algorithms/graph/prim/prim.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = false;",
                "\t\tconst inputArray = \"0011111111001001100110011001100110011001100110011001100110011010\";",
                "\t\tconst operation = 164;",
                "\t\tconst operationFallback = () => {};",
                "\t\tconst anon = new SegmentTree(inputArray, operation, operationFallback)",
                "\t\tconst graph = new Graph(assignment, anon)",
                "\t\tconst primReturnValue = await prim(graph)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash23": {
        "crashProject": "javascript-algorithms",
        "trace": "    at MergeSort.sort (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:15:37)\n    at Knapsack.sortPossibleItemsByValue (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:43:8)\n    at Knapsack.solveUnboundedKnapsackProblem (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:156:10)\n    at _callee$ (.syntest/tests/tempTest.spec.js:18:92)\n    at tryCatch (.syntest/tests/tempTest.spec.js:4:163)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:4:163)\n    at Generator.next (.syntest/tests/tempTest.spec.js:4:163)\n    at resolve (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: originalArray.slice is not a function",
            "RangeError: Invalid array length",
            "TypeError: Cannot read properties of undefined (reading 'length')",
            "TypeError: Cannot read properties of null (reading 'length')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = true;",
                "\t\tconst weightLimit = 60.68046814448758;",
                "\t\tconst anon = () => {};",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalWeightReturnValue = await knapsack.totalWeight",
                "\t\tconst possibleItems1 = true;",
                "\t\tconst weightLimit1 = 60.68046814448758;",
                "\t\tconst anon1 = () => {};",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst anon2 = 554;",
                "\t\tconst anon3 = null;",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack1.solveUnboundedKnapsackProblem(anon2, anon3)",
                "\t\tconst possibleItems2 = true;",
                "\t\tconst weightLimit2 = 60.68046814448758;",
                "\t\tconst anon4 = () => {};",
                "\t\tconst knapsack2 = new Knapsack(possibleItems2, weightLimit2, anon4)",
                "\t\tconst anon5 = {}",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack2.sortPossibleItemsByValuePerWeightRatio(anon5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"4;gM=Jz\";",
                "\t\tconst weightLimit = -681;",
                "\t\tconst anon = 796;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalWeightReturnValue = await knapsack.totalWeight",
                "\t\tconst possibleItems1 = \"4;gM=Jz\";",
                "\t\tconst weightLimit1 = -681;",
                "\t\tconst anon1 = 796;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst anon2 = 1;",
                "\t\tconst sortPossibleItemsByWeightReturnValue = await knapsack1.sortPossibleItemsByWeight(anon2)",
                "\t\tconst possibleItems2 = \"4;gM=Jz\";",
                "\t\tconst weightLimit2 = -681;",
                "\t\tconst anon3 = 796;",
                "\t\tconst knapsack2 = new Knapsack(possibleItems2, weightLimit2, anon3)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack2.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BubbleSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/bubble-sort/BubbleSort.js\";",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"0011111110000000\";",
                "\t\tconst weightLimit = () => {};",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst sortPossibleItemsByValueReturnValue = await knapsack.sortPossibleItemsByValue()",
                "\t\tconst possibleItems1 = \"0011111110000000\";",
                "\t\tconst weightLimit1 = () => {};",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst anon = null;",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack1.solveZeroOneKnapsackProblem(anon)",
                "\t\tconst possibleItems2 = undefined;",
                "\t\tconst weightLimit2 = {}",
                "\t\tconst anon1 = 0.300048828125;",
                "\t\tconst knapsack2 = new Knapsack(possibleItems2, weightLimit2, anon1)",
                "\t\tconst anon2 = new BubbleSort()",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack2.solveUnboundedKnapsackProblem(anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = null;",
                "\t\tconst weightLimit = () => {};",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = null;",
                "\t\tconst weightLimit1 = () => {};",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst anon = -554.9145020594747;",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack1.solveUnboundedKnapsackProblem(anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash24": {
        "crashProject": "javascript-algorithms",
        "trace": "    at map (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:76:14)\n    at Array.map (<anonymous>)\n    at Knapsack.solveZeroOneKnapsackProblem (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:75:85)\n    at _callee$ (.syntest/tests/tempTest.spec.js:12:4)\n    at tryCatch (.syntest/tests/tempTest.spec.js:4:163)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:4:163)\n    at Generator.next (.syntest/tests/tempTest.spec.js:4:163)\n    at resolve (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at gen (.syntest/tests/tempTest.spec.js:2:1)\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "RangeError: Invalid array length"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"/KNt-([IA\\\"x7y§Ke[;|E`Iyjt14'%B#4byQ#:eMia=|!@\\tjL3'AL<TJkU '0\";",
                "\t\tconst weightLimit = undefined;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\tconst possibleItems1 = \"/KNt-([IA\\\"x7y§Ke[;|E`Iyjt14'%B#4byQ#:eMia=|!@\\tjL3'AL<TJkU '0\";",
                "\t\tconst weightLimit1 = undefined;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst sortPossibleItemsByWeightReturnValue = await knapsack1.sortPossibleItemsByWeight()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash25": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Comparator.compare (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:37:64)\n    at Comparator.lessThan (javascript-algorithms/src/utils/comparator/Comparator.js:42:17)\n    at Comparator.lessThanOrEqual (javascript-algorithms/src/utils/comparator/Comparator.js:62:17)\n    at MergeSort.mergeSortedArrays (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:37:27)\n    at MergeSort.sort (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:23:17)\n    at MergeSort.sort (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:20:35)\n    at Knapsack.sortPossibleItemsByValue (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:43:8)\n    at Knapsack.solveZeroOneKnapsackProblem (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:67:10)\n    at _callee$ (.syntest/tests/tempTest.spec.js:13:90)\n    at tryCatch (.syntest/tests/tempTest.spec.js:4:163)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:4:163)\n    at Generator.next (.syntest/tests/tempTest.spec.js:4:163)\n    at resolve (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at gen (.syntest/tests/tempTest.spec.js:2:1)\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot read properties of null (reading 'value')",
            "TypeError: Cannot read properties of undefined (reading 'value')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = \"00111110100110011001100110011010\";",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst arrayElement2 = []",
                "\t\tconst possibleItems = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst weightLimit = true;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = \"00111110100110011001100110011010\";",
                "\t\tconst arrayElement1 = \",MA7cod#_BB*\\n@E>a8Y&F\\nrV\\\\c2gu'WWbu@(YWYq>\";",
                "\t\tconst anon = undefined;",
                "\t\tconst possibleItems = [arrayElement, arrayElement1, anon]",
                "\t\tconst weightLimit = true;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash26": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Comparator.compare (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:37:99)\n    at Comparator.lessThan (javascript-algorithms/src/utils/comparator/Comparator.js:42:17)\n    at Comparator.lessThanOrEqual (javascript-algorithms/src/utils/comparator/Comparator.js:62:17)\n    at MergeSort.mergeSortedArrays (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:37:27)\n    at MergeSort.sort (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:23:17)\n    at MergeSort.sort (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:20:35)\n    at MergeSort.sort (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:20:35)\n    at Knapsack.sortPossibleItemsByValue (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:43:8)\n    at Knapsack.Graph [as solveUnboundedKnapsackProblem] (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:156:10)\n    at _callee$ (.syntest/tests/tempTest.spec.js:20:22)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.Promise [as next] (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:1:1)\n    at .syntest/tests/tempTest.spec.js:1:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:1:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading 'value')",
            "TypeError: Cannot read properties of null (reading 'value')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import DisjointSetItem from \"../instrumented/javascript-algorithms/src/data-structures/disjoint-set/DisjointSetItem.js\";",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import LinkedList from \"../instrumented/javascript-algorithms/src/data-structures/linked-list/LinkedList.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst arrayElement1 = \"JO±iK[fg\\te\\n\";",
                "\t\tconst arrayElement2 = 3.4028234663852886e+38;",
                "\t\tconst arrayElement3 = 65504;",
                "\t\tconst anon = undefined;",
                "\t\tconst possibleItems = [arrayElement, arrayElement1, arrayElement2, arrayElement3, anon]",
                "\t\tconst comparatorFunction = null;",
                "\t\tconst arrayElement4 = new LinkedList(comparatorFunction)",
                "\t\tconst weightLimit = [arrayElement4]",
                "\t\tconst value = false;",
                "\t\tconst keyCallback = (startVertex, endVertex, Assignment) => {};",
                "\t\tconst anon1 = 0.25;",
                "\t\tconst anon2 = \"1011111110111001100110011001100110011001100110011001100110011010\";",
                "\t\tconst anon3 = new DisjointSetItem(value, keyCallback, anon1, anon2)",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon3)",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack.solveUnboundedKnapsackProblem()",
                "\t\tconst value1 = false;",
                "\t\tconst keyCallback1 = (startVertex, endVertex, Assignment) => {};",
                "\t\tconst anon4 = 0.25;",
                "\t\tconst anon5 = \"1011111110111001100110011001100110011001100110011001100110011010\";",
                "\t\tconst anon6 = new DisjointSetItem(value1, keyCallback1, anon4, anon5)",
                "\t\tconst isRootReturnValue = await anon6.isRoot()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import DisjointSetItem from \"../instrumented/javascript-algorithms/src/data-structures/disjoint-set/DisjointSetItem.js\";",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import LinkedList from \"../instrumented/javascript-algorithms/src/data-structures/linked-list/LinkedList.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst arrayElement1 = \"JO±iK[fg\\te\\n\";",
                "\t\tconst arrayElement2 = 3.4028234663852886e+38;",
                "\t\tconst comparatorFunction = null;",
                "\t\tconst arrayElement3 = \"s,T#x±/x%tofen\\n$O:y/[]CDHU=:!hf(mDl#±6RHb;2/=AY0Q[o8^5eX{)1^>{ Tl0dLg{J\";",
                "\t\tconst possibleItems = [arrayElement, arrayElement1, arrayElement2, comparatorFunction, arrayElement3]",
                "\t\tconst comparatorFunction1 = null;",
                "\t\tconst arrayElement4 = new LinkedList(comparatorFunction1)",
                "\t\tconst weightLimit = [arrayElement4]",
                "\t\tconst value = false;",
                "\t\tconst keyCallback = (startVertex, endVertex, Assignment) => {};",
                "\t\tconst anon = 0.25;",
                "\t\tconst anon1 = \"1011111110111001100110011001100110011001100110011001100110011010\";",
                "\t\tconst anon2 = new DisjointSetItem(value, keyCallback, anon, anon1)",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon2)",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack.solveUnboundedKnapsackProblem()",
                "\t\tconst value1 = false;",
                "\t\tconst keyCallback1 = (startVertex, endVertex, Assignment) => {};",
                "\t\tconst anon3 = 0.25;",
                "\t\tconst anon4 = \"1011111110111001100110011001100110011001100110011001100110011010\";",
                "\t\tconst anon5 = new DisjointSetItem(value1, keyCallback1, anon3, anon4)",
                "\t\tconst isRootReturnValue = await anon5.isRoot()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash27": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Comparator.compare (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:37:64)\n    at Comparator.lessThan (javascript-algorithms/src/utils/comparator/Comparator.js:42:17)\n    at Comparator.lessThanOrEqual (javascript-algorithms/src/utils/comparator/Comparator.js:62:17)\n    at MergeSort.mergeSortedArrays (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:37:27)\n    at MergeSort.sort (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:23:17)\n    at Knapsack.sortPossibleItemsByValue (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:43:8)\n    at Knapsack.solveZeroOneKnapsackProblem (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:67:10)\n    at call (.syntest/tests/tempTest.spec.js:12:23)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot read properties of null (reading 'value')",
            "TypeError: Cannot read properties of undefined (reading 'value')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = null;",
                "\t\tconst arrayElement = \",MA7cod#_BB*\\n@E>a8Y&F\\nrV\\\\c2gu'WWbu@(YWYq>\";",
                "\t\tconst arrayElement1 = []",
                "\t\tconst possibleItems = [anon, arrayElement, arrayElement1]",
                "\t\tconst weightLimit = -485;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = undefined;",
                "\t\tconst arrayElement = \",MA7cod#_BB*\\n@E>a8Y&F\\nrV\\\\c2gu'WWbu@(YWYq>\";",
                "\t\tconst arrayElement1 = []",
                "\t\tconst possibleItems = [anon, arrayElement, arrayElement1]",
                "\t\tconst weightLimit = true;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash28": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Comparator.compare (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:37:64)\n    at Comparator.lessThan (javascript-algorithms/src/utils/comparator/Comparator.js:42:17)\n    at Comparator.lessThanOrEqual (javascript-algorithms/src/utils/comparator/Comparator.js:62:17)\n    at MergeSort.mergeSortedArrays (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:37:27)\n    at MergeSort.sort (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:23:17)\n    at Knapsack [as sortPossibleItemsByValue] (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:43:8)\n    at call (.syntest/tests/tempTest.spec.js:19:25)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: Cannot read properties of null (reading 'value')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = null;",
                "\t\tconst arrayElement1 = () => {};",
                "\t\tconst possibleItems = [arrayElement, arrayElement1]",
                "\t\tconst weightLimit = 474;",
                "\t\tconst anon = 2;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst totalWeightReturnValue = await knapsack.totalWeight",
                "\t\tconst arrayElement2 = null;",
                "\t\tconst arrayElement3 = () => {};",
                "\t\tconst possibleItems1 = [arrayElement2, arrayElement3]",
                "\t\tconst weightLimit1 = 474;",
                "\t\tconst anon1 = 2;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon1)",
                "\t\tconst sortPossibleItemsByValueReturnValue = await knapsack1.sortPossibleItemsByValue()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash29": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Comparator.compare (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:53:114)\n    at Comparator.lessThan (javascript-algorithms/src/utils/comparator/Comparator.js:42:17)\n    at Comparator.lessThanOrEqual (javascript-algorithms/src/utils/comparator/Comparator.js:62:17)\n    at MergeSort.mergeSortedArrays (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:37:27)\n    at MergeSort.sort (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:23:17)\n    at MergeSort.sort (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:19:34)\n    at Knapsack.solveZeroOneKnapsackProblemReturnValue (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:59:8)\n    at _callee$ (.syntest/tests/tempTest.spec.js:16:9)\n    at tryCatch (.syntest/tests/tempTest.spec.js:1:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:1:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:1:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:33)\n    at _next (.syntest/tests/tempTest.spec.js:5:43)\n    at .syntest/tests/tempTest.spec.js:5:43\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:5:43)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot read properties of null (reading 'valuePerWeightRatio')",
            "TypeError: Cannot read properties of undefined (reading 'valuePerWeightRatio')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = null;",
                "\t\tconst objectPattern = new InsertionSort(anon)",
                "\t\tconst arrayElement = new KnapsackItem(objectPattern)",
                "\t\tconst anon1 = null;",
                "\t\tconst arrayElement1 = \"11000001110110010100000000000000\";",
                "\t\tconst arrayElement2 = new SelectionSort()",
                "\t\tconst possibleItems = [arrayElement, anon1, arrayElement1, arrayElement2]",
                "\t\tconst weightLimit = false;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst anon2 = \"Uo`u§H-!v.g8,f[m;:4P:?fk[ldA;kV6DfA2Y/=B±A8Q\\nhU§±T~qZ~{X(8hp=F''e±D=>Q^O@g'5ZVLOXYPb _\";",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack.sortPossibleItemsByValuePerWeightRatio(anon2)",
                "\t\tconst anon3 = null;",
                "\t\tconst objectPattern1 = new InsertionSort(anon3)",
                "\t\tconst originalArray = 97;",
                "\t\tconst anon4 = undefined;",
                "\t\tconst weightLimit1 = null;",
                "\t\tconst sortReturnValue = await objectPattern1.sort(originalArray, anon4, weightLimit1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = null;",
                "\t\tconst objectPattern = new InsertionSort(anon)",
                "\t\tconst arrayElement = new KnapsackItem(objectPattern)",
                "\t\tconst anon1 = undefined;",
                "\t\tconst arrayElement1 = \"11000001110110010100000000000000\";",
                "\t\tconst arrayElement2 = new SelectionSort()",
                "\t\tconst possibleItems = [arrayElement, anon1, arrayElement1, arrayElement2]",
                "\t\tconst weightLimit = false;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst anon2 = \"0011111110111001100110011001100110011001100110011001100110011010\";",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack.sortPossibleItemsByValuePerWeightRatio(anon2)",
                "\t\tconst anon3 = null;",
                "\t\tconst objectPattern1 = new InsertionSort(anon3)",
                "\t\tconst originalArray = 97;",
                "\t\tconst anon4 = undefined;",
                "\t\tconst weightLimit1 = false;",
                "\t\tconst sortReturnValue = await objectPattern1.sort(originalArray, anon4, weightLimit1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash30": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Comparator.compare (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:37:99)\n    at Comparator.lessThan (javascript-algorithms/src/utils/comparator/Comparator.js:42:17)\n    at Comparator.lessThanOrEqual (javascript-algorithms/src/utils/comparator/Comparator.js:62:17)\n    at MergeSort.mergeSortedArrays (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:37:27)\n    at MergeSort.sort (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:23:17)\n    at MergeSort.sort (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:19:34)\n    at Knapsack.sortPossibleItemsByValue (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:43:8)\n    at Knapsack.solveUnboundedKnapsackProblem (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:156:10)\n    at _callee$ (.syntest/tests/tempTest.spec.js:25:3)\n    at tryCatch (.syntest/tests/tempTest.spec.js:1:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:1:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:1:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:33)\n    at _next (.syntest/tests/tempTest.spec.js:5:43)\n",
        "errors": [
            "TypeError: Cannot read properties of null (reading 'value')",
            "TypeError: Cannot read properties of undefined (reading 'value')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import InsertionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/insertion-sort/InsertionSort.js\";",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import SelectionSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/selection-sort/SelectionSort.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"1011110111001100110011011001101\";",
                "\t\tconst weightLimit = {}",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\tconst possibleItems1 = \"6}XU\";",
                "\t\tconst weightLimit1 = \"\\\"Y`5iO-7@?~1c/8&X)jl@I}ZOHC\\\\z+tBhF\\\"#{d[@C+%y,CJEB@\\tv5XR*.,0cP\\nD\\nNo±=k\";",
                "\t\tconst anon = \"-g?\";",
                "\t\tconst possibleItems2 = -75;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon, possibleItems2)",
                "\t\tconst sortPossibleItemsByValueReturnValue = await knapsack1.sortPossibleItemsByValue()",
                "\t\tconst anon1 = null;",
                "\t\tconst objectPattern = new InsertionSort(anon1)",
                "\t\tconst arrayElement = new KnapsackItem(objectPattern)",
                "\t\tconst anon2 = null;",
                "\t\tconst arrayElement1 = \"11000001110110010100000000000000\";",
                "\t\tconst arrayElement2 = new SelectionSort()",
                "\t\tconst possibleItems3 = [arrayElement, anon2, arrayElement1, arrayElement2]",
                "\t\tconst weightLimit2 = true;",
                "\t\tconst knapsack2 = new Knapsack(possibleItems3, weightLimit2)",
                "\t\tconst anon3 = true;",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack2.solveUnboundedKnapsackProblem(anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"1011110000000000\";",
                "\t\tconst arrayElement = \"11000001110110010100000000000000\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, arrayElement)",
                "\t\tconst totalValueReturnValue = await knapsack.totalValue",
                "\t\tconst possibleItems1 = \"101110000000000\";",
                "\t\tconst weightLimit = null;",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit)",
                "\t\tconst anon = () => {};",
                "\t\tconst sortPossibleItemsByValueReturnValue = await knapsack1.sortPossibleItemsByValue(anon)",
                "\t\tconst arrayElement1 = \"00111110100110011001100110011010\";",
                "\t\tconst anon1 = undefined;",
                "\t\tconst arrayElement2 = []",
                "\t\tconst possibleItems2 = [arrayElement1, anon1, arrayElement2]",
                "\t\tconst weightLimit1 = true;",
                "\t\tconst knapsack2 = new Knapsack(possibleItems2, weightLimit1)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack2.solveZeroOneKnapsackProblem()",
                "\t\tconst possibleItems3 = \"1011110000000000\";",
                "\t\tconst arrayElement3 = \"11000001110110010100000000000M00\";",
                "\t\tconst knapsack3 = new Knapsack(possibleItems3, arrayElement3)",
                "\t\tconst anon2 = 11;",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack3.solveUnboundedKnapsackProblem(anon2)",
                "\t\tconst possibleItems4 = \"1011110000000000\";",
                "\t\tconst weightLimit2 = null;",
                "\t\tconst knapsack4 = new Knapsack(possibleItems4, weightLimit2)",
                "\t\tconst sortPossibleItemsByValueReturnValue1 = await knapsack4.sortPossibleItemsByValue()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash31": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst sortPossibleItemsByValueReturnValue = await knapsack.sortPossibleItemsByValue()",
                "\t\tconst possibleItems1 = \"./DisjointSetItem\";",
                "\t\tconst weightLimit1 = \"0000000001001100\";",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack1.solveZeroOneKnapsackProblem()",
                "\t\tconst possibleItems2 = \"./DisjointSetItem\";",
                "\t\tconst weightLimit2 = \"0000000001001100\";",
                "\t\tconst knapsack2 = new Knapsack(possibleItems2, weightLimit2)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack2.sortPossibleItemsByValuePerWeightRatio()",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst arrayElement1 = false;",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst possibleItems3 = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst weightLimit3 = -43.21278187898554;",
                "\t\tconst anon = \"igoQ?cgz6\";",
                "\t\tconst knapsack3 = new Knapsack(possibleItems3, weightLimit3, anon)",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack3.solveUnboundedKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash32": {
        "crashProject": "javascript-algorithms",
        "trace": "    at GraphEdge.getKey (javascript-algorithms/src/data-structures/graph/GraphEdge.js:17:45)\n    at GraphEdge.toString (javascript-algorithms/src/data-structures/graph/GraphEdge.js:38:17)\n    at KnapsackItem.DisjointSetItem (javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js:22:131)\n    at _callee$ (.syntest/tests/tempTest.spec.js:21:21)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:1:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:33)\n    at .syntest/tests/tempTest.spec.js:2:33\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:33)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: this.startVertex.getKey is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import CountingSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js\";",
                "import GraphEdge from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphEdge.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import LinkedListNode from \"../instrumented/javascript-algorithms/src/data-structures/linked-list/LinkedListNode.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst startVertex = new CountingSort()",
                "\t\tconst endVertex = \"fEj\\\\k7Zt.zCc#MeQKop)%ppa4{2\\nr/If%Z'Ctg'$bmE;]@=|D*J6ex)>[nPtO#S6C#±7'4VTC±JJaId:K`j/}>v#2L<d:\\\"b<sO\";",
                "\t\tconst assignment = 1e-10;",
                "\t\tconst anon = () => {};",
                "\t\tconst value = new GraphEdge(startVertex, endVertex, assignment, anon)",
                "\t\tconst assignment1 = null;",
                "\t\tconst objectPattern = new LinkedListNode(value, assignment1)",
                "\t\tconst anon1 = \"Edge not found in graph\";",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern, anon1)",
                "\t\tconst totalValueReturnValue = await knapsackItem.totalValue",
                "\t\tconst startVertex1 = new CountingSort()",
                "\t\tconst endVertex1 = \"fEj\\\\k7Zt.zCc#MeQKop)%ppa4{2\\nr/If%Z'Ctg'$bmE;]@=|D*J6ex)>[nPtO#S6C#±7'4VTC±JJaId:K`j/}>v#2L<d:\\\"b<sO\";",
                "\t\tconst assignment2 = 1e-10;",
                "\t\tconst anon2 = () => {};",
                "\t\tconst value1 = new GraphEdge(startVertex1, endVertex1, assignment2, anon2)",
                "\t\tconst anon3 = 23;",
                "\t\tconst reverseReturnValue = await value1.reverse(anon3)",
                "\t\tconst startVertex2 = new CountingSort()",
                "\t\tconst forEach = () => {};",
                "\t\tconst localLength = 851;",
                "\t\tconst originalArray = {",
                "\t\t\t\"forEach\": forEach,",
                "\t\t\t\"length\": localLength",
                "\t\t}",
                "\t\tconst assignment3 = false;",
                "\t\tconst assignment4 = undefined;",
                "\t\tconst sortReturnValue = await startVertex2.sort(originalArray, assignment3, assignment4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash33": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Function.initSortingCallbacks (javascript-algorithms/src/algorithms/sorting/Sort.js:25:30)\n    at new construct (javascript-algorithms/src/algorithms/sorting/Sort.js:13:27)\n    at CountingSort.apply (javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js:16:125)\n    at new CountingSort (javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js:16:158)\n    at _callee$ (.syntest/tests/tempTest.spec.js:20:17)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:1:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:33)\n",
        "errors": [
            "TypeError: Cannot create property 'compareCallback' on boolean 'true'"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import CountingSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import LinkedList from \"../instrumented/javascript-algorithms/src/data-structures/linked-list/LinkedList.js\";",
                "import RedBlackTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst objectPattern = new RedBlackTree()",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern)",
                "\t\tconst valuePerWeightRatioReturnValue = await knapsackItem.valuePerWeightRatio",
                "\t\tconst anon = true;",
                "\t\tconst comparatorFunction = \"0111101111111111\";",
                "\t\tconst anon1 = new LinkedList(comparatorFunction)",
                "\t\tconst objectPattern1 = new CountingSort(anon, anon1)",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern1)",
                "\t\tconst totalWeightReturnValue = await knapsackItem1.totalWeight",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash34": {
        "crashProject": "javascript-algorithms",
        "trace": "    at DisjointSetItem.getKey (javascript-algorithms/src/data-structures/disjoint-set/DisjointSetItem.js:20:19)\n    at DisjointSet.find (javascript-algorithms/src/data-structures/disjoint-set/DisjointSet.js:37:66)\n    at DisjointSet.union (javascript-algorithms/src/data-structures/disjoint-set/DisjointSet.js:54:27)\n    at _callee$ (.syntest/tests/tempTest.spec.js:20:17)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.Promise [as next] (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:1:1)\n    at .syntest/tests/tempTest.spec.js:1:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:1:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: this.keyCallback is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import DisjointSet from \"../instrumented/javascript-algorithms/src/data-structures/disjoint-set/DisjointSet.js\";",
                "import GraphVertex from \"../instrumented/javascript-algorithms/src/data-structures/graph/GraphVertex.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst value = () => {};",
                "\t\tconst keyCallback = new GraphVertex(value)",
                "\t\tconst objectPattern = new DisjointSet(keyCallback)",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern)",
                "\t\tconst value1 = () => {};",
                "\t\tconst keyCallback1 = new GraphVertex(value1)",
                "\t\tconst objectPattern1 = new DisjointSet(keyCallback1)",
                "\t\tconst valueA = \"../Sort\";",
                "\t\tconst value2 = () => {};",
                "\t\tconst unionReturnValue = await objectPattern1.union(valueA, value2)",
                "\t\tconst value3 = () => {};",
                "\t\tconst keyCallback2 = new GraphVertex(value3)",
                "\t\tconst objectPattern2 = new DisjointSet(keyCallback2)",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern2)",
                "\t\tconst localToStringReturnValue = await knapsackItem1.toString()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash35": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Comparator.equal (javascript-algorithms/src/utils/comparator/Comparator.js:32:17)\n    at BinarySearchTreeNode.insert (javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTreeNode.js:22:34)\n    at BinarySearchTree.insert (javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTree.js:19:22)\n    at _callee$ (.syntest/tests/tempTest.spec.js:60:33)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.Promise [as next] (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:1:1)\n",
        "errors": [
            "TypeError: this.compare is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BinarySearchTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTree.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import LinkedList from \"../instrumented/javascript-algorithms/src/data-structures/linked-list/LinkedList.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst nodeValueCompareFunction = \"v#'~YxXXIu`\\\"|neFXQx#:,§$\";",
                "\t\tconst anon = -205;",
                "\t\tconst comparatorFunction = 793;",
                "\t\tconst anon1 = new LinkedList(comparatorFunction)",
                "\t\tconst objectPattern = new BinarySearchTree(nodeValueCompareFunction, anon, anon1)",
                "\t\tconst anon2 = () => {};",
                "\t\tconst anon3 = 5;",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern, anon2, anon3)",
                "\t\tconst totalWeightReturnValue = await knapsackItem.totalWeight",
                "\t\tconst nodeValueCompareFunction1 = \"v#'~YxXXIu`\\\"|neFXQx#:,§$\";",
                "\t\tconst anon4 = -205;",
                "\t\tconst comparatorFunction1 = 793;",
                "\t\tconst anon5 = new LinkedList(comparatorFunction1)",
                "\t\tconst objectPattern1 = new BinarySearchTree(nodeValueCompareFunction1, anon4, anon5)",
                "\t\tconst anon6 = () => {};",
                "\t\tconst anon7 = 5;",
                "\t\tconst knapsackItem1 = new KnapsackItem(objectPattern1, anon6, anon7)",
                "\t\tconst nodeValueCompareFunction2 = \"v#'~YxXXIu`\\\"|neFXQx#:,§$\";",
                "\t\tconst anon8 = -205;",
                "\t\tconst comparatorFunction2 = 793;",
                "\t\tconst anon9 = new LinkedList(comparatorFunction2)",
                "\t\tconst objectPattern2 = new BinarySearchTree(nodeValueCompareFunction2, anon8, anon9)",
                "\t\tconst anon10 = () => {};",
                "\t\tconst anon11 = 5;",
                "\t\tconst knapsackItem2 = new KnapsackItem(objectPattern2, anon10, anon11)",
                "\t\tconst localToStringReturnValue = await knapsackItem2.toString()",
                "\t\tconst nodeValueCompareFunction3 = \"v#'~YxXXIu`\\\"|neFXQx#:,§$\";",
                "\t\tconst anon12 = -205;",
                "\t\tconst comparatorFunction3 = 793;",
                "\t\tconst anon13 = new LinkedList(comparatorFunction3)",
                "\t\tconst objectPattern3 = new BinarySearchTree(nodeValueCompareFunction3, anon12, anon13)",
                "\t\tconst value = {}",
                "\t\tconst anon14 = {}",
                "\t\tconst insertReturnValue = await objectPattern3.insert(value, anon14)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash36": {
        "crashProject": "javascript-algorithms",
        "trace": "    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:191:93)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n    at recWalk (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:197:7)\n",
        "errors": [
            "RangeError: Maximum call stack size exceeded"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {walk} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst m = \"../utils/imageData\";",
                "\t\tconst localVisit = (cellIndices, cellValue) => {};",
                "\t\tconst walkReturnValue = await walk(m, localVisit)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash37": {
        "crashProject": "javascript-algorithms",
        "trace": "    at map (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:98:94)\n    at Array.map (<anonymous>)\n    at generateRecursively (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:98:7)\n    at generate (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:107:10)\n    at _callee$ (.syntest/tests/tempTest.spec.js:12:30)\n    at tryCatch (.syntest/tests/tempTest.spec.js:4:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:4:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:4:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:4:111)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: fill is not a function",
            "RangeError: Invalid array length",
            "TypeError: Cannot read properties of undefined (reading 'length')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {generate} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {mul} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {validateSameShape} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = 15;",
                "\t\tconst mShape = [arrayElement]",
                "\t\tconst arrayElement1 = undefined;",
                "\t\tconst fill = [arrayElement1]",
                "\t\tconst generateReturnValue = await generate(mShape, fill)",
                "\t\tconst localLength = 10;",
                "\t\tconst a = {",
                "\t\t\t\"length\": localLength",
                "\t\t}",
                "\t\tconst localLength1 = 3.4028234663852886e+38;",
                "\t\tconst b = {",
                "\t\t\t\"length\": localLength1",
                "\t\t}",
                "\t\tconst arrayElement2 = 15;",
                "\t\tconst mShape1 = [arrayElement2]",
                "\t\tconst anon = false;",
                "\t\tconst mulReturnValue = await mul(a, b, mShape1, anon)",
                "\t\tconst arrayElement3 = 537.2466876891679;",
                "\t\tconst arrayElement4 = undefined;",
                "\t\tconst fill1 = [arrayElement4]",
                "\t\tconst arrayElement5 = () => {};",
                "\t\tconst a1 = [arrayElement3, fill1, arrayElement5]",
                "\t\tconst b1 = \"f@.wbeMX=+j(=k%4m\\\\ocC3'Av^FT!iF|Wa`nCi!$#~S,\\n%l\\\";[g1:§Yd&B<C]]s.:i§?oA:KNsU\";",
                "\t\tconst validateSameShapeReturnValue = await validateSameShape(a1, b1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {shape} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {zeros} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = 1;",
                "\t\tconst arrayElement1 = -555;",
                "\t\tconst mShape = [arrayElement, arrayElement1]",
                "\t\tconst zerosReturnValue = await zeros(mShape)",
                "\t\tconst m = \"1111101111111111\";",
                "\t\tconst shapeReturnValue = await shape(m)",
                "\t\tconst arrayElement2 = 892.7958148508148;",
                "\t\tconst arrayElement3 = false;",
                "\t\tconst arrayElement4 = 52;",
                "\t\tconst mShape1 = [arrayElement2, arrayElement3, arrayElement4]",
                "\t\tconst zerosReturnValue1 = await zeros(mShape1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {walk} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localVisit = (cellIndices, cellValue) => {};",
                "\t\tconst arrayElement = 0.3;",
                "\t\tconst m = [localVisit, arrayElement]",
                "\t\tconst localVisit1 = (cellIndices, cellValue) => {};",
                "\t\tconst walkReturnValue = await walk(m, localVisit1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash38": {
        "crashProject": "javascript-algorithms",
        "trace": "    at generateRecursively (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:96:14)\n    at generateRecursively (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:102:14)\n    at generateRecursively (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:102:14)\n    at generate (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:107:10)\n    at zeros (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:117:10)\n    at _callee$ (.syntest/tests/tempTest.spec.js:13:25)\n    at tryCatch (.syntest/tests/tempTest.spec.js:4:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:4:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:4:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:4:111)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "RangeError: Invalid array length"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {zeros} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = 321;",
                "\t\tconst arrayElement1 = 0.00000456;",
                "\t\tconst arrayElement2 = 0.24999;",
                "\t\tconst mShape = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst anon = 70;",
                "\t\tconst zerosReturnValue = await zeros(mShape, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash39": {
        "crashProject": "javascript-algorithms",
        "trace": "    at generateRecursively (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:96:14)\n    at generateRecursively (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:102:14)\n    at generateRecursively (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:102:14)\n    at generateRecursively (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:102:14)\n    at generate (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:107:10)\n    at zeros (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:117:10)\n    at _callee$ (.syntest/tests/tempTest.spec.js:17:16)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:1:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:33)\n    at .syntest/tests/tempTest.spec.js:2:33\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:33)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "RangeError: Invalid array length"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import ShellSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/shell-sort/ShellSort.js\";",
                "import {mul} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {zeros} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = 3;",
                "\t\tconst arrayElement1 = 26;",
                "\t\tconst arrayElement2 = 383;",
                "\t\tconst arrayElement3 = 339.9959733934252;",
                "\t\tconst mShape = [arrayElement, arrayElement1, arrayElement2, arrayElement3]",
                "\t\tconst zerosReturnValue = await zeros(mShape)",
                "\t\tconst a = {}",
                "\t\tconst localLength = 20;",
                "\t\tconst b = {",
                "\t\t\t\"length\": localLength",
                "\t\t}",
                "\t\tconst mulReturnValue = await mul(a, b)",
                "\t\tconst arrayElement4 = 26;",
                "\t\tconst arrayElement5 = \"../../../data-structures/stack/Stack\";",
                "\t\tconst arrayElement6 = [arrayElement5]",
                "\t\tconst arrayElement7 = [arrayElement4, arrayElement6]",
                "\t\tconst arrayElement8 = null;",
                "\t\tconst a1 = [arrayElement7, arrayElement8]",
                "\t\tconst anon = null;",
                "\t\tconst b1 = new ShellSort(anon)",
                "\t\tconst mulReturnValue1 = await mul(a1, b1)",
                "\t\tconst anon1 = null;",
                "\t\tconst b2 = new ShellSort(anon1)",
                "\t\tconst arrayElement9 = 26;",
                "\t\tconst arrayElement10 = \"../../../data-structures/stack/Stack\";",
                "\t\tconst arrayElement11 = [arrayElement10]",
                "\t\tconst arrayElement12 = [arrayElement9, arrayElement11]",
                "\t\tconst sortReturnValue = await b2.sort(arrayElement12)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash40": {
        "crashProject": "javascript-algorithms",
        "trace": "    at generateRecursively (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:96:14)\n    at generateRecursively (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:102:14)\n    at generateRecursively (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:102:14)\n    at generate (javascript-algorithms/src/algorithms/math/matrix/Matrix.js:107:10)\n    at call (.syntest/tests/tempTest.spec.js:23:29)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "RangeError: Invalid array length",
            "TypeError: Cannot read properties of undefined (reading 'length')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {generate} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {mul} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localLength = -325;",
                "\t\tconst slice = () => {};",
                "\t\tconst mShape = {",
                "\t\t\t\"length\": localLength,",
                "\t\t\t\"slice\": slice",
                "\t\t}",
                "\t\tconst fill = () => {};",
                "\t\tconst generateReturnValue = await generate(mShape, fill)",
                "\t\tconst arrayElement = 574;",
                "\t\tconst arrayElement1 = 6;",
                "\t\tconst arrayElement2 = -388.4238897113481;",
                "\t\tconst mShape1 = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst fill1 = () => {};",
                "\t\tconst generateReturnValue1 = await generate(mShape1, fill1)",
                "\t\tconst localLength1 = -325;",
                "\t\tconst slice1 = () => {};",
                "\t\tconst mShape2 = {",
                "\t\t\t\"length\": localLength1,",
                "\t\t\t\"slice\": slice1",
                "\t\t}",
                "\t\tconst arrayElement3 = 574;",
                "\t\tconst arrayElement4 = \"The message and key string can only contain letters\";",
                "\t\tconst a = [mShape2, arrayElement3, arrayElement4]",
                "\t\tconst b = false;",
                "\t\tconst anon = 847.9325176908492;",
                "\t\tconst anon1 = true;",
                "\t\tconst mulReturnValue = await mul(a, b, anon, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "import {t} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {walk} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "import {zeros} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = -480;",
                "\t\tconst arrayElement1 = 0.199951171875;",
                "\t\tconst arrayElement2 = true;",
                "\t\tconst mShape = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst anon = {}",
                "\t\tconst anon1 = null;",
                "\t\tconst zerosReturnValue = await zeros(mShape, anon, anon1)",
                "\t\tconst localVisit = (cellIndices, cellValue) => {};",
                "\t\tconst m = [localVisit]",
                "\t\tconst localVisit1 = (cellIndices, cellValue) => {};",
                "\t\tconst arrayElement3 = -480;",
                "\t\tconst walkReturnValue = await walk(m, localVisit1, arrayElement3)",
                "\t\tconst anon2 = {}",
                "\t\tconst arrayElement4 = -480;",
                "\t\tconst tReturnValue = await t(anon2, arrayElement4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash41": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Comparator.lessThan (javascript-algorithms/src/utils/comparator/Comparator.js:42:17)\n    at Comparator.lessThanOrEqual (javascript-algorithms/src/utils/comparator/Comparator.js:62:17)\n    at MinHeap.pairIsInCorrectOrder (javascript-algorithms/src/data-structures/heap/MinHeap.js:14:25)\n    at _callee$ (.syntest/tests/tempTest.spec.js:28:17)\n    at tryCatch (.syntest/tests/tempTest.spec.js:1:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:1:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:1:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:33)\n    at _next (.syntest/tests/tempTest.spec.js:6:43)\n",
        "errors": [
            "TypeError: this.compare is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import CountingSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js\";",
                "import MinHeap from \"../instrumented/javascript-algorithms/src/data-structures/heap/MinHeap.js\";",
                "import {shape} from \"../instrumented/javascript-algorithms/src/algorithms/math/matrix/Matrix.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = 202.27086732666316;",
                "\t\tconst anon = \"A\";",
                "\t\tconst arrayElement1 = new MinHeap(anon)",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst arrayElement3 = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst arrayElement4 = 60.81863235417859;",
                "\t\tconst arrayElement5 = 917;",
                "\t\tconst m = [arrayElement3, arrayElement4, arrayElement5]",
                "\t\tconst anon1 = \"../utils/imageData\";",
                "\t\tconst shapeReturnValue = await shape(m, anon1)",
                "\t\tconst anon2 = \"A\";",
                "\t\tconst arrayElement6 = new MinHeap(anon2)",
                "\t\tconst arrayElement7 = 917;",
                "\t\tconst secondElement = undefined;",
                "\t\tconst arrayElement8 = 917;",
                "\t\tconst pairIsInCorrectOrderReturnValue = await arrayElement6.pairIsInCorrectOrder(arrayElement7, secondElement, arrayElement8)",
                "\t\tconst anon3 = \"A\";",
                "\t\tconst arrayElement9 = new MinHeap(anon3)",
                "\t\tconst anon4 = () => {};",
                "\t\tconst firstElement = new CountingSort(anon4)",
                "\t\tconst secondElement1 = \"1111101111111111\";",
                "\t\tconst anon5 = \"A\";",
                "\t\tconst pairIsInCorrectOrderReturnValue1 = await arrayElement9.pairIsInCorrectOrder(firstElement, secondElement1, anon5)",
                "\t\tconst anon6 = () => {};",
                "\t\tconst firstElement1 = new CountingSort(anon6)",
                "\t\tconst anon7 = () => {};",
                "\t\tconst assignment = undefined;",
                "\t\tconst assignment1 = 0.33333;",
                "\t\tconst sortReturnValue = await firstElement1.sort(anon7, assignment, assignment1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash42": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Comparator.equal (javascript-algorithms/src/utils/comparator/Comparator.js:32:17)\n    at BinarySearchTreeNode.insert (javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTreeNode.js:22:34)\n    at RedBlackTree.call (javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTree.js:19:22)\n    at RedBlackTree.insert (javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js:21:114)\n    at call (.syntest/tests/tempTest.spec.js:13:28)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: this.compare is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import HashTable from \"../instrumented/javascript-algorithms/src/data-structures/hash-table/HashTable.js\";",
                "import RedBlackTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = \"../bridges/graphBridges\";",
                "\t\tconst redBlackTree = new RedBlackTree(anon)",
                "\t\tconst value = \"0011111111110000000000000000000000000000000000000000000000000000\";",
                "\t\tconst insertReturnValue = await redBlackTree.insert(value)",
                "\t\tconst redBlackTree1 = new RedBlackTree()",
                "\t\tconst assignment = undefined;",
                "\t\tconst meta = new HashTable(assignment)",
                "\t\tconst node = {",
                "\t\t\t\"meta\": meta",
                "\t\t}",
                "\t\tconst value1 = \"0011111111110000000000000000000000000000000000000000000000000000\";",
                "\t\tconst anon1 = undefined;",
                "\t\tconst makeNodeRedReturnValue = await redBlackTree1.makeNodeRed(node, value1, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash43": {
        "crashProject": "javascript-algorithms",
        "trace": "    at RedBlackTree.swapNodeColors (javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js:317:67)\n    at RedBlackTree.leftLeftRotation (javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js:159:35)\n    at RedBlackTree.rightRightRotation [as leftRightRotation] (javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js:190:42)\n    at _callee$ (.syntest/tests/tempTest.spec.js:25:60)\n    at tryCatch (.syntest/tests/tempTest.spec.js:4:122)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:4:122)\n    at Generator.next (.syntest/tests/tempTest.spec.js:4:122)\n    at resolve (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at gen (.syntest/tests/tempTest.spec.js:2:1)\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading 'get')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import RedBlackTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst redBlackTree = new RedBlackTree()",
                "\t\tconst left = undefined;",
                "\t\tconst setLeft = () => {};",
                "\t\tconst right = {",
                "\t\t\t\"left\": left,",
                "\t\t\t\"setLeft\": setLeft",
                "\t\t}",
                "\t\tconst setRight = () => {};",
                "\t\tconst left1 = {",
                "\t\t\t\"right\": right,",
                "\t\t\t\"setRight\": setRight",
                "\t\t}",
                "\t\tconst setLeft1 = () => {};",
                "\t\tconst grandParentNode = {",
                "\t\t\t\"left\": left1,",
                "\t\t\t\"setLeft\": setLeft1",
                "\t\t}",
                "\t\tconst leftRightRotationReturnValue = await redBlackTree.leftRightRotation(grandParentNode)",
                "\t\tconst redBlackTree1 = new RedBlackTree()",
                "\t\tconst left2 = undefined;",
                "\t\tconst setLeft2 = () => {};",
                "\t\tconst right1 = {",
                "\t\t\t\"left\": left2,",
                "\t\t\t\"setLeft\": setLeft2",
                "\t\t}",
                "\t\tconst setRight1 = () => {};",
                "\t\tconst left3 = {",
                "\t\t\t\"right\": right1,",
                "\t\t\t\"setRight\": setRight1",
                "\t\t}",
                "\t\tconst anon = \"?!p~@±=o|<xo~)? 3%&7)±!JJY6~1_UBpG^70O`);^@\";",
                "\t\tconst rightRightRotationReturnValue = await redBlackTree1.rightRightRotation(left3, anon)",
                "\t\tconst redBlackTree2 = new RedBlackTree()",
                "\t\tconst left4 = undefined;",
                "\t\tconst setLeft3 = () => {};",
                "\t\tconst right2 = {",
                "\t\t\t\"left\": left4,",
                "\t\t\t\"setLeft\": setLeft3",
                "\t\t}",
                "\t\tconst leftRightRotationReturnValue1 = await redBlackTree2.leftRightRotation(right2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash44": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Comparator.equal (javascript-algorithms/src/utils/comparator/Comparator.js:32:17)\n    at BinarySearchTreeNode.find (javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTreeNode.js:61:34)\n    at BinarySearchTreeNode.remove (javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTreeNode.js:91:31)\n    at BinarySearchTree.remove (javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTree.js:35:22)\n    at _callee$ (.syntest/tests/tempTest.spec.js:24:4)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.Promise [as next] (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:1:1)\n",
        "errors": [
            "TypeError: this.compare is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BinarySearchTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTree.js\";",
                "import HashTable from \"../instrumented/javascript-algorithms/src/data-structures/hash-table/HashTable.js\";",
                "import RedBlackTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/red-black-tree/RedBlackTree.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst redBlackTree = new RedBlackTree()",
                "\t\tconst assignment = 5381;",
                "\t\tconst anon = -812.2799820179465;",
                "\t\tconst meta = new HashTable(assignment, anon)",
                "\t\tconst node = {",
                "\t\t\t\"meta\": meta",
                "\t\t}",
                "\t\tconst nodeValueCompareFunction = 26;",
                "\t\tconst anon1 = new BinarySearchTree(nodeValueCompareFunction)",
                "\t\tconst makeNodeBlackReturnValue = await redBlackTree.makeNodeBlack(node, anon1)",
                "\t\tconst nodeValueCompareFunction1 = 26;",
                "\t\tconst anon2 = new BinarySearchTree(nodeValueCompareFunction1)",
                "\t\tconst value = 768.1968865470028;",
                "\t\tconst anon3 = -812.2799820179465;",
                "\t\tconst removeReturnValue = await anon2.remove(value, anon3)",
                "\t\tconst nodeValueCompareFunction2 = 26;",
                "\t\tconst anon4 = new BinarySearchTree(nodeValueCompareFunction2)",
                "\t\tconst value1 = 768.1968865470028;",
                "\t\tconst containsReturnValue = await anon4.contains(value1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash45": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Function.initSortingCallbacks (javascript-algorithms/src/algorithms/sorting/Sort.js:25:30)\n    at new construct (javascript-algorithms/src/algorithms/sorting/Sort.js:13:27)\n    at HeapSort.apply (javascript-algorithms/src/algorithms/sorting/heap-sort/HeapSort.js:2:61)\n    at new HeapSort (javascript-algorithms/src/algorithms/sorting/heap-sort/HeapSort.js:4:30)\n    at call (.syntest/tests/tempTest.spec.js:15:99)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: Cannot create property 'compareCallback' on string '0011111111010011001100110011001100110011001100110011001100110011'"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import HeapSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/heap-sort/HeapSort.js\";",
                "import TrieNode from \"../instrumented/javascript-algorithms/src/data-structures/trie/TrieNode.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst character = false;",
                "\t\tconst assignment = false;",
                "\t\tconst originalCallbacks = new TrieNode(character, assignment)",
                "\t\tconst suggestChildrenReturnValue = await originalCallbacks.suggestChildren()",
                "\t\tconst anon = \"0011111111010011001100110011001100110011001100110011001100110011\";",
                "\t\tconst startVertex = new HeapSort(anon)",
                "\t\tconst forEach = () => {};",
                "\t\tconst originalArray = {",
                "\t\t\t\"forEach\": forEach",
                "\t\t}",
                "\t\tconst anon1 = \"bbbb\";",
                "\t\tconst sortReturnValue = await startVertex.sort(originalArray, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash46": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Function.from (<anonymous>)\n    at Trie.getLastCharacterNode (javascript-algorithms/src/data-structures/trie/Trie.js:97:30)\n    at Trie.BinaryTreeNode [as doesWordExist] (javascript-algorithms/src/data-structures/trie/Trie.js:87:32)\n    at _callee$ (.syntest/tests/tempTest.spec.js:11:25)\n    at tryCatch (.syntest/tests/tempTest.spec.js:4:122)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:4:122)\n    at Generator.next (.syntest/tests/tempTest.spec.js:4:122)\n    at resolve (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at gen (.syntest/tests/tempTest.spec.js:2:1)\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: undefined is not iterable (cannot read property Symbol(Symbol.iterator))"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Trie from \"../instrumented/javascript-algorithms/src/data-structures/trie/Trie.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst callbacks = new Trie()",
                "\t\tconst word = undefined;",
                "\t\tconst doesWordExistReturnValue = await callbacks.doesWordExist(word)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash47": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Comparator.equal (javascript-algorithms/src/utils/comparator/Comparator.js:32:17)\n    at BinarySearchTreeNode.find (javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTreeNode.js:61:34)\n    at BinarySearchTreeNode.remove (javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTreeNode.js:91:31)\n    at BinarySearchTree.BinaryTreeNode [as remove] (javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTree.js:35:22)\n    at call (.syntest/tests/tempTest.spec.js:13:26)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: this.compare is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BinarySearchTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTree.js\";",
                "import kruskal from \"../instrumented/javascript-algorithms/src/algorithms/graph/kruskal/kruskal.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst nodeValueCompareFunction = 8;",
                "\t\tconst getAllVertices = new BinarySearchTree(nodeValueCompareFunction)",
                "\t\tconst nodeValueCompareFunction1 = 8;",
                "\t\tconst removeReturnValue = await getAllVertices.remove(nodeValueCompareFunction1)",
                "\t\tconst isDirected = false;",
                "\t\tconst getAllEdges = () => {};",
                "\t\tconst nodeValueCompareFunction2 = 8;",
                "\t\tconst getAllVertices1 = new BinarySearchTree(nodeValueCompareFunction2)",
                "\t\tconst graph = {",
                "\t\t\t\"isDirected\": isDirected,",
                "\t\t\t\"getAllEdges\": getAllEdges,",
                "\t\t\t\"getAllVertices\": getAllVertices1",
                "\t\t}",
                "\t\tconst anon = {}",
                "\t\tconst kruskalReturnValue = await kruskal(graph, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash48": {
        "crashProject": "javascript-algorithms",
        "trace": "    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:81:39)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildTreeRecursively (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:75:10)\n    at SegmentTree.buildSegmentTree (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:52:10)\n    at new redBlackTree2 (javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js:17:10)\n    at _callee$ (.syntest/tests/tempTest.spec.js:22:35)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:1:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:33)\n",
        "errors": [
            "TypeError: this.operation is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import CountingSort from \"../instrumented/javascript-algorithms/src/algorithms/sorting/counting-sort/CountingSort.js\";",
                "import Graph from \"../instrumented/javascript-algorithms/src/data-structures/graph/Graph.js\";",
                "import SegmentTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/segment-tree/SegmentTree.js\";",
                "import stronglyConnectedComponents from \"../instrumented/javascript-algorithms/src/algorithms/graph/strongly-connected-components/stronglyConnectedComponents.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst anon = false;",
                "\t\tconst arrayElement = new CountingSort(anon)",
                "\t\tconst assignment = undefined;",
                "\t\tconst originalArray = [assignment]",
                "\t\tconst assignment1 = true;",
                "\t\tconst assignment2 = true;",
                "\t\tconst sortReturnValue = await arrayElement.sort(originalArray, assignment1, assignment2)",
                "\t\tconst inputArray = \"Invalid key string length. The square root of the key string must be an integer\";",
                "\t\tconst operation = -964;",
                "\t\tconst operationFallback = undefined;",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst anon1 = false;",
                "\t\tconst arrayElement2 = new CountingSort(anon1)",
                "\t\tconst arrayElement3 = [arrayElement2]",
                "\t\tconst anon2 = [arrayElement1, arrayElement3]",
                "\t\tconst endVertex = new SegmentTree(inputArray, operation, operationFallback, anon2)",
                "\t\tconst queryLeftIndex = 52;",
                "\t\tconst operation1 = -964;",
                "\t\tconst leftIndex = -60.85015509267009;",
                "\t\tconst operation2 = -964;",
                "\t\tconst position = () => {};",
                "\t\tconst anon3 = \"00111101110011001100110011001101\";",
                "\t\tconst rangeQueryRecursiveReturnValue = await endVertex.rangeQueryRecursive(queryLeftIndex, operation1, leftIndex, operation2, position, anon3)",
                "\t\tconst assignment3 = true;",
                "\t\tconst inputArray1 = \"Invalid key string length. The square root of the key string must be an integer\";",
                "\t\tconst graph = new Graph(assignment3, inputArray1)",
                "\t\tconst inputArray2 = \"Invalid key string length. The square root of the key string must be an integer\";",
                "\t\tconst stronglyConnectedComponentsReturnValue = await stronglyConnectedComponents(graph, inputArray2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash49": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Comparator.compare (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:37:64)\n    at Comparator.lessThan (javascript-algorithms/src/utils/comparator/Comparator.js:42:17)\n    at Comparator.lessThanOrEqual (javascript-algorithms/src/utils/comparator/Comparator.js:62:17)\n    at MergeSort.mergeSortedArrays (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:37:27)\n    at MergeSort.sort (javascript-algorithms/src/algorithms/sorting/merge-sort/MergeSort.js:23:17)\n    at Knapsack.sortPossibleItemsByValue (javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js:43:8)\n    at _callee$ (.syntest/tests/tempTest.spec.js:14:17)\n    at tryCatch (.syntest/tests/tempTest.spec.js:4:122)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:4:122)\n    at Generator.next (.syntest/tests/tempTest.spec.js:4:122)\n    at resolve (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at gen (.syntest/tests/tempTest.spec.js:2:1)\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot read properties of null (reading 'value')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = null;",
                "\t\tconst arrayElement1 = () => {};",
                "\t\tconst possibleItems = [arrayElement, arrayElement1]",
                "\t\tconst weightLimit = 474;",
                "\t\tconst anon = 2;",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit, anon)",
                "\t\tconst sortPossibleItemsByValueReturnValue = await knapsack.sortPossibleItemsByValue()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash50": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\tconst possibleItems1 = \"./DisjointSetItem\";",
                "\t\tconst weightLimit1 = \"0000000001001100\";",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio()",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst arrayElement1 = false;",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst possibleItems2 = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst weightLimit2 = -43.21278187898554;",
                "\t\tconst anon = \"igoQ?cgz6\";",
                "\t\tconst knapsack2 = new Knapsack(possibleItems2, weightLimit2, anon)",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack2.solveUnboundedKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash51": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash52": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst sortPossibleItemsByValueReturnValue = await knapsack.sortPossibleItemsByValue()",
                "\t\tconst possibleItems1 = \"./DisjointSetItem\";",
                "\t\tconst weightLimit1 = \"0000000001001100\";",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack1.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash53": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst sortPossibleItemsByValueReturnValue = await knapsack.sortPossibleItemsByValue()",
                "\t\tconst possibleItems1 = \"./DisjointSetItem\";",
                "\t\tconst weightLimit1 = \"0000000001001100\";",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack1.solveZeroOneKnapsackProblem()",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst arrayElement1 = false;",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst possibleItems2 = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst weightLimit2 = -43.21278187898554;",
                "\t\tconst anon = \"igoQ?cgz6\";",
                "\t\tconst knapsack2 = new Knapsack(possibleItems2, weightLimit2, anon)",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack2.solveUnboundedKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash54": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst arrayElement1 = false;",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst possibleItems1 = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst weightLimit1 = -43.21278187898554;",
                "\t\tconst anon = \"igoQ?cgz6\";",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon)",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack1.solveUnboundedKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash55": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\tconst possibleItems1 = \"./DisjointSetItem\";",
                "\t\tconst weightLimit1 = \"0000000001001100\";",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash56": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst sortPossibleItemsByValueReturnValue = await knapsack.sortPossibleItemsByValue()",
                "\t\tconst possibleItems1 = \"./DisjointSetItem\";",
                "\t\tconst weightLimit1 = \"0000000001001100\";",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack1.solveZeroOneKnapsackProblem()",
                "\t\tconst possibleItems2 = \"./DisjointSetItem\";",
                "\t\tconst weightLimit2 = \"0000000001001100\";",
                "\t\tconst knapsack2 = new Knapsack(possibleItems2, weightLimit2)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack2.sortPossibleItemsByValuePerWeightRatio()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash57": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash58": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst arrayElement1 = false;",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst possibleItems1 = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst weightLimit1 = -43.21278187898554;",
                "\t\tconst anon = \"igoQ?cgz6\";",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon)",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack1.solveUnboundedKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash59": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\tconst possibleItems1 = \"./DisjointSetItem\";",
                "\t\tconst weightLimit1 = \"0000000001001100\";",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash60": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash61": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst arrayElement1 = false;",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst possibleItems1 = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst weightLimit1 = -43.21278187898554;",
                "\t\tconst anon = \"igoQ?cgz6\";",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1, anon)",
                "\t\tconst solveUnboundedKnapsackProblemReturnValue = await knapsack1.solveUnboundedKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash62": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash63": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst sortPossibleItemsByValueReturnValue = await knapsack.sortPossibleItemsByValue()",
                "\t\tconst possibleItems1 = \"./DisjointSetItem\";",
                "\t\tconst weightLimit1 = \"0000000001001100\";",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack1.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash64": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash65": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash66": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\tconst possibleItems1 = \"./DisjointSetItem\";",
                "\t\tconst weightLimit1 = \"0000000001001100\";",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst sortPossibleItemsByValuePerWeightRatioReturnValue = await knapsack1.sortPossibleItemsByValuePerWeightRatio()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash67": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash68": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst sortPossibleItemsByValueReturnValue = await knapsack.sortPossibleItemsByValue()",
                "\t\tconst possibleItems1 = \"./DisjointSetItem\";",
                "\t\tconst weightLimit1 = \"0000000001001100\";",
                "\t\tconst knapsack1 = new Knapsack(possibleItems1, weightLimit1)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack1.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash69": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash70": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash71": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash72": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash73": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash74": {
        "crashProject": "javascript-algorithms",
        "trace": "",
        "errors": [
            "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/local/scratch/delft-versions/syntest-javascript/.syntest/FID-1701308226721-gSMmdnYCxTQh55aog8Boos/tests/tempTest.spec.js)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import Knapsack from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/Knapsack.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst possibleItems = \"./DisjointSetItem\";",
                "\t\tconst weightLimit = \"0000000001001100\";",
                "\t\tconst knapsack = new Knapsack(possibleItems, weightLimit)",
                "\t\tconst solveZeroOneKnapsackProblemReturnValue = await knapsack.solveZeroOneKnapsackProblem()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash75": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Comparator.equal (javascript-algorithms/src/utils/comparator/Comparator.js:32:17)\n    at BinarySearchTreeNode.insert (javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTreeNode.js:22:34)\n    at BinarySearchTree.RedBlackTree [as insert] (javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTree.js:19:22)\n    at _callee$ (.syntest/tests/tempTest.spec.js:20:29)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.Promise [as next] (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:1:1)\n    at .syntest/tests/tempTest.spec.js:1:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:1:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: this.compare is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import BinarySearchTree from \"../instrumented/javascript-algorithms/src/data-structures/tree/binary-search-tree/BinarySearchTree.js\";",
                "import KnapsackItem from \"../instrumented/javascript-algorithms/src/algorithms/sets/knapsack-problem/KnapsackItem.js\";",
                "import LinkedList from \"../instrumented/javascript-algorithms/src/data-structures/linked-list/LinkedList.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst nodeValueCompareFunction = \"v#'~YxXXIu`\\\"|neFXQx#:,§$\";",
                "\t\tconst anon = -205;",
                "\t\tconst comparatorFunction = 793;",
                "\t\tconst anon1 = new LinkedList(comparatorFunction)",
                "\t\tconst objectPattern = new BinarySearchTree(nodeValueCompareFunction, anon, anon1)",
                "\t\tconst anon2 = () => {};",
                "\t\tconst anon3 = 5;",
                "\t\tconst knapsackItem = new KnapsackItem(objectPattern, anon2, anon3)",
                "\t\tconst nodeValueCompareFunction1 = \"v#'~YxXXIu`\\\"|neFXQx#:,§$\";",
                "\t\tconst anon4 = -205;",
                "\t\tconst comparatorFunction1 = 793;",
                "\t\tconst anon5 = new LinkedList(comparatorFunction1)",
                "\t\tconst objectPattern1 = new BinarySearchTree(nodeValueCompareFunction1, anon4, anon5)",
                "\t\tconst value = {}",
                "\t\tconst anon6 = {}",
                "\t\tconst insertReturnValue = await objectPattern1.insert(value, anon6)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash76": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Comparator.lessThan (javascript-algorithms/src/utils/comparator/Comparator.js:42:17)\n    at Comparator.lessThanOrEqual (javascript-algorithms/src/utils/comparator/Comparator.js:62:17)\n    at MinHeap.pairIsInCorrectOrder (javascript-algorithms/src/data-structures/heap/MinHeap.js:14:25)\n    at _callee$ (.syntest/tests/tempTest.spec.js:15:99)\n    at tryCatch (.syntest/tests/tempTest.spec.js:4:122)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:4:122)\n    at Generator.next (.syntest/tests/tempTest.spec.js:4:122)\n    at resolve (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at gen (.syntest/tests/tempTest.spec.js:2:1)\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: this.compare is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import MinHeap from \"../instrumented/javascript-algorithms/src/data-structures/heap/MinHeap.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = 19;",
                "\t\tconst arrayElement1 = 19;",
                "\t\tconst arrayElement2 = 11;",
                "\t\tconst arrayElement3 = 19;",
                "\t\tconst b = [arrayElement2, arrayElement3]",
                "\t\tconst a = new MinHeap(arrayElement, arrayElement1, b)",
                "\t\tconst firstElement = true;",
                "\t\tconst secondElement = null;",
                "\t\tconst pairIsInCorrectOrderReturnValue = await a.pairIsInCorrectOrder(firstElement, secondElement)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash77": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Function.from (<anonymous>)\n    at HashTable.hash (javascript-algorithms/src/data-structures/hash-table/HashTable.js:38:24)\n    at HashTable.set (javascript-algorithms/src/data-structures/hash-table/HashTable.js:52:26)\n    at _callee$ (.syntest/tests/tempTest.spec.js:21:22)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.Promise [as next] (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:1:1)\n",
        "errors": [
            "TypeError: undefined is not iterable (cannot read property Symbol(Symbol.iterator))"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import HashTable from \"../instrumented/javascript-algorithms/src/data-structures/hash-table/HashTable.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = undefined;",
                "\t\tconst meta = new HashTable(assignment)",
                "\t\tconst key = () => {};",
                "\t\tconst value = \"D`.\";",
                "\t\tconst localSetReturnValue = await meta.set(key, value)",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst meta1 = new HashTable(assignment1)",
                "\t\tconst assignment2 = undefined;",
                "\t\tconst value1 = true;",
                "\t\tconst anon = () => {};",
                "\t\tconst localSetReturnValue1 = await meta1.set(assignment2, value1, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash78": {
        "crashProject": "javascript-algorithms",
        "trace": "    at Function.from (<anonymous>)\n    at HashTable.hash (javascript-algorithms/src/data-structures/hash-table/HashTable.js:38:24)\n    at HashTable.arrayElement1 [as set] (javascript-algorithms/src/data-structures/hash-table/HashTable.js:52:26)\n    at _callee$ (.syntest/tests/tempTest.spec.js:16:9)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.Promise [as next] (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:1:1)\n    at .syntest/tests/tempTest.spec.js:1:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:1:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: undefined is not iterable (cannot read property Symbol(Symbol.iterator))"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "import HashTable from \"../instrumented/javascript-algorithms/src/data-structures/hash-table/HashTable.js\";",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst assignment = undefined;",
                "\t\tconst meta = new HashTable(assignment)",
                "\t\tconst assignment1 = undefined;",
                "\t\tconst value = true;",
                "\t\tconst anon = () => {};",
                "\t\tconst localSetReturnValue = await meta.set(assignment1, value, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    }
}
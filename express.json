{
    "crash1": {
        "crashProject": "express",
        "trace": "    at Object.set (express/lib/application.js:363:50)\n    at Object.enable (express/lib/application.js:455:15)\n    at Object.defaultConfiguration (express/lib/application.js:76:32)\n    at call (.syntest/tests/tempTest.spec.js:17:54)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot set properties of undefined (setting 'x-powered-by')",
            "TypeError: Cannot read properties of undefined (reading 'env')",
            "TypeError: Cannot read properties of undefined (reading 'case sensitive routing')",
            "TypeError: Cannot read properties of undefined (reading 'view cache')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst anon = 647.9050551548605;",
                "\t\tconst defaultConfigurationReturnValue = await app1.defaultConfiguration(anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst req = {}",
                "\t\tconst res = \"±mC\\\\)<l}j$Fcn1<<FR9HPBRWpHS#P~P§\";",
                "\t\tconst callback = undefined;",
                "\t\tconst handleReturnValue = await app1.handle(req, res, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst lazyrouterReturnValue = await app1.lazyrouter()",
                "\t\tconst app2 = app",
                "\t\tconst setting = \"ECONNRESET\";",
                "\t\tconst val = () => {};",
                "\t\tconst anon = \"path argument is required to res.sendFile\";",
                "\t\tconst localSetReturnValue = await app2.set(setting, val, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst localName = 183;",
                "\t\tconst options = {}",
                "\t\tconst callback = () => {};",
                "\t\tconst renderReturnValue = await app1.render(localName, options, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash2": {
        "crashProject": "express",
        "trace": "    at Object.set (express/lib/application.js:363:50)\n    at Object.disable (express/lib/application.js:467:15)\n    at call (.syntest/tests/tempTest.spec.js:17:57)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot set properties of undefined (setting '2')",
            "TypeError: Cannot set properties of undefined (setting '#<Object>')",
            "TypeError: Cannot read properties of undefined (reading '200')",
            "TypeError: Cannot read properties of undefined (reading 'false')",
            "TypeError: Cannot read properties of undefined (reading '-791')",
            "TypeError: Cannot set properties of undefined (setting 'undefined')",
            "TypeError: Cannot read properties of undefined (reading 'null')",
            "TypeError: Cannot read properties of undefined (reading 'true')",
            "TypeError: Cannot read properties of undefined (reading 'function setting() {}')",
            "TypeError: Cannot set properties of undefined (setting '-376')",
            "TypeError: this.on is not a function",
            "TypeError: Cannot set properties of undefined (setting '[')",
            "TypeError: Cannot set properties of undefined (setting '204')",
            "TypeError: Cannot read properties of undefined (reading '1')",
            "TypeError: Cannot set properties of undefined (setting 'true')",
            "TypeError: Cannot set properties of undefined (setting '60')",
            "TypeError: Cannot set properties of undefined (setting '981')",
            "TypeError: Cannot read properties of undefined (reading 'oJ?r')",
            "TypeError: Cannot set properties of undefined (setting '15.492622250252452')",
            "TypeError: Cannot read properties of undefined (reading 'cDXYRr.r<(KD!o`Jlbvy3')",
            "TypeError: Cannot set properties of undefined (setting '0')",
            "TypeError: Cannot read properties of undefined (reading '793')",
            "TypeError: Cannot set properties of undefined (setting '>; rel=\"')",
            "TypeError: Cannot set properties of undefined (setting 'false')",
            "TypeError: Cannot set properties of undefined (setting '-695')",
            "TypeError: Cannot read properties of undefined (reading 'O0lbQ:u!s8D\\')",
            "TypeError: Cannot set properties of undefined (setting '302')",
            "TypeError: Cannot set properties of undefined (setting '-31.711352070656403')",
            "TypeError: Cannot read properties of undefined (reading 'etag fn')",
            "TypeError: The argument 'options' is invalid. Received { port: true }",
            "TypeError: Cannot read properties of undefined (reading '#<Object>')",
            "TypeError: Cannot set properties of undefined",
            "TypeError: Cannot set properties of undefined (setting 'function setting() {}')",
            "TypeError: Cannot set properties of undefined (setting 'null')",
            "TypeError: Cannot set properties of undefined (setting 'uAe%q\tfo6%802e[mFLJM$%Yb nlk9rXe1R?V'E*|o+7Bxr (\"PwDTwC4ct<\t\\>>%r~z'o\"7+#pM\t]U')",
            "TypeError: Cannot read properties of undefined (reading '~PjQL,XviP28d+9zD;tDeNB?\\±nlW-*!y7'X@]86$y!+M'ljIs4 {pQF\\'jN?.7)uhH*wW|s|n')",
            "TypeError: Cannot set properties of undefined (setting '621.0315350187088')",
            "TypeError: Cannot read properties of undefined (reading '-1')",
            "TypeError: Cannot set properties of undefined (setting '?')",
            "TypeError: Cannot read properties of undefined (reading 'callback function required')",
            "TypeError: Cannot set properties of undefined (setting 'setprototypeof')",
            "TypeError: Cannot set properties of undefined (setting '1')",
            "TypeError: Cannot read properties of undefined",
            "TypeError: Cannot read properties of undefined (reading '52$?_A!_d/+}}+wKuk1'RC6^C>x')",
            "TypeError: Cannot read properties of undefined (reading 'undefined')",
            "TypeError: The argument 'options' must have the property \"port\" or \"path\". Received [ 60, {}, `be#=axcmUts1tR1Ny=+cg@9Ys.#-u'vI==a?^Gfy\"JkhVYHi!` ]",
            "TypeError: Cannot set properties of undefined (setting '3')",
            "TypeError: Cannot read properties of undefined (reading 'IO83ORpd{A7a+<vi{5$1~ +Ka]^%Tr-')",
            "TypeError: Cannot read properties of undefined (reading 'secret')",
            "TypeError: Cannot read properties of undefined (reading 'next')",
            "TypeError: Cannot read properties of undefined (reading 'get')",
            "TypeError: path.replace is not a function",
            "TypeError: unsupported trust argument",
            "TypeError: invalid media type",
            "TypeError: Cannot read properties of undefined (reading 'indexOf')",
            "TypeError: argument string is required to be a string",
            "TypeError: type.indexOf is not a function",
            "TypeError: str.split is not a function",
            "TypeError: Cannot read properties of null (reading 'indexOf')",
            "TypeError: Cannot read properties of undefined (reading 'referrer')",
            "TypeError: Cannot set properties of undefined (setting '62')",
            "TypeError: Cannot read properties of undefined (reading '-341')",
            "TypeError: Cannot set properties of undefined (setting '656.4657116598535')",
            "TypeError: Cannot set properties of undefined (setting 'function anon() {}')",
            "TypeError: Cannot read properties of undefined (reading 'methodOverride')",
            "TypeError: Cannot read properties of undefined (reading 'json spaces')",
            "TypeError: Cannot read properties of undefined (reading '\"-P&NbrXP}/^]ga5%')",
            "TypeError: Cannot read properties of undefined (reading '-911.1865449577015')",
            "TypeError: Cannot read properties of undefined (reading 'content-type')",
            "TypeError: Cannot set properties of undefined (setting 'r79l')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = 2;",
                "\t\tconst anon = () => {};",
                "\t\tconst disableReturnValue = await app1.disable(setting, anon)",
                "\t\tconst app2 = app",
                "\t\tconst anon1 = null;",
                "\t\tconst arrayElement = undefined;",
                "\t\tconst arrayElement1 = \"x-powered-by\";",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst arrayElement3 = false;",
                "\t\tconst arrayElement4 = [arrayElement2, arrayElement3]",
                "\t\tconst anon2 = [arrayElement, arrayElement1, arrayElement4]",
                "\t\tconst defaultConfigurationReturnValue = await app2.defaultConfiguration(anon1, anon2)",
                "\t\tconst app3 = app",
                "\t\tconst arrayElement5 = undefined;",
                "\t\tconst routeReturnValue = await app3.route(arrayElement5)",
                "\t\tconst app4 = app",
                "\t\tconst localName = 805.6100493469376;",
                "\t\tconst options = () => {};",
                "\t\tconst callback = undefined;",
                "\t\tconst renderReturnValue = await app4.render(localName, options, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = {}",
                "\t\tconst enableReturnValue = await app1.enable(setting)",
                "\t\tconst app2 = app",
                "\t\tconst arrayElement = -168.47109085454633;",
                "\t\tconst arrayElement1 = \"Failed to lookup view \\\"\";",
                "\t\tconst arrayElement2 = [arrayElement, arrayElement1]",
                "\t\tconst setting1 = [arrayElement2]",
                "\t\tconst anon = null;",
                "\t\tconst enabledReturnValue = await app2.enabled(setting1, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = 200;",
                "\t\tconst anon = -70;",
                "\t\tconst disabledReturnValue = await app1.disabled(setting, anon)",
                "\t\tconst app2 = app",
                "\t\tconst localName = -396;",
                "\t\tconst options = () => {};",
                "\t\tconst callback = () => {};",
                "\t\tconst renderReturnValue = await app2.render(localName, options, callback)",
                "\t\tconst app3 = app",
                "\t\tconst setting1 = \"referrer\";",
                "\t\tconst options1 = () => {};",
                "\t\tconst disabledReturnValue1 = await app3.disabled(setting1, options1)",
                "\t\tconst app4 = app",
                "\t\tconst ext = 62;",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = -849.2025974565735;",
                "\t\tconst fn = [arrayElement, arrayElement1]",
                "\t\tconst engineReturnValue = await app4.engine(ext, fn)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = false;",
                "\t\tconst enabledReturnValue = await app1.enabled(setting)",
                "\t\tconst app2 = app",
                "\t\tconst setting1 = () => {};",
                "\t\tconst enableReturnValue = await app2.enable(setting1)",
                "\t\tconst app3 = app",
                "\t\tconst defaultConfigurationReturnValue = await app3.defaultConfiguration()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = -791;",
                "\t\tconst enabledReturnValue = await app1.enabled(setting)",
                "\t\tconst app2 = app",
                "\t\tconst anon = {}",
                "\t\tconst initReturnValue = await app2.init(anon)",
                "\t\tconst app3 = app",
                "\t\tconst localLength = 302;",
                "\t\tconst localName = {",
                "\t\t\t\"length\": localLength",
                "\t\t}",
                "\t\tconst fn = false;",
                "\t\tconst anon1 = {}",
                "\t\tconst paramReturnValue = await app3.param(localName, fn, anon1)",
                "\t\tconst app4 = app",
                "\t\tconst setting1 = -791;",
                "\t\tconst anon2 = \"f%.z4V[Y+B%dK±?J\\\\@I\\n>(<L?L^aWGK#c-bJ>>SzY,bs/)]{{8!JXqssvb)+k|moa}FtX/I5Lef2M5fK|Ku2Y7S]_(g\";",
                "\t\tconst enableReturnValue = await app4.enable(setting1, anon2)",
                "\t\tconst app5 = app",
                "\t\tconst fn1 = undefined;",
                "\t\tconst useReturnValue = await app5.use(fn1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = undefined;",
                "\t\tconst enableReturnValue = await app1.enable(setting)",
                "\t\tconst app2 = app",
                "\t\tconst lazyrouterReturnValue = await app2.lazyrouter()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = null;",
                "\t\tconst anon = -847.2878668270575;",
                "\t\tconst disabledReturnValue = await app1.disabled(setting, anon)",
                "\t\tconst app2 = app",
                "\t\tconst anon1 = -847.2878668270575;",
                "\t\tconst routeReturnValue = await app2.route(anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = true;",
                "\t\tconst anon = -1;",
                "\t\tconst disabledReturnValue = await app1.disabled(setting, anon)",
                "\t\tconst app2 = app",
                "\t\tconst setting1 = true;",
                "\t\tconst anon1 = {}",
                "\t\tconst lazyrouterReturnValue = await app2.lazyrouter(setting1, anon1)",
                "\t\tconst app3 = app",
                "\t\tconst anon2 = -1;",
                "\t\tconst anon3 = \"WN\\tm,O~h`C3oR^#\\\"i-5*fOq#55q9MQe2Ly}Dk949ShvHoOg)f§B<eB~e,:f$\\\"ohA&{|X{ \\\"`tlbwF|`r}u#`!\";",
                "\t\tconst defaultConfigurationReturnValue = await app3.defaultConfiguration(anon2, anon3)",
                "\t\tconst app4 = app",
                "\t\tconst anon4 = {}",
                "\t\tconst routeReturnValue = await app4.route(anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = () => {};",
                "\t\tconst anon = undefined;",
                "\t\tconst disabledReturnValue = await app1.disabled(setting, anon)",
                "\t\tconst app2 = app",
                "\t\tconst setting1 = () => {};",
                "\t\tconst disableReturnValue = await app2.disable(setting1)",
                "\t\tconst app3 = app",
                "\t\tconst setting2 = null;",
                "\t\tconst disabledReturnValue1 = await app3.disabled(setting2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = -376;",
                "\t\tconst anon = true;",
                "\t\tconst disableReturnValue = await app1.disable(setting, anon)",
                "\t\tconst app2 = app",
                "\t\tconst app3 = app",
                "\t\tconst setting1 = {}",
                "\t\tconst disableReturnValue1 = await app3.disable(setting1)",
                "\t\tconst app4 = app",
                "\t\tconst localName = -158.83812367452936;",
                "\t\tconst options = 302;",
                "\t\tconst callback = () => {};",
                "\t\tconst anon1 = \"trust proxy fn\";",
                "\t\tconst renderReturnValue = await app4.render(localName, options, callback, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst anon = () => {};",
                "\t\tconst initReturnValue = await app1.init(anon)",
                "\t\tconst app2 = app",
                "\t\tconst anon1 = \"Not Acceptable\";",
                "\t\tconst lazyrouterReturnValue = await app2.lazyrouter(anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \"[\";",
                "\t\tconst disableReturnValue = await app1.disable(setting)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = 204;",
                "\t\tconst enableReturnValue = await app1.enable(setting)",
                "\t\tconst app2 = app",
                "\t\tconst setting1 = true;",
                "\t\tconst anon = null;",
                "\t\tconst enabledReturnValue = await app2.enabled(setting1, anon)",
                "\t\tconst app3 = app",
                "\t\tconst setting2 = \"445'Qkb<T=G9X7tEpStE0GuO:9:A=Z'TK'+{QZco]2r.i&BMR0}=pvCSL[±~5UQL@v_1uCk}z<63~^nKIHh O4 }xj|\";",
                "\t\tconst anon1 = null;",
                "\t\tconst anon2 = {}",
                "\t\tconst enabledReturnValue1 = await app3.enabled(setting2, anon1, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = 1;",
                "\t\tconst enabledReturnValue = await app1.enabled(setting)",
                "\t\tconst app2 = app",
                "\t\tconst setting1 = \"logger\";",
                "\t\tconst val = 934.6899927035549;",
                "\t\tconst localSetReturnValue = await app2.set(setting1, val)",
                "\t\tconst app3 = app",
                "\t\tconst setting2 = \"logger\";",
                "\t\tconst enableReturnValue = await app3.enable(setting2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst app2 = app",
                "\t\tconst setting = true;",
                "\t\tconst enableReturnValue = await app2.enable(setting)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = 60;",
                "\t\tconst enableReturnValue = await app1.enable(setting)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = 981;",
                "\t\tconst anon = null;",
                "\t\tconst anon1 = \"X-Forwarded-Host\";",
                "\t\tconst enableReturnValue = await app1.enable(setting, anon, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \"oJ?r\";",
                "\t\tconst enabledReturnValue = await app1.enabled(setting)",
                "\t\tconst app2 = app",
                "\t\tconst listenReturnValue = await app2.listen()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = 15.492622250252452;",
                "\t\tconst enableReturnValue = await app1.enable(setting)",
                "\t\tconst app2 = app",
                "\t\tconst anon = \"./router\";",
                "\t\tconst listenReturnValue = await app2.listen(anon)",
                "\t\tconst app3 = app",
                "\t\tconst lazyrouterReturnValue = await app3.lazyrouter()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \"cDXYRr.r<(KD!o`Jlbvy3\";",
                "\t\tconst anon = \"json spaces\";",
                "\t\tconst disabledReturnValue = await app1.disabled(setting, anon)",
                "\t\tconst app2 = app",
                "\t\tconst localName = -86.86956143390103;",
                "\t\tconst options = {}",
                "\t\tconst callback = () => {};",
                "\t\tconst anon1 = () => {};",
                "\t\tconst anon2 = 300;",
                "\t\tconst renderReturnValue = await app2.render(localName, options, callback, anon1, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = 0;",
                "\t\tconst enableReturnValue = await app1.enable(setting)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = 793;",
                "\t\tconst enabledReturnValue = await app1.enabled(setting)",
                "\t\tconst app2 = app",
                "\t\tconst anon = -294;",
                "\t\tconst pathReturnValue = await app2.path(anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \">; rel=\\\"\";",
                "\t\tconst disableReturnValue = await app1.disable(setting)",
                "\t\tconst app2 = app",
                "\t\tconst setting1 = () => {};",
                "\t\tconst enableReturnValue = await app2.enable(setting1)",
                "\t\tconst app3 = app",
                "\t\tconst setting2 = 358.6536404869644;",
                "\t\tconst anon = undefined;",
                "\t\tconst anon1 = {}",
                "\t\tconst enableReturnValue1 = await app3.enable(setting2, anon, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = false;",
                "\t\tconst enableReturnValue = await app1.enable(setting)",
                "\t\tconst app2 = app",
                "\t\tconst setting1 = () => {};",
                "\t\tconst disableReturnValue = await app2.disable(setting1)",
                "\t\tconst app3 = app",
                "\t\tconst setting2 = {}",
                "\t\tconst enabledReturnValue = await app3.enabled(setting2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = -695;",
                "\t\tconst anon = {}",
                "\t\tconst anon1 = {}",
                "\t\tconst disableReturnValue = await app1.disable(setting, anon, anon1)",
                "\t\tconst app2 = app",
                "\t\tconst fn = []",
                "\t\tconst useReturnValue = await app2.use(fn)",
                "\t\tconst app3 = app",
                "\t\tconst setting1 = \"r'Nrhoy±'cNFWo_DA,wJ6'^lcAS:kA(?F;±RAxkzkwO\\\\s±/}kEEKC;&f7T1T{\";",
                "\t\tconst val = \"./middleware/init\";",
                "\t\tconst localSetReturnValue = await app3.set(setting1, val)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \"O0lbQ:u!s8D\\\\\";",
                "\t\tconst disabledReturnValue = await app1.disabled(setting)",
                "\t\tconst app2 = app",
                "\t\tconst localLength = -514;",
                "\t\tconst localName = {",
                "\t\t\t\"length\": localLength",
                "\t\t}",
                "\t\tconst fn = 591.0547625419858;",
                "\t\tconst paramReturnValue = await app2.param(localName, fn)",
                "\t\tconst app3 = app",
                "\t\tconst setting1 = () => {};",
                "\t\tconst enableReturnValue = await app3.enable(setting1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = 302;",
                "\t\tconst anon = \"bin\";",
                "\t\tconst enableReturnValue = await app1.enable(setting, anon)",
                "\t\tconst app2 = app",
                "\t\tconst anon1 = \"bin\";",
                "\t\tconst enableReturnValue1 = await app2.enable(anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = -31.711352070656403;",
                "\t\tconst enableReturnValue = await app1.enable(setting)",
                "\t\tconst app2 = app",
                "\t\tconst setting1 = -31.711352070656403;",
                "\t\tconst anon = () => {};",
                "\t\tconst routeReturnValue = await app2.route(setting1, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \"etag fn\";",
                "\t\tconst disabledReturnValue = await app1.disabled(setting)",
                "\t\tconst app2 = app",
                "\t\tconst setting1 = \"KvVa+F@q9z\\ngC]\\n|1hXuGhRxkGteX= pa2Pf#33yRqiMg)[bpiB\\\\N]loH_aM{Kq! sepq\";",
                "\t\tconst val = -147;",
                "\t\tconst anon = {}",
                "\t\tconst localSetReturnValue = await app2.set(setting1, val, anon)",
                "\t\tconst app3 = app",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst anon = true;",
                "\t\tconst listenReturnValue = await app1.listen(anon)",
                "\t\tconst app2 = app",
                "\t\tconst setting = \"Route.\";",
                "\t\tconst val = \"safe-buffer\";",
                "\t\tconst localSetReturnValue = await app2.set(setting, val)",
                "\t\tconst app3 = app",
                "\t\tconst setting1 = 62;",
                "\t\tconst enableReturnValue = await app3.enable(setting1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = {}",
                "\t\tconst enabledReturnValue = await app1.enabled(setting)",
                "\t\tconst app2 = app",
                "\t\tconst setting1 = \"./application\";",
                "\t\tconst val = () => {};",
                "\t\tconst localSetReturnValue = await app2.set(setting1, val)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst setting = [arrayElement, arrayElement1]",
                "\t\tconst disableReturnValue = await app1.disable(setting)",
                "\t\tconst app2 = app",
                "\t\tconst anon = {}",
                "\t\tconst lazyrouterReturnValue = await app2.lazyrouter(anon)",
                "\t\tconst app3 = app",
                "\t\tconst localName = \"number\";",
                "\t\tconst fn = \"\\\\\";",
                "\t\tconst anon1 = \"utils.contentDisposition: use content-disposition npm module instead\";",
                "\t\tconst paramReturnValue = await app3.param(localName, fn, anon1)",
                "\t\tconst app4 = app",
                "\t\tconst pathReturnValue = await app4.path()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = () => {};",
                "\t\tconst disableReturnValue = await app1.disable(setting)",
                "\t\tconst app2 = app",
                "\t\tconst ext = undefined;",
                "\t\tconst fn = false;",
                "\t\tconst anon = null;",
                "\t\tconst anon1 = () => {};",
                "\t\tconst engineReturnValue = await app2.engine(ext, fn, anon, anon1)",
                "\t\tconst app3 = app",
                "\t\tconst localName = 872.5194010540552;",
                "\t\tconst options = () => {};",
                "\t\tconst callback = () => {};",
                "\t\tconst renderReturnValue = await app3.render(localName, options, callback)",
                "\t\tconst app4 = app",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = null;",
                "\t\tconst enableReturnValue = await app1.enable(setting)",
                "\t\tconst app2 = app",
                "\t\tconst arrayElement = false;",
                "\t\tconst arrayElement1 = () => {};",
                "\t\tconst setting1 = [arrayElement, arrayElement1]",
                "\t\tconst disabledReturnValue = await app2.disabled(setting1)",
                "\t\tconst app3 = app",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst anon = \"<l;AOb_AK}Q=\\tf\";",
                "\t\tconst routeReturnValue = await app3.route(arrayElement2, anon)",
                "\t\tconst app4 = app",
                "\t\tconst anon1 = \"<l;AOb_AK}Q=\\tf\";",
                "\t\tconst arrayElement3 = false;",
                "\t\tconst callback = () => {};",
                "\t\tconst setting2 = null;",
                "\t\tconst handleReturnValue = await app4.handle(anon1, arrayElement3, callback, setting2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \"uAe%q\\tfo6%802e[mFLJM$%Yb nlk9rXe1R?V'E*|o+7Bxr (\\\"PwDTwC4ct<\\t\\\\>>%r~z'o\\\"7+#pM\\t]U\";",
                "\t\tconst disableReturnValue = await app1.disable(setting)",
                "\t\tconst app2 = app",
                "\t\tconst app3 = app",
                "\t\tconst localName = -491;",
                "\t\tconst options = () => {};",
                "\t\tconst callback = undefined;",
                "\t\tconst anon = null;",
                "\t\tconst renderReturnValue = await app3.render(localName, options, callback, anon)",
                "\t\tconst app4 = app",
                "\t\tconst callback1 = undefined;",
                "\t\tconst anon1 = 1.524060136709295;",
                "\t\tconst enableReturnValue = await app4.enable(callback1, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \"~PjQL,XviP28d+9zD;tDeNB?\\\\±nlW-*!y7'X@]86$y!+M'ljIs4 {pQF\\\\'jN?.7)uhH*wW|s|n\";",
                "\t\tconst disabledReturnValue = await app1.disabled(setting)",
                "\t\tconst app2 = app",
                "\t\tconst req = 0;",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst res = [arrayElement]",
                "\t\tconst callback = true;",
                "\t\tconst anon = () => {};",
                "\t\tconst handleReturnValue = await app2.handle(req, res, callback, anon)",
                "\t\tconst app3 = app",
                "\t\tconst initReturnValue = await app3.init()",
                "\t\tconst app4 = app",
                "\t\tconst callback1 = true;",
                "\t\tconst setting1 = \"~PjQL,XviP28d+9zD;tDeNB?\\\\±nlW-*!y7'X@]86$y!+M'ljIs4 {pQF\\\\'jN?.7)uhH*wW|s|n\";",
                "\t\tconst pathReturnValue = await app4.path(callback1, setting1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = 621.0315350187088;",
                "\t\tconst anon = \"ETag\";",
                "\t\tconst enableReturnValue = await app1.enable(setting, anon)",
                "\t\tconst app2 = app",
                "\t\tconst req = -410;",
                "\t\tconst res = () => {};",
                "\t\tconst callback = true;",
                "\t\tconst handleReturnValue = await app2.handle(req, res, callback)",
                "\t\tconst app3 = app",
                "\t\tconst res1 = () => {};",
                "\t\tconst disableReturnValue = await app3.disable(res1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = -1;",
                "\t\tconst disabledReturnValue = await app1.disabled(setting)",
                "\t\tconst app2 = app",
                "\t\tconst req = \"responseTime\";",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst res = [arrayElement]",
                "\t\tconst callback = undefined;",
                "\t\tconst handleReturnValue = await app2.handle(req, res, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \"?\";",
                "\t\tconst anon = \"%wME±4.>RV\\tx§^>cn/,RRb5F1\\ne:3})zVeY7hhGt m)M,$%§d_\\tsZY>K\\\\=Ga#HmC$z7IOJ§P(&#%8c=2r\\nq\";",
                "\t\tconst enableReturnValue = await app1.enable(setting, anon)",
                "\t\tconst app2 = app",
                "\t\tconst lazyrouterReturnValue = await app2.lazyrouter()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \"callback function required\";",
                "\t\tconst anon = null;",
                "\t\tconst enabledReturnValue = await app1.enabled(setting, anon)",
                "\t\tconst app2 = app",
                "\t\tconst anon1 = null;",
                "\t\tconst anon2 = \"statuses\";",
                "\t\tconst arrayElement = 302;",
                "\t\tconst arrayElement1 = {}",
                "\t\tconst anon3 = [arrayElement, arrayElement1]",
                "\t\tconst enabledReturnValue1 = await app2.enabled(anon1, anon2, anon3)",
                "\t\tconst app3 = app",
                "\t\tconst listenReturnValue = await app3.listen()",
                "\t\tconst app4 = app",
                "\t\tconst localName = () => {};",
                "\t\tconst arrayElement2 = {}",
                "\t\tconst arrayElement3 = {}",
                "\t\tconst paramReturnValue = await app4.param(localName, arrayElement2, arrayElement3)",
                "\t\tconst app5 = app",
                "\t\tconst localName1 = -695;",
                "\t\tconst options = {}",
                "\t\tconst callback = () => {};",
                "\t\tconst renderReturnValue = await app5.render(localName1, options, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \"setprototypeof\";",
                "\t\tconst enableReturnValue = await app1.enable(setting)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = 1;",
                "\t\tconst enableReturnValue = await app1.enable(setting)",
                "\t\tconst app2 = app",
                "\t\tconst defaultConfigurationReturnValue = await app2.defaultConfiguration()",
                "\t\tconst app3 = app",
                "\t\tconst ext = 668;",
                "\t\tconst fn = \"a_,P'>S)v]4i6B/§}SdgG\";",
                "\t\tconst arrayElement = null;",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst anon = [arrayElement, arrayElement1]",
                "\t\tconst engineReturnValue = await app3.engine(ext, fn, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = {}",
                "\t\tconst arrayElement2 = \"referer\";",
                "\t\tconst setting = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst disabledReturnValue = await app1.disabled(setting)",
                "\t\tconst app2 = app",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \"52$?_A!_d/+}}+wKuk1'RC6^C>x\";",
                "\t\tconst enabledReturnValue = await app1.enabled(setting)",
                "\t\tconst app2 = app",
                "\t\tconst anon = \";DQ7m/WtS`</2^dZ6obl\\nk^vB'RW;mPq>moA7r>WYcpEIk?r/,]F;'%?0!(fFo05jTw@{+?vo\";",
                "\t\tconst pathReturnValue = await app2.path(anon)",
                "\t\tconst app3 = app",
                "\t\tconst setting1 = undefined;",
                "\t\tconst disabledReturnValue = await app3.disabled(setting1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = undefined;",
                "\t\tconst disabledReturnValue = await app1.disabled(setting)",
                "\t\tconst app2 = app",
                "\t\tconst setting1 = \"json replacer\";",
                "\t\tconst anon = 513;",
                "\t\tconst setting2 = undefined;",
                "\t\tconst anon1 = () => {};",
                "\t\tconst enabledReturnValue = await app2.enabled(setting1, anon, setting2, anon1)",
                "\t\tconst app3 = app",
                "\t\tconst setting3 = \"./response\";",
                "\t\tconst arrayElement = \"{^bv{1Zs3[oJU(wPPTx`:;.S$LPzsUXVmMpMXrFp5[`%`+'J)^Dla6].Y35(77<\";",
                "\t\tconst val = [arrayElement]",
                "\t\tconst localSetReturnValue = await app3.set(setting3, val)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst arrayElement = 60;",
                "\t\tconst arrayElement1 = {}",
                "\t\tconst arrayElement2 = \"be#=axcmUts1tR1Ny=+cg@9Ys.#-u'vI==a?^Gfy\\\"JkhVYHi!\";",
                "\t\tconst anon = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst listenReturnValue = await app1.listen(anon)",
                "\t\tconst app2 = app",
                "\t\tconst arrayElement3 = 60;",
                "\t\tconst arrayElement4 = {}",
                "\t\tconst arrayElement5 = \"be#=axcmUts1tR1Ny=+cg@9Ys.#-u'vI==a?^Gfy\\\"JkhVYHi!\";",
                "\t\tconst anon1 = [arrayElement3, arrayElement4, arrayElement5]",
                "\t\tconst enabledReturnValue = await app2.enabled(anon1)",
                "\t\tconst app3 = app",
                "\t\tconst fn = \"body-parser\";",
                "\t\tconst anon2 = \"%.(! ~%`Z±Ey<HIjQx'H|ou+<bjtFMoE'p;\\\\j`#HT}9k8mB)\\\\aN:ie§S\\\"RH92S*z'+hm]\";",
                "\t\tconst useReturnValue = await app3.use(fn, anon2)",
                "\t\tconst app4 = app",
                "\t\tconst arrayElement6 = 60;",
                "\t\tconst arrayElement7 = {}",
                "\t\tconst arrayElement8 = \"be#=axcmUts1tR1Ny=+cg@9Ys.#-u'vI==a?^Gfy\\\"JkhVYHi!\";",
                "\t\tconst anon3 = [arrayElement6, arrayElement7, arrayElement8]",
                "\t\tconst anon4 = undefined;",
                "\t\tconst allReturnValue = await app4.all(anon3, anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = 3;",
                "\t\tconst disableReturnValue = await app1.disable(setting)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \"IO83ORpd{A7a+<vi{5$1~ +Ka]^%Tr-\";",
                "\t\tconst anon = \"baseUrl\";",
                "\t\tconst disabledReturnValue = await app1.disabled(setting, anon)",
                "\t\tconst app2 = app",
                "\t\tconst anon1 = \"baseUrl\";",
                "\t\tconst routeReturnValue = await app2.route(anon1)",
                "\t\tconst app3 = app",
                "\t\tconst setting1 = 4;",
                "\t\tconst enabledReturnValue = await app3.enabled(setting1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst localName = () => {};",
                "\t\tconst options = {}",
                "\t\tconst anon = null;",
                "\t\tconst clearCookieReturnValue = await res1.clearCookie(localName, options, anon)",
                "\t\tconst res2 = res",
                "\t\tconst url = null;",
                "\t\tconst redirectReturnValue = await res2.redirect(url)",
                "\t\tconst res3 = res",
                "\t\tconst url1 = 302;",
                "\t\tconst redirectReturnValue1 = await res3.redirect(url1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst path = () => {};",
                "\t\tconst options = () => {};",
                "\t\tconst callback = true;",
                "\t\tconst anon = 204;",
                "\t\tconst anon1 = {}",
                "\t\tconst sendfileReturnValue = await res1.sendfile(path, options, callback, anon, anon1)",
                "\t\tconst res2 = res",
                "\t\tconst callback1 = true;",
                "\t\tconst anon2 = {}",
                "\t\tconst attachmentReturnValue = await res2.attachment(callback1, anon2)",
                "\t\tconst res3 = res",
                "\t\tconst url = true;",
                "\t\tconst localLocationReturnValue = await res3.location(url)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst localLength = 987.455815146531;",
                "\t\tconst body = {",
                "\t\t\t\"length\": localLength",
                "\t\t}",
                "\t\tconst localSendReturnValue = await res1.send(body)",
                "\t\tconst res2 = res",
                "\t\tconst obj = 266.7917021300732;",
                "\t\tconst jsonReturnValue = await res2.json(obj)",
                "\t\tconst res3 = res",
                "\t\tconst arrayElement = \"<p>\";",
                "\t\tconst field = [arrayElement]",
                "\t\tconst obj1 = 266.7917021300732;",
                "\t\tconst localLength1 = 987.455815146531;",
                "\t\tconst body1 = {",
                "\t\t\t\"length\": localLength1",
                "\t\t}",
                "\t\tconst varyReturnValue = await res3.vary(field, obj1, body1)",
                "\t\tconst res4 = res",
                "\t\tconst obj2 = undefined;",
                "\t\tconst jsonpReturnValue = await res4.jsonp(obj2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst arrayElement = true;",
                "\t\tconst arrayElement1 = -400;",
                "\t\tconst arrayElement2 = () => {};",
                "\t\tconst arrayElement3 = null;",
                "\t\tconst type = [arrayElement, arrayElement1, arrayElement2, arrayElement3]",
                "\t\tconst anon = null;",
                "\t\tconst typeReturnValue = await res1.type(type, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet compileTrust;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst split = () => {};",
                "\t\tconst val = {",
                "\t\t\t\"split\": split",
                "\t\t}",
                "\t\tconst compileTrustReturnValue = await compileTrust(val)",
                "\t\tconst val1 = 441;",
                "\t\tconst compileTrustReturnValue1 = await compileTrust(val1)",
                "\t\tconst val2 = true;",
                "\t\tconst anon = {}",
                "\t\tconst compileTrustReturnValue2 = await compileTrust(val2, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet setCharset;",
                "\tlet normalizeTypes;",
                "\tlet compileTrust;",
                "\tlet compileETag;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({setCharset} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({normalizeTypes} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({compileETag} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst type = \"\\\" in views \";",
                "\t\tconst charset = 200;",
                "\t\tconst setCharsetReturnValue = await setCharset(type, charset)",
                "\t\tconst arrayElement = false;",
                "\t\tconst arrayElement1 = () => {};",
                "\t\tconst arrayElement2 = () => {};",
                "\t\tconst types = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst anon = undefined;",
                "\t\tconst normalizeTypesReturnValue = await normalizeTypes(types, anon)",
                "\t\tconst val = 1000;",
                "\t\tconst charset1 = 200;",
                "\t\tconst charset2 = 200;",
                "\t\tconst compileTrustReturnValue = await compileTrust(val, charset1, charset2)",
                "\t\tconst val1 = 1000;",
                "\t\tconst val2 = 1000;",
                "\t\tconst compileETagReturnValue = await compileETag(val1, val2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet normalizeTypes;",
                "\tlet normalizeType;",
                "\tlet compileTrust;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({normalizeTypes} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({normalizeType} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localLength = 204;",
                "\t\tconst types = {",
                "\t\t\t\"length\": localLength",
                "\t\t}",
                "\t\tconst anon = \"S~rRvzvqD%1&l9Iu<vFnM\\\\2h\\\"#^`,9§{\";",
                "\t\tconst normalizeTypesReturnValue = await normalizeTypes(types, anon)",
                "\t\tconst type = -898.11723740264;",
                "\t\tconst anon1 = \",\";",
                "\t\tconst normalizeTypeReturnValue = await normalizeType(type, anon1)",
                "\t\tconst val = false;",
                "\t\tconst compileTrustReturnValue = await compileTrust(val)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet setCharset;",
                "\tlet compileTrust;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({setCharset} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst type = () => {};",
                "\t\tconst charset = \"Set-Cookie\";",
                "\t\tconst anon = -1;",
                "\t\tconst anon1 = false;",
                "\t\tconst setCharsetReturnValue = await setCharset(type, charset, anon, anon1)",
                "\t\tconst type1 = {}",
                "\t\tconst anon2 = false;",
                "\t\tconst anon3 = \"utils-merge\";",
                "\t\tconst setCharsetReturnValue1 = await setCharset(type1, anon2, anon3)",
                "\t\tconst type2 = {}",
                "\t\tconst compileTrustReturnValue = await compileTrust(type2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet normalizeTypes;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({normalizeTypes} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = \"-\\t,c~q[#Rp!*A@P4%)y,\";",
                "\t\tconst arrayElement1 = true;",
                "\t\tconst arrayElement2 = null;",
                "\t\tconst arrayElement3 = \".f*\\\"pXTY#1R^{OpE_O{W~Eu?%}{}^#%N:g3U'O~a;w&e'y1NJ\\tSF@\";",
                "\t\tconst types = [arrayElement, arrayElement1, arrayElement2, arrayElement3]",
                "\t\tconst anon = \"Request aborted\";",
                "\t\tconst normalizeTypesReturnValue = await normalizeTypes(types, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet normalizeType;",
                "\tlet compileETag;",
                "\tlet compileTrust;",
                "\tlet setCharset;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({normalizeType} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({compileETag} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({setCharset} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst indexOf = () => {};",
                "\t\tconst type = {",
                "\t\t\t\"indexOf\": indexOf",
                "\t\t}",
                "\t\tconst anon = \"Qx22'`)jJy2jR(1`.|p`98OkB( k&k,g'eS]xD±-edj±]x>QHA{$*qnc5NoQN}S`'Nj-@tnM-B{J;+Br3*{hYA\\\\|`$+Q\";",
                "\t\tconst anon1 = 200;",
                "\t\tconst normalizeTypeReturnValue = await normalizeType(type, anon, anon1)",
                "\t\tconst type1 = \"'\\n$\\\"+$R`$f_+~!4h|SdFdO\";",
                "\t\tconst indexOf1 = () => {};",
                "\t\tconst type2 = {",
                "\t\t\t\"indexOf\": indexOf1",
                "\t\t}",
                "\t\tconst anon2 = \"8pA'B/Fd^]IWT2'PP<Y?gi<#Q]KJQ±k.>i;±0Em'7\\\\l}IRLU\";",
                "\t\tconst normalizeTypeReturnValue1 = await normalizeType(type1, type2, anon2)",
                "\t\tconst val = true;",
                "\t\tconst anon3 = -967;",
                "\t\tconst compileETagReturnValue = await compileETag(val, anon3)",
                "\t\tconst val1 = false;",
                "\t\tconst anon4 = {}",
                "\t\tconst compileTrustReturnValue = await compileTrust(val1, anon4)",
                "\t\tconst type3 = \"Rn#D\\nMY&\";",
                "\t\tconst charset = undefined;",
                "\t\tconst anon5 = false;",
                "\t\tconst indexOf2 = () => {};",
                "\t\tconst setCharsetReturnValue = await setCharset(type3, charset, anon5, indexOf2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet normalizeTypes;",
                "\tlet compileTrust;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({normalizeTypes} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = null;",
                "\t\tconst types = [arrayElement]",
                "\t\tconst anon = \"g4±M±§d``X§v\";",
                "\t\tconst normalizeTypesReturnValue = await normalizeTypes(types, anon)",
                "\t\tconst val = true;",
                "\t\tconst compileTrustReturnValue = await compileTrust(val)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \"referrer\";",
                "\t\tconst options = () => {};",
                "\t\tconst disabledReturnValue = await app1.disabled(setting, options)",
                "\t\tconst app2 = app",
                "\t\tconst ext = 62;",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = -849.2025974565735;",
                "\t\tconst fn = [arrayElement, arrayElement1]",
                "\t\tconst engineReturnValue = await app2.engine(ext, fn)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst arrayElement = 62;",
                "\t\tconst enableReturnValue = await app1.enable(arrayElement)",
                "\t\tconst app2 = app",
                "\t\tconst localName = -574.4331516927123;",
                "\t\tconst options = {}",
                "\t\tconst callback = {}",
                "\t\tconst anon = \"ECONNABORTED\";",
                "\t\tconst renderReturnValue = await app2.render(localName, options, callback, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = -341;",
                "\t\tconst enabledReturnValue = await app1.enabled(setting)",
                "\t\tconst app2 = app",
                "\t\tconst anon = {}",
                "\t\tconst allReturnValue = await app2.all(anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = 656.4657116598535;",
                "\t\tconst anon = true;",
                "\t\tconst enableReturnValue = await app1.enable(setting, anon)",
                "\t\tconst app2 = app",
                "\t\tconst anon1 = \"y)v#G}4627d§/[5§ld6\\t^<IXvp±CWx\";",
                "\t\tconst anon2 = \"C:aoRk[D(T<)y8_~k('7w6R<DqnEz1knVevmW)AqX\\\"\\ts$l}u0tP x+`wJ(\";",
                "\t\tconst lazyrouterReturnValue = await app2.lazyrouter(anon1, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst anon = () => {};",
                "\t\tconst disableReturnValue = await app1.disable(anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \"methodOverride\";",
                "\t\tconst disabledReturnValue = await app1.disabled(setting)",
                "\t\tconst app2 = app",
                "\t\tconst fn = -574;",
                "\t\tconst anon = 1;",
                "\t\tconst useReturnValue = await app2.use(fn, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \"json spaces\";",
                "\t\tconst disabledReturnValue = await app1.disabled(setting)",
                "\t\tconst app2 = app",
                "\t\tconst path = -215;",
                "\t\tconst routeReturnValue = await app2.route(path)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \"\\\"-P&NbrXP}/^]ga5%\";",
                "\t\tconst disabledReturnValue = await app1.disabled(setting)",
                "\t\tconst app2 = app",
                "\t\tconst ext = 79;",
                "\t\tconst anon = false;",
                "\t\tconst anon1 = 487;",
                "\t\tconst engineReturnValue = await app2.engine(ext, anon, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = -911.1865449577015;",
                "\t\tconst enabledReturnValue = await app1.enabled(setting)",
                "\t\tconst app2 = app",
                "\t\tconst arrayElement = {}",
                "\t\tconst disableReturnValue = await app2.disable(arrayElement)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst setting = \"content-type\";",
                "\t\tconst anon = null;",
                "\t\tconst enabledReturnValue = await app1.enabled(setting, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst field = \"R79L\";",
                "\t\tconst arrayElement = undefined;",
                "\t\tconst val = [arrayElement]",
                "\t\tconst headerReturnValue = await res1.header(field, val)",
                "\t\tconst res2 = res",
                "\t\tconst url = true;",
                "\t\tconst options = false;",
                "\t\tconst callback = true;",
                "\t\tconst url1 = true;",
                "\t\tconst anon = 2.718281828459045;",
                "\t\tconst renderReturnValue = await res2.render(url, options, callback, url1, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash3": {
        "crashProject": "express",
        "trace": "    at Object.set (express/lib/application.js:357:25)\n    at Object.enabled (express/lib/application.js:424:23)\n    at Object.lazyrouter (express/lib/application.js:142:27)\n    at Object.enabledReturnValue [as all] (express/lib/application.js:500:8)\n    at call (.syntest/tests/tempTest.spec.js:17:9)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading 'case sensitive routing')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst path = \"zohj}7[6HXcC@2f6.gG&V>§VCH§'B=?J{hIOT7Cazz?k\\\":}v$=>e&\\\":C)SDCDl+/\";",
                "\t\tconst arrayElement = 266.2372109137591;",
                "\t\tconst anon = [arrayElement]",
                "\t\tconst allReturnValue = await app1.all(path, anon)",
                "\t\tconst app2 = app",
                "\t\tconst setting = undefined;",
                "\t\tconst anon1 = 204;",
                "\t\tconst enableReturnValue = await app2.enable(setting, anon1)",
                "\t\tconst app3 = app",
                "\t\tconst pathReturnValue = await app3.path()",
                "\t\tconst app4 = app",
                "\t\tconst setting1 = undefined;",
                "\t\tconst allReturnValue1 = await app4.all(setting1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash4": {
        "crashProject": "express",
        "trace": "    at Object.set (express/lib/application.js:357:25)\n    at Object.set [as enabled] (express/lib/application.js:424:23)\n    at call (.syntest/tests/tempTest.spec.js:21:42)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading '-341')",
            "TypeError: Cannot set properties of undefined (setting '656.4657116598535')",
            "TypeError: Cannot read properties of undefined (reading '#<Object>')",
            "TypeError: Cannot set properties of undefined (setting 'null')",
            "TypeError: Cannot set properties of undefined (setting '%s %o')",
            "TypeError: Cannot read properties of undefined (reading 'json spaces')",
            "TypeError: Cannot set properties of undefined (setting 'false')",
            "TypeError: Cannot set properties of undefined",
            "TypeError: Cannot read properties of undefined (reading 'true')",
            "TypeError: Cannot read properties of undefined (reading 'limit')",
            "TypeError: Cannot read properties of undefined (reading 'secret')",
            "TypeError: invalid media type",
            "TypeError: str.split is not a function",
            "TypeError: type.indexOf is not a function",
            "TypeError: argument string is required to be a string",
            "TypeError: unsupported trust argument",
            "TypeError: Cannot read properties of undefined (reading 'indexOf')",
            "TypeError: path.replace is not a function",
            "TypeError: Cannot read properties of undefined (reading 'content-type')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst anon = \"hMo7sz':±=CL}ItlHyu>wGKh'z6Z*e'zW&&YTp/J§lPv%>SebWx)0>-\\nHX§\\nMIL=5#={/t^%g^>WJg/Pk4Im\";",
                "\t\tconst anon1 = {}",
                "\t\tconst pathReturnValue = await app1.path(anon, anon1)",
                "\t\tconst app2 = app",
                "\t\tconst setting = -341;",
                "\t\tconst enabledReturnValue = await app2.enabled(setting)",
                "\t\tconst app3 = app",
                "\t\tconst anon2 = {}",
                "\t\tconst allReturnValue = await app3.all(anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst anon = () => {};",
                "\t\tconst pathReturnValue = await app1.path(anon)",
                "\t\tconst app2 = app",
                "\t\tconst setting = 656.4657116598535;",
                "\t\tconst anon1 = true;",
                "\t\tconst enableReturnValue = await app2.enable(setting, anon1)",
                "\t\tconst app3 = app",
                "\t\tconst anon2 = \"y)v#G}4627d§/[5§ld6\\t^<IXvp±CWx\";",
                "\t\tconst anon3 = \"C:aoRk[D(T<)y8_~k('7w6R<DqnEz1knVevmW)AqX\\\"\\ts$l}u0tP x+`wJ(\";",
                "\t\tconst lazyrouterReturnValue = await app3.lazyrouter(anon2, anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst anon = {}",
                "\t\tconst anon1 = 200;",
                "\t\tconst pathReturnValue = await app1.path(anon, anon1)",
                "\t\tconst app2 = app",
                "\t\tconst anon2 = {}",
                "\t\tconst enabledReturnValue = await app2.enabled(anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst anon = () => {};",
                "\t\tconst pathReturnValue = await app1.path(anon)",
                "\t\tconst app2 = app",
                "\t\tconst setting = null;",
                "\t\tconst anon1 = -339.4179531427495;",
                "\t\tconst disableReturnValue = await app2.disable(setting, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst pathReturnValue = await app1.path()",
                "\t\tconst app2 = app",
                "\t\tconst setting = \"%s %o\";",
                "\t\tconst disableReturnValue = await app2.disable(setting)",
                "\t\tconst app3 = app",
                "\t\tconst defaultConfigurationReturnValue = await app3.defaultConfiguration()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst anon = false;",
                "\t\tconst pathReturnValue = await app1.path(anon)",
                "\t\tconst app2 = app",
                "\t\tconst setting = \"json spaces\";",
                "\t\tconst disabledReturnValue = await app2.disabled(setting)",
                "\t\tconst app3 = app",
                "\t\tconst path = -215;",
                "\t\tconst routeReturnValue = await app3.route(path)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst pathReturnValue = await app1.path()",
                "\t\tconst app2 = app",
                "\t\tconst setting = false;",
                "\t\tconst anon = 406;",
                "\t\tconst enableReturnValue = await app2.enable(setting, anon)",
                "\t\tconst app3 = app",
                "\t\tconst fn = \"![Nt$`-3c)XMG (~{JL}uIOu/W(s&poqY§^lf\";",
                "\t\tconst useReturnValue = await app3.use(fn)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst anon = null;",
                "\t\tconst pathReturnValue = await app1.path(anon)",
                "\t\tconst app2 = app",
                "\t\tconst arrayElement = undefined;",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst arrayElement2 = null;",
                "\t\tconst setting = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst anon1 = {}",
                "\t\tconst enableReturnValue = await app2.enable(setting, anon1)",
                "\t\tconst app3 = app",
                "\t\tconst arrayElement3 = undefined;",
                "\t\tconst arrayElement4 = null;",
                "\t\tconst arrayElement5 = null;",
                "\t\tconst setting1 = [arrayElement3, arrayElement4, arrayElement5]",
                "\t\tconst disabledReturnValue = await app3.disabled(setting1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst req = undefined;",
                "\t\tconst res = 1;",
                "\t\tconst callback = () => {};",
                "\t\tconst handleReturnValue = await app1.handle(req, res, callback)",
                "\t\tconst app2 = app",
                "\t\tconst setting = true;",
                "\t\tconst anon = \", got \";",
                "\t\tconst disabledReturnValue = await app2.disabled(setting, anon)",
                "\t\tconst app3 = app",
                "\t\tconst anon1 = \", got \";",
                "\t\tconst options = () => {};",
                "\t\tconst callback1 = {}",
                "\t\tconst renderReturnValue = await app3.render(anon1, options, callback1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst req = false;",
                "\t\tconst res = 678;",
                "\t\tconst callback = () => {};",
                "\t\tconst arrayElement = 204;",
                "\t\tconst anon = [arrayElement]",
                "\t\tconst anon1 = true;",
                "\t\tconst anon2 = {}",
                "\t\tconst handleReturnValue = await app1.handle(req, res, callback, anon, anon1, anon2)",
                "\t\tconst app2 = app",
                "\t\tconst setting = \"limit\";",
                "\t\tconst anon3 = () => {};",
                "\t\tconst enabledReturnValue = await app2.enabled(setting, anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst code = null;",
                "\t\tconst localStatusReturnValue = await res1.status(code)",
                "\t\tconst res2 = res",
                "\t\tconst localName = \"3f;gNI'ZX*!oRU6q§|d?[ F`?Qso*C}c§\\\"AO!V)oI,~k6W\\\\7,?i\\\"(QP$UwzY9K'\\t/3Ygta<kHP+(\";",
                "\t\tconst options = 204;",
                "\t\tconst clearCookieReturnValue = await res2.clearCookie(localName, options)",
                "\t\tconst res3 = res",
                "\t\tconst toLowerCase = () => {};",
                "\t\tconst field = {",
                "\t\t\t\"toLowerCase\": toLowerCase",
                "\t\t}",
                "\t\tconst arrayElement = true;",
                "\t\tconst arrayElement1 = \"json escape\";",
                "\t\tconst val = [arrayElement, arrayElement1]",
                "\t\tconst anon = -960.7333600287963;",
                "\t\tconst headerReturnValue = await res3.header(field, val, anon)",
                "\t\tconst res4 = res",
                "\t\tconst arrayElement2 = true;",
                "\t\tconst options1 = \"protocol\";",
                "\t\tconst clearCookieReturnValue1 = await res4.clearCookie(arrayElement2, options1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet normalizeTypes;",
                "\tlet setCharset;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({normalizeTypes} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({setCharset} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst types = () => {};",
                "\t\tconst anon = () => {};",
                "\t\tconst anon1 = {}",
                "\t\tconst normalizeTypesReturnValue = await normalizeTypes(types, anon, anon1)",
                "\t\tconst type = \"object\";",
                "\t\tconst anon2 = () => {};",
                "\t\tconst arrayElement = null;",
                "\t\tconst anon3 = {}",
                "\t\tconst arrayElement1 = 248.0960110115925;",
                "\t\tconst arrayElement2 = [anon3, arrayElement1]",
                "\t\tconst arrayElement3 = [arrayElement2]",
                "\t\tconst anon4 = [arrayElement, arrayElement3]",
                "\t\tconst setCharsetReturnValue = await setCharset(type, anon2, anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet setCharset;",
                "\tlet normalizeTypes;",
                "\tlet normalizeType;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({setCharset} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({normalizeTypes} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({normalizeType} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst type = false;",
                "\t\tconst charset = \"stat \\\"%s\\\"\";",
                "\t\tconst setCharsetReturnValue = await setCharset(type, charset)",
                "\t\tconst charset1 = \"stat \\\"%s\\\"\";",
                "\t\tconst normalizeTypesReturnValue = await normalizeTypes(charset1)",
                "\t\tconst indexOf = () => {};",
                "\t\tconst type1 = {",
                "\t\t\t\"indexOf\": indexOf",
                "\t\t}",
                "\t\tconst type2 = false;",
                "\t\tconst arrayElement = 200;",
                "\t\tconst arrayElement1 = false;",
                "\t\tconst anon = [type2, arrayElement, arrayElement1]",
                "\t\tconst anon1 = {}",
                "\t\tconst normalizeTypeReturnValue = await normalizeType(type1, anon, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet setCharset;",
                "\tlet normalizeTypes;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({setCharset} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({normalizeTypes} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst type = null;",
                "\t\tconst charset = false;",
                "\t\tconst setCharsetReturnValue = await setCharset(type, charset)",
                "\t\tconst localLength = -935.1871918029376;",
                "\t\tconst types = {",
                "\t\t\t\"length\": localLength",
                "\t\t}",
                "\t\tconst normalizeTypesReturnValue = await normalizeTypes(types)",
                "\t\tconst localLength1 = -935.1871918029376;",
                "\t\tconst types1 = {",
                "\t\t\t\"length\": localLength1",
                "\t\t}",
                "\t\tconst normalizeTypesReturnValue1 = await normalizeTypes(types1)",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = \"zQq@5l/~rS6eF4QzG9DJ%K}MJy@%{K@CKoF+4\\n'§`;&8v]2,u'Z2.Bp6ih`0\\\"z O+@/O5[±F1cy&wH\\\\je&#[R|?`rO?!.PR\";",
                "\t\tconst types2 = [arrayElement, arrayElement1]",
                "\t\tconst normalizeTypesReturnValue2 = await normalizeTypes(types2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet compileTrust;",
                "\tlet isAbsolute;",
                "\tlet normalizeTypes;",
                "\tlet setCharset;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({isAbsolute} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({normalizeTypes} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({setCharset} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst val = -449;",
                "\t\tconst anon = -407.1795010134458;",
                "\t\tconst compileTrustReturnValue = await compileTrust(val, anon)",
                "\t\tconst substring = () => {};",
                "\t\tconst path = {",
                "\t\t\t\"substring\": substring",
                "\t\t}",
                "\t\tconst isAbsoluteReturnValue = await isAbsolute(path)",
                "\t\tconst substring1 = () => {};",
                "\t\tconst normalizeTypesReturnValue = await normalizeTypes(substring1)",
                "\t\tconst type = () => {};",
                "\t\tconst substring2 = () => {};",
                "\t\tconst anon1 = -407.1795010134458;",
                "\t\tconst setCharsetReturnValue = await setCharset(type, substring2, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet normalizeTypes;",
                "\tlet compileTrust;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({normalizeTypes} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst types = []",
                "\t\tconst anon = \"g4±M±§d``L§v\";",
                "\t\tconst normalizeTypesReturnValue = await normalizeTypes(types, anon)",
                "\t\tconst split = () => {};",
                "\t\tconst val = {",
                "\t\t\t\"split\": split",
                "\t\t}",
                "\t\tconst compileTrustReturnValue = await compileTrust(val)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet normalizeType;",
                "\tlet normalizeTypes;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({normalizeType} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({normalizeTypes} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst type = \"express:view\";",
                "\t\tconst normalizeTypeReturnValue = await normalizeType(type)",
                "\t\tconst localLength = 204;",
                "\t\tconst types = {",
                "\t\t\t\"length\": localLength",
                "\t\t}",
                "\t\tconst normalizeTypesReturnValue = await normalizeTypes(types)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet compileETag;",
                "\tlet compileTrust;",
                "\tlet normalizeType;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({compileETag} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({normalizeType} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst val = true;",
                "\t\tconst compileETagReturnValue = await compileETag(val)",
                "\t\tconst val1 = false;",
                "\t\tconst compileTrustReturnValue = await compileTrust(val1)",
                "\t\tconst arrayElement = \"GET\";",
                "\t\tconst arrayElement1 = {}",
                "\t\tconst type = [arrayElement, arrayElement1]",
                "\t\tconst anon = {}",
                "\t\tconst anon1 = -223;",
                "\t\tconst normalizeTypeReturnValue = await normalizeType(type, anon, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst pathReturnValue = await app1.path()",
                "\t\tconst app2 = app",
                "\t\tconst setting = \"content-type\";",
                "\t\tconst anon = null;",
                "\t\tconst enabledReturnValue = await app2.enabled(setting, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash5": {
        "crashProject": "express",
        "trace": "    at Object.set (express/lib/application.js:357:25)\n    at Object.enabled (express/lib/application.js:424:23)\n    at Object.lazyrouter (express/lib/application.js:142:27)\n    at Object.next [as use] (express/lib/application.js:216:33)\n    at call (.syntest/tests/tempTest.spec.js:20:17)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading 'case sensitive routing')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst listenReturnValue = await app1.listen()",
                "\t\tconst app2 = app",
                "\t\tconst fn = \"path argument is required to res.sendFile\";",
                "\t\tconst anon = \"content-type\";",
                "\t\tconst useReturnValue = await app2.use(fn, anon)",
                "\t\tconst app3 = app",
                "\t\tconst anon1 = {}",
                "\t\tconst pathReturnValue = await app3.path(anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash6": {
        "crashProject": "express",
        "trace": "    at Object.set (express/lib/application.js:357:25)\n    at Object.enabled (express/lib/application.js:424:23)\n    at Object.lazyrouter (express/lib/application.js:142:27)\n    at Object.localSetReturnValue [as param] (express/lib/application.js:324:8)\n    at call (.syntest/tests/tempTest.spec.js:21:9)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading 'case sensitive routing')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst pathReturnValue = await app1.path()",
                "\t\tconst app2 = app",
                "\t\tconst localLength = 68;",
                "\t\tconst localName = {",
                "\t\t\t\"length\": localLength",
                "\t\t}",
                "\t\tconst fn = {}",
                "\t\tconst paramReturnValue = await app2.param(localName, fn)",
                "\t\tconst app3 = app",
                "\t\tconst setting = true;",
                "\t\tconst enabledReturnValue = await app3.enabled(setting)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash7": {
        "crashProject": "express",
        "trace": "    at Object.set (express/lib/application.js:363:50)\n    at Object.enable (express/lib/application.js:455:15)\n    at Object.next [as defaultConfiguration] (express/lib/application.js:76:32)\n    at call (.syntest/tests/tempTest.spec.js:20:17)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: Cannot set properties of undefined (setting 'x-powered-by')",
            "TypeError: Cannot read properties of undefined (reading 'case sensitive routing')",
            "TypeError: Cannot read properties of undefined (reading 'view cache')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst anon = true;",
                "\t\tconst pathReturnValue = await app1.path(anon)",
                "\t\tconst app2 = app",
                "\t\tconst anon1 = () => {};",
                "\t\tconst defaultConfigurationReturnValue = await app2.defaultConfiguration(anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst anon = () => {};",
                "\t\tconst pathReturnValue = await app1.path(anon)",
                "\t\tconst app2 = app",
                "\t\tconst anon1 = \"y)v#G}4627d§/[5§ld6\\t^<IXvp±CWx\";",
                "\t\tconst anon2 = \"C:aoRk[D(T<)y8_~k('7w6R<DqnEz1knVevmW)AqX\\\"\\ts$l}u0tP x+`wJ(\";",
                "\t\tconst lazyrouterReturnValue = await app2.lazyrouter(anon1, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst req = undefined;",
                "\t\tconst res = 1;",
                "\t\tconst callback = () => {};",
                "\t\tconst handleReturnValue = await app1.handle(req, res, callback)",
                "\t\tconst app2 = app",
                "\t\tconst anon = \", got \";",
                "\t\tconst options = () => {};",
                "\t\tconst callback1 = {}",
                "\t\tconst renderReturnValue = await app2.render(anon, options, callback1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash8": {
        "crashProject": "express",
        "trace": "    at Object.set (express/lib/application.js:363:50)\n    at Object.enable (express/lib/application.js:455:15)\n    at Object.defaultConfiguration (express/lib/application.js:76:32)\n    at call (.syntest/tests/tempTest.spec.js:19:20)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n",
        "errors": [
            "TypeError: Cannot set properties of undefined (setting 'x-powered-by')",
            "TypeError: Cannot read properties of undefined (reading 'view cache')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst listenReturnValue = await app1.listen()",
                "\t\tconst app2 = app",
                "\t\tconst defaultConfigurationReturnValue = await app2.defaultConfiguration()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst listenReturnValue = await app1.listen()",
                "\t\tconst app2 = app",
                "\t\tconst localName = \"L'MRsC[q$w/Z'X B§X'!D]ID(L-\\n<`MD/?YbnvuzJ@mR\";",
                "\t\tconst options = () => {};",
                "\t\tconst callback = () => {};",
                "\t\tconst anon = -640.1403883130329;",
                "\t\tconst renderReturnValue = await app2.render(localName, options, callback, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash9": {
        "crashProject": "express",
        "trace": "    at specify (express/node_modules/negotiator/lib/encoding.js:119:47)\n    at getEncodingPriority (express/node_modules/negotiator/lib/encoding.js:102:16)\n    at getPriority (express/node_modules/negotiator/lib/encoding.js:150:12)\n    at Array.map (<anonymous>)\n    at preferredEncodings (express/node_modules/negotiator/lib/encoding.js:149:29)\n    at Negotiator.encodings (express/node_modules/negotiator/index.js:53:10)\n    at Accepts.apply [as encodings] (express/node_modules/accepts/index.js:143:26)\n    at IncomingMessage.enabledReturnValue [as acceptsEncodings] (express/lib/request.js:147:27)\n    at call (.syntest/tests/tempTest.spec.js:17:9)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: encoding.toLowerCase is not a function",
            "TypeError: charset.toLowerCase is not a function",
            "TypeError: Cannot read properties of undefined (reading 'toLowerCase')",
            "TypeError: Cannot read properties of null (reading 'toLowerCase')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet req;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/request.js\")];",
                "\t\t(req = require(\"../instrumented/express/lib/request.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst req1 = req",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst arrayElement1 = false;",
                "\t\tconst anon = [arrayElement, arrayElement1]",
                "\t\tconst acceptsEncodingsReturnValue = await req1.acceptsEncodings(anon)",
                "\t\tconst req2 = req",
                "\t\tconst anon1 = \"'8Z:g>-{D\\\"PbX){QQVkz.b§z±±n§pkZ]\\\\s]g!wx.I'lIR_KeZ]w8p\";",
                "\t\tconst anon2 = \"tSDx81Wn_.Aj4a/'yw-GIJ:xS&EI:\\\"y?h$\\tD-W§DtOKER*}±)KT#kByf<#|T=;Ry2>\\n8k3)56fvjE@±\\\\tLm5(Z~OaT\\\"qMB5C\";",
                "\t\tconst acceptsCharsetsReturnValue = await req2.acceptsCharsets(anon1, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet req;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/request.js\")];",
                "\t\t(req = require(\"../instrumented/express/lib/request.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst req1 = req",
                "\t\tconst anon = true;",
                "\t\tconst acceptsCharsetsReturnValue = await req1.acceptsCharsets(anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet req;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/request.js\")];",
                "\t\t(req = require(\"../instrumented/express/lib/request.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst req1 = req",
                "\t\tconst anon = \"./router\";",
                "\t\tconst anon1 = undefined;",
                "\t\tconst acceptsEncodingsReturnValue = await req1.acceptsEncodings(anon, anon1)",
                "\t\tconst req2 = req",
                "\t\tconst anon2 = []",
                "\t\tconst acceptsCharsetsReturnValue = await req2.acceptsCharsets(anon2)",
                "\t\tconst req3 = req",
                "\t\tconst localName = false;",
                "\t\tconst defaultValue = () => {};",
                "\t\tconst anon3 = \"X-Content-Type-Options\";",
                "\t\tconst paramReturnValue = await req3.param(localName, defaultValue, anon3)",
                "\t\tconst req4 = req",
                "\t\tconst acceptsLanguagesReturnValue = await req4.acceptsLanguages()",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet req;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/request.js\")];",
                "\t\t(req = require(\"../instrumented/express/lib/request.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst req1 = req",
                "\t\tconst arrayElement = null;",
                "\t\tconst arrayElement1 = 298.67937684230947;",
                "\t\tconst anon = [arrayElement, arrayElement1]",
                "\t\tconst acceptsCharsetsReturnValue = await req1.acceptsCharsets(anon)",
                "\t\tconst req2 = req",
                "\t\tconst arrayElement2 = 298.67937684230947;",
                "\t\tconst arrayElement3 = null;",
                "\t\tconst arrayElement4 = 298.67937684230947;",
                "\t\tconst anon1 = [arrayElement3, arrayElement4]",
                "\t\tconst anon2 = \"i]EQ3%GOs;+&<0U$;d<KJp$h=§u@LYbek#EYhUw:|WbV7anaw'BQv%qUZ#K#OgT!#4QaT§\\\"9b}iW4hmYR~o \\t=.C6^\";",
                "\t\tconst paramReturnValue = await req2.param(arrayElement2, anon1, anon2)",
                "\t\tconst req3 = req",
                "\t\tconst acceptsEncodingsReturnValue = await req3.acceptsEncodings()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash10": {
        "crashProject": "express",
        "trace": "    at specify (express/node_modules/negotiator/lib/charset.js:103:45)\n    at getCharsetPriority (express/node_modules/negotiator/lib/charset.js:86:16)\n    at getPriority (express/node_modules/negotiator/lib/charset.js:135:12)\n    at Array.map (<anonymous>)\n    at preferredCharsets (express/node_modules/negotiator/lib/charset.js:134:29)\n    at Negotiator.charsets (express/node_modules/negotiator/index.js:44:10)\n    at Accepts.apply [as charsets] (express/node_modules/accepts/index.js:176:26)\n    at IncomingMessage.req.acceptsCharsets (express/lib/request.js:164:26)\n    at call (.syntest/tests/tempTest.spec.js:20:17)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: charset.toLowerCase is not a function",
            "TypeError: encoding.toLowerCase is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet req;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/request.js\")];",
                "\t\t(req = require(\"../instrumented/express/lib/request.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst req1 = req",
                "\t\tconst acceptsEncodingsReturnValue = await req1.acceptsEncodings()",
                "\t\tconst req2 = req",
                "\t\tconst anon = {}",
                "\t\tconst acceptsCharsetsReturnValue = await req2.acceptsCharsets(anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet req;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/request.js\")];",
                "\t\t(req = require(\"../instrumented/express/lib/request.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst req1 = req",
                "\t\tconst anon = false;",
                "\t\tconst acceptsCharsetsReturnValue = await req1.acceptsCharsets(anon)",
                "\t\tconst req2 = req",
                "\t\tconst size = {}",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst options = [arrayElement, arrayElement1]",
                "\t\tconst anon1 = \"Content-Length\";",
                "\t\tconst anon2 = () => {};",
                "\t\tconst rangeReturnValue = await req2.range(size, options, anon1, anon2)",
                "\t\tconst req3 = req",
                "\t\tconst anon3 = \"Content-Length\";",
                "\t\tconst anon4 = 38;",
                "\t\tconst anon5 = 1000;",
                "\t\tconst acceptsEncodingsReturnValue = await req3.acceptsEncodings(anon3, anon4, anon5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash11": {
        "crashProject": "express",
        "trace": "    at specify (express/node_modules/negotiator/lib/encoding.js:119:47)\n    at getEncodingPriority (express/node_modules/negotiator/lib/encoding.js:102:16)\n    at getPriority (express/node_modules/negotiator/lib/encoding.js:150:12)\n    at Array.map (<anonymous>)\n    at preferredEncodings (express/node_modules/negotiator/lib/encoding.js:149:29)\n    at Negotiator.encodings (express/node_modules/negotiator/index.js:53:10)\n    at Accepts.apply [as encodings] (express/node_modules/accepts/index.js:143:26)\n    at IncomingMessage.req.acceptsEncodings (express/lib/request.js:147:27)\n    at call (.syntest/tests/tempTest.spec.js:50:23)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n",
        "errors": [
            "TypeError: encoding.toLowerCase is not a function",
            "TypeError: charset.toLowerCase is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet req;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/request.js\")];",
                "\t\t(req = require(\"../instrumented/express/lib/request.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst req1 = req",
                "\t\tconst localName = null;",
                "\t\tconst defaultValue = 1000;",
                "\t\tconst anon = true;",
                "\t\tconst anon1 = \"booting in %s mode\";",
                "\t\tconst paramReturnValue = await req1.param(localName, defaultValue, anon, anon1)",
                "\t\tconst req2 = req",
                "\t\tconst defaultValue1 = 1000;",
                "\t\tconst defaultValue2 = 1000;",
                "\t\tconst paramReturnValue1 = await req2.param(defaultValue1, defaultValue2)",
                "\t\tconst req3 = req",
                "\t\tconst acceptsLanguagesReturnValue = await req3.acceptsLanguages()",
                "\t\tconst req4 = req",
                "\t\tconst anon2 = \"booting in %s mode\";",
                "\t\tconst anon3 = 185;",
                "\t\tconst anon4 = false;",
                "\t\tconst anon5 = 200;",
                "\t\tconst acceptsEncodingsReturnValue = await req4.acceptsEncodings(anon2, anon3, anon4, anon5)",
                "\t\tconst req5 = req",
                "\t\tconst defaultValue3 = 1000;",
                "\t\tconst defaultValue4 = {}",
                "\t\tconst anon6 = 2;",
                "\t\tconst paramReturnValue2 = await req5.param(defaultValue3, defaultValue4, anon6)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet req;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/request.js\")];",
                "\t\t(req = require(\"../instrumented/express/lib/request.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst req1 = req",
                "\t\tconst localName = 4;",
                "\t\tconst defaultValue = {}",
                "\t\tconst paramReturnValue = await req1.param(localName, defaultValue)",
                "\t\tconst req2 = req",
                "\t\tconst anon = true;",
                "\t\tconst acceptsCharsetsReturnValue = await req2.acceptsCharsets(anon)",
                "\t\tconst req3 = req",
                "\t\tconst acceptsLanguagesReturnValue = await req3.acceptsLanguages()",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash12": {
        "crashProject": "express",
        "trace": "    at ServerResponse.setHeader (node:_http_outgoing:661:45)\n    at ServerResponse.set [as header] (express/lib/response.js:776:10)\n    at ServerResponse.location (express/lib/response.js:893:41)\n    at call (.syntest/tests/tempTest.spec.js:17:19)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot set properties of undefined (setting 'location')",
            "TypeError: Cannot read properties of undefined (reading 'vary')",
            "TypeError: Cannot read properties of undefined (reading 'link')",
            "TypeError: filename must be a string",
            "TypeError: Cannot read properties of undefined (reading 'content-type')",
            "TypeError: Cannot set properties of undefined (setting 'content-type')",
            "TypeError: Invalid character in header content [\"Content-Type\"]",
            "TypeError: Cannot set properties of undefined (setting '0')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst url = false;",
                "\t\tconst arrayElement = true;",
                "\t\tconst anon = [arrayElement]",
                "\t\tconst localLocationReturnValue = await res1.location(url, anon)",
                "\t\tconst res2 = res",
                "\t\tconst arrayElement1 = -245.1043398738691;",
                "\t\tconst arrayElement2 = 318.0367540038533;",
                "\t\tconst arrayElement3 = \"O#+\\\\6tlh{Ty>l x'9hvN\\\"g27V_3[_EYIV<6sn,370 %ITQjBnk34JD: \\tCiHIedfrP+\\tN`'/lD/q+d[9n%Y|B#maxF\";",
                "\t\tconst field = [arrayElement1, arrayElement2, arrayElement3]",
                "\t\tconst arrayElement4 = true;",
                "\t\tconst anon1 = [arrayElement4]",
                "\t\tconst anon2 = 4;",
                "\t\tconst headerReturnValue = await res2.header(field, anon1, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst field = () => {};",
                "\t\tconst anon = {}",
                "\t\tconst varyReturnValue = await res1.vary(field, anon)",
                "\t\tconst res2 = res",
                "\t\tconst localName = false;",
                "\t\tconst anon1 = {}",
                "\t\tconst clearCookieReturnValue = await res2.clearCookie(localName, anon1)",
                "\t\tconst res3 = res",
                "\t\tconst field1 = () => {};",
                "\t\tconst arrayElement = true;",
                "\t\tconst arrayElement1 = undefined;",
                "\t\tconst val = [arrayElement, arrayElement1]",
                "\t\tconst appendReturnValue = await res3.append(field1, val)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst links = {}",
                "\t\tconst anon = {}",
                "\t\tconst linksReturnValue = await res1.links(links, anon)",
                "\t\tconst res2 = res",
                "\t\tconst path = null;",
                "\t\tconst options = false;",
                "\t\tconst callback = true;",
                "\t\tconst anon1 = -652;",
                "\t\tconst arrayElement = 300;",
                "\t\tconst arrayElement1 = () => {};",
                "\t\tconst arrayElement2 = 304;",
                "\t\tconst arrayElement3 = [arrayElement2]",
                "\t\tconst anon2 = [arrayElement, arrayElement1, arrayElement3]",
                "\t\tconst sendFileReturnValue = await res2.sendFile(path, options, callback, anon1, anon2)",
                "\t\tconst res3 = res",
                "\t\tconst arrayElement4 = 300;",
                "\t\tconst val = undefined;",
                "\t\tconst appendReturnValue = await res3.append(arrayElement4, val)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst path = false;",
                "\t\tconst filename = {}",
                "\t\tconst options = true;",
                "\t\tconst callback = null;",
                "\t\tconst anon = () => {};",
                "\t\tconst downloadReturnValue = await res1.download(path, filename, options, callback, anon)",
                "\t\tconst res2 = res",
                "\t\tconst filename1 = {}",
                "\t\tconst statusCode = [filename1]",
                "\t\tconst sendStatusReturnValue = await res2.sendStatus(statusCode)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst body = \"6Ka-EfN=3M+X>U9Myy\\\\\\t}Z_v/!}e/*3@]J9M@+X:<k!=?YDkwt\\\"9r/8w6$hIqL7B Rr<.ML=\";",
                "\t\tconst localSendReturnValue = await res1.send(body)",
                "\t\tconst res2 = res",
                "\t\tconst body1 = \"6Ka-EfN=3M+X>U9Myy\\\\\\t}Z_v/!}e/*3@]J9M@+X:<k!=?YDkwt\\\"9r/8w6$hIqL7B Rr<.ML=\";",
                "\t\tconst options = null;",
                "\t\tconst callback = true;",
                "\t\tconst sendfileReturnValue = await res2.sendfile(body1, options, callback)",
                "\t\tconst res3 = res",
                "\t\tconst localDefault = true;",
                "\t\tconst obj = {",
                "\t\t\t\"default\": localDefault",
                "\t\t}",
                "\t\tconst formatReturnValue = await res3.format(obj)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst indexOf = () => {};",
                "\t\tconst type = {",
                "\t\t\t\"indexOf\": indexOf",
                "\t\t}",
                "\t\tconst typeReturnValue = await res1.type(type)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst type = \"QP5\\nq~,a±249H]i1s-fjb2'Uv/Lqyy>Xmcxy`XiC;(0±\";",
                "\t\tconst anon = -666.2208116551221;",
                "\t\tconst typeReturnValue = await res1.type(type, anon)",
                "\t\tconst res2 = res",
                "\t\tconst anon1 = -666.2208116551221;",
                "\t\tconst anon2 = undefined;",
                "\t\tconst typeReturnValue1 = await res2.type(anon1, anon2)",
                "\t\tconst res3 = res",
                "\t\tconst url = \"vary\";",
                "\t\tconst type1 = \"QP5\\nq~,a±249H]i1s-fjb2'Uv/Lqyy>Xmcxy`XiC;(0±\";",
                "\t\tconst localLocationReturnValue = await res3.location(url, type1)",
                "\t\tconst res4 = res",
                "\t\tconst statusCode = 38;",
                "\t\tconst sendStatusReturnValue = await res4.sendStatus(statusCode)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst arrayElement = -245.1043398738691;",
                "\t\tconst arrayElement1 = 318.0367540038533;",
                "\t\tconst arrayElement2 = \"O#+\\\\6tlh{Ty>l x'9hvN\\\"g27V_3[_EYIV<6sn,370 %ITQjBnk34JD: \\tCiHIedfrP+\\tN`'/lD/q+d[9n%Y|B#maxF\";",
                "\t\tconst field = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst arrayElement3 = true;",
                "\t\tconst anon = [arrayElement3]",
                "\t\tconst anon1 = 4;",
                "\t\tconst headerReturnValue = await res1.header(field, anon, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash13": {
        "crashProject": "express",
        "trace": "    at new NodeError (node:internal/errors:405:5)\n    at validateString (node:internal/validators:162:11)\n    at ServerResponse.getHeader (node:_http_outgoing:719:3)\n    at ServerResponse.acceptsCharsetsReturnValue [as get] (express/lib/response.js:794:15)\n    at call (.syntest/tests/tempTest.spec.js:16:9)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: The \"name\" argument must be of type string. Received null",
            "TypeError: The \"name\" argument must be of type string. Received function field",
            "TypeError: The \"name\" argument must be of type string. Received type number (-852)",
            "TypeError: The \"name\" argument must be of type string. Received type number (-168)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst field = null;",
                "\t\tconst anon = -168;",
                "\t\tconst getReturnValue = await res1.get(field, anon)",
                "\t\tconst res2 = res",
                "\t\tconst localDefault = false;",
                "\t\tconst obj = {",
                "\t\t\t\"default\": localDefault",
                "\t\t}",
                "\t\tconst anon1 = \"ggF-xNs:|§\\\"-n|{zbhf}1xLjUH8/V6D^§ZOMNK_q}WCCwbDW G=FpC0L.O+jf9=5nZAfI\\\"±!h&dTogr,xJ%\\\"|F'H\";",
                "\t\tconst formatReturnValue = await res2.format(obj, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst field = () => {};",
                "\t\tconst anon = \"9^_.t\\\"8n'Ls+`kU±u<[yiy|QGZmr§UooH*`e(\";",
                "\t\tconst getReturnValue = await res1.get(field, anon)",
                "\t\tconst res2 = res",
                "\t\tconst links = 304;",
                "\t\tconst linksReturnValue = await res2.links(links)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst field = -852;",
                "\t\tconst anon = {}",
                "\t\tconst getReturnValue = await res1.get(field, anon)",
                "\t\tconst res2 = res",
                "\t\tconst field1 = -392;",
                "\t\tconst anon1 = null;",
                "\t\tconst getReturnValue1 = await res2.get(field1, anon1)",
                "\t\tconst res3 = res",
                "\t\tconst type = undefined;",
                "\t\tconst typeReturnValue = await res3.type(type)",
                "\t\tconst res4 = res",
                "\t\tconst url = true;",
                "\t\tconst anon2 = false;",
                "\t\tconst redirectReturnValue = await res4.redirect(url, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst anon = -168;",
                "\t\tconst anon1 = -168;",
                "\t\tconst getReturnValue = await res1.get(anon, anon1)",
                "\t\tconst res2 = res",
                "\t\tconst localDefault = false;",
                "\t\tconst obj = {",
                "\t\t\t\"default\": localDefault",
                "\t\t}",
                "\t\tconst anon2 = \"ggF-xNs:|§\\\"-n|{zbhf}1xLjUH8/V6D^§ZOMNK_q}WCCwbDW G=FpC0L.O+jf9=5nZAfI\\\"±!h&dTogr,xJ%\\\"|F'H\";",
                "\t\tconst formatReturnValue = await res2.format(obj, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash14": {
        "crashProject": "express",
        "trace": "    at ServerResponse.setHeader (node:_http_outgoing:661:45)\n    at ServerResponse.set [as header] (express/lib/response.js:776:10)\n    at ServerResponse.type [as contentType] (express/lib/response.js:604:15)\n    at ServerResponse.sendStatus (express/lib/response.js:362:8)\n    at call (.syntest/tests/tempTest.spec.js:16:66)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: Cannot set properties of undefined (setting 'content-type')",
            "TypeError: Cannot set properties of undefined (setting 'location')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst statusCode = {}",
                "\t\tconst sendStatusReturnValue = await res1.sendStatus(statusCode)",
                "\t\tconst res2 = res",
                "\t\tconst code = \"i)/r~[4A|h%b_-t^pVkZVxK?:4AVL8H2'Vfq3p@XYmUO}P h;l.U)\\nkOL\\\\M_D9G*d\\\\)jc4s=A\";",
                "\t\tconst statusCode1 = {}",
                "\t\tconst localStatusReturnValue = await res2.status(code, statusCode1)",
                "\t\tconst res3 = res",
                "\t\tconst field = () => {};",
                "\t\tconst getReturnValue = await res3.get(field)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst url = 2;",
                "\t\tconst anon = {}",
                "\t\tconst redirectReturnValue = await res1.redirect(url, anon)",
                "\t\tconst res2 = res",
                "\t\tconst url1 = undefined;",
                "\t\tconst anon1 = () => {};",
                "\t\tconst redirectReturnValue1 = await res2.redirect(url1, anon1)",
                "\t\tconst res3 = res",
                "\t\tconst path = -645;",
                "\t\tconst options = undefined;",
                "\t\tconst callback = () => {};",
                "\t\tconst sendfileReturnValue = await res3.sendfile(path, options, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash15": {
        "crashProject": "express",
        "trace": "    at new NodeError (node:internal/errors:405:5)\n    at validateString (node:internal/validators:162:11)\n    at extname (node:path:1389:5)\n    at ServerResponse.attachment (express/lib/response.js:703:15)\n    at call (.syntest/tests/tempTest.spec.js:18:13)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: The \"path\" argument must be of type string. Received type boolean (true)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst filename = true;",
                "\t\tconst attachmentReturnValue = await res1.attachment(filename)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash16": {
        "crashProject": "express",
        "trace": "    at getcontenttype (express/node_modules/content-type/index.js:189:11)\n    at Object.parse (express/node_modules/content-type/index.js:113:7)\n    at typeReturnValue (express/lib/utils.js:252:82)\n    at call (.syntest/tests/tempTest.spec.js:20:9)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: content-type header is missing from object",
            "TypeError: path.replace is not a function"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet setCharset;",
                "\tlet normalizeType;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({setCharset} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({normalizeType} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst type = {}",
                "\t\tconst charset = 60;",
                "\t\tconst setCharsetReturnValue = await setCharset(type, charset)",
                "\t\tconst type1 = \"b#'?N>=d%yXgTp1'.±<N,+5vpM*^0-7%Xbz8a/\";",
                "\t\tconst anon = null;",
                "\t\tconst normalizeTypeReturnValue = await normalizeType(type1, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet normalizeTypes;",
                "\tlet compileTrust;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({normalizeTypes} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst types = []",
                "\t\tconst types1 = [types]",
                "\t\tconst anon = () => {};",
                "\t\tconst normalizeTypesReturnValue = await normalizeTypes(types1, anon)",
                "\t\tconst val = true;",
                "\t\tconst compileTrustReturnValue = await compileTrust(val)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash17": {
        "crashProject": "express",
        "trace": "    at parseipNotation (express/node_modules/proxy-addr/index.js:163:11)\n    at compileRangeSubnets (express/node_modules/proxy-addr/index.js:126:23)\n    at Function.compile (express/node_modules/proxy-addr/index.js:112:23)\n    at typeReturnValue (express/lib/utils.js:234:20)\n    at call (.syntest/tests/tempTest.spec.js:20:9)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: invalid IP address: ZLc4d<c:1e;]d4e%g_Kt6SV8}EPKBs[H'0GAu`'qNnqdTPJdGqZ§4>5wa",
            "TypeError: invalid IP address: xmlhttprequest",
            "TypeError: invalid IP address: ZLc4d<c:1e;]d4e%g_K(6SV8}EPKBs[H'0GAu`'qNnqdTPJdGqZ§4>5wa",
            "TypeError: invalid IP address: ZLc4d<c:1e;]d4e%g_Kt6SV8}EPKBs[H'0GA`'qNnqdTPJdGqZ§4>5wa",
            "TypeError: note.lastIndexOf is not a function",
            "TypeError: invalid IP address: ZLc4d<c:1e;]d4e%g_Kt6SV8}EPKBs[H'0GAu`'qNnqdTBPJdGqZ§4>5wa",
            "TypeError: invalid IP address: i&3Pj",
            "TypeError: invalid IP address: P0AZ9J9Db*3OpdV-krw>yJy.uH*(]SI&AYLaz$2vt-G\"l&m6P?8VuQ§F\"5m_mC!Z3.JJzCT?|",
            "TypeError: invalid IP address: head"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet compileTrust;",
                "\tlet isAbsolute;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({isAbsolute} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst val = \"ZLc4d<c:1e;]d4e%g_Kt6SV8}EPKBs[H'0GAu`'qNnqdTPJdGqZ§4>5wa\";",
                "\t\tconst anon = null;",
                "\t\tconst compileTrustReturnValue = await compileTrust(val, anon)",
                "\t\tconst val1 = \"ZLc4d<c:1e;]d4e%g_Kt6SV8}EPKBs[H'0GAu`'qNnqdTPJdGqZ§4>5wa\";",
                "\t\tconst anon1 = () => {};",
                "\t\tconst anon2 = null;",
                "\t\tconst isAbsoluteReturnValue = await isAbsolute(val1, anon1, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet compileTrust;",
                "\tlet compileETag;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({compileETag} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst val = \"xmlhttprequest\";",
                "\t\tconst compileTrustReturnValue = await compileTrust(val)",
                "\t\tconst val1 = \"xmlhttprequest\";",
                "\t\tconst compileETagReturnValue = await compileETag(val1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet compileTrust;",
                "\tlet isAbsolute;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({isAbsolute} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst val = \"ZLc4d<c:1e;]d4e%g_K(6SV8}EPKBs[H'0GAu`'qNnqdTPJdGqZ§4>5wa\";",
                "\t\tconst anon = null;",
                "\t\tconst compileTrustReturnValue = await compileTrust(val, anon)",
                "\t\tconst val1 = \"ZLc4d<c:1e;]d4e%g_Kt6SV8}EPKBs[H'0GAu`'qNnqdTPJdGqZ§4>5wa\";",
                "\t\tconst anon1 = () => {};",
                "\t\tconst anon2 = \"so6J|ZfhjH5[O#{b9ATYJUQV$5AKbu3JAI?hk>UfTb7Z#[{oHt0sdR2'w&!±s6'\";",
                "\t\tconst isAbsoluteReturnValue = await isAbsolute(val1, anon1, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet compileTrust;",
                "\tlet isAbsolute;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({isAbsolute} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst val = \"ZLc4d<c:1e;]d4e%g_Kt6SV8}EPKBs[H'0GA`'qNnqdTPJdGqZ§4>5wa\";",
                "\t\tconst anon = null;",
                "\t\tconst compileTrustReturnValue = await compileTrust(val, anon)",
                "\t\tconst val1 = \"ZLc4d<c:1e;]d4e%g_Kt6SV8}EPKBs[H'0GAu`'qNnqdTPJdGqZ§4>5wa\";",
                "\t\tconst anon1 = () => {};",
                "\t\tconst anon2 = null;",
                "\t\tconst isAbsoluteReturnValue = await isAbsolute(val1, anon1, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet compileTrust;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = 531;",
                "\t\tconst arrayElement1 = -562.1577615656488;",
                "\t\tconst arrayElement2 = \"html\";",
                "\t\tconst arrayElement3 = []",
                "\t\tconst val = [arrayElement, arrayElement1, arrayElement2, arrayElement3]",
                "\t\tconst compileTrustReturnValue = await compileTrust(val)",
                "\t\tconst val1 = 441;",
                "\t\tconst compileTrustReturnValue1 = await compileTrust(val1)",
                "\t\tconst val2 = true;",
                "\t\tconst anon = {}",
                "\t\tconst compileTrustReturnValue2 = await compileTrust(val2, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet compileTrust;",
                "\tlet isAbsolute;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({isAbsolute} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst val = \"ZLc4d<c:1e;]d4e%g_Kt6SV8}EPKBs[H'0GAu`'qNnqdTBPJdGqZ§4>5wa\";",
                "\t\tconst anon = null;",
                "\t\tconst compileTrustReturnValue = await compileTrust(val, anon)",
                "\t\tconst val1 = \"ZLc4d<c:1e;]d4e%g_Kt6SV8}EPKBs[H'0GAu`'qNnqdTPJdGqZ§4>5wa\";",
                "\t\tconst anon1 = () => {};",
                "\t\tconst anon2 = {}",
                "\t\tconst isAbsoluteReturnValue = await isAbsolute(val1, anon1, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet compileTrust;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst arrayElement = \"i&3Pj/jh} @54)YA|7Q~'\\\\.AWgyd!~+3LX±c.cF} L{J\\\\\\\\\\\\ojnRi7!Su& D\\\"SNqEk|DeCb\";",
                "\t\tconst split = () => {};",
                "\t\tconst val = {",
                "\t\t\t\"split\": split",
                "\t\t}",
                "\t\tconst val1 = true;",
                "\t\tconst val2 = [arrayElement, val, val1]",
                "\t\tconst compileTrustReturnValue = await compileTrust(val2)",
                "\t\tconst val3 = 441;",
                "\t\tconst compileTrustReturnValue1 = await compileTrust(val3)",
                "\t\tconst val4 = true;",
                "\t\tconst anon = -325;",
                "\t\tconst compileTrustReturnValue2 = await compileTrust(val4, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet compileTrust;",
                "\tlet isAbsolute;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({isAbsolute} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst val = \"P0AZ9J9Db*3OpdV-krw>yJy.uH*(]SI&AYLaz$2vt-G\\\"l&m6P?8VuQ§F\\\"5m_mC!Z3.JJzCT?|\";",
                "\t\tconst anon = {}",
                "\t\tconst compileTrustReturnValue = await compileTrust(val, anon)",
                "\t\tconst val1 = \"P0AZ9J9Db*3OpdV-krw>yJy.uH*(]SI&AYLaz$2vt-G\\\"l&m6P?8VuQ§F\\\"5m_mC!Z3.JJzCT?|\";",
                "\t\tconst isAbsoluteReturnValue = await isAbsolute(val1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet compileTrust;",
                "\tlet compileQueryParser;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({compileQueryParser} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst types = \"head\";",
                "\t\tconst compileTrustReturnValue = await compileTrust(types)",
                "\t\tconst val = 28.456627747399125;",
                "\t\tconst anon = false;",
                "\t\tconst anon1 = null;",
                "\t\tconst compileQueryParserReturnValue = await compileQueryParser(val, anon, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash18": {
        "crashProject": "express",
        "trace": "    at getcontenttype (express/node_modules/content-type/index.js:189:11)\n    at Object.parse (express/node_modules/content-type/index.js:113:7)\n    at setCharset (express/lib/utils.js:252:82)\n    at call (.syntest/tests/tempTest.spec.js:45:18)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: content-type header is missing from object"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet normalizeTypes;",
                "\tlet setCharset;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({normalizeTypes} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({setCharset} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst types = () => {};",
                "\t\tconst anon = () => {};",
                "\t\tconst anon1 = \"2\\\\eitz%3>(I4#\\n@*OI%dA\\\"(p,W?\\\\7AV`!bf\\\\|A\\n\";",
                "\t\tconst normalizeTypesReturnValue = await normalizeTypes(types, anon, anon1)",
                "\t\tconst anon2 = {}",
                "\t\tconst type = [anon2]",
                "\t\tconst anon3 = () => {};",
                "\t\tconst arrayElement = null;",
                "\t\tconst anon4 = {}",
                "\t\tconst arrayElement1 = 248.0960110115925;",
                "\t\tconst arrayElement2 = [anon4, arrayElement1]",
                "\t\tconst arrayElement3 = [arrayElement2]",
                "\t\tconst anon5 = [arrayElement, arrayElement3]",
                "\t\tconst setCharsetReturnValue = await setCharset(type, anon3, anon5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash19": {
        "crashProject": "express",
        "trace": "    at parseipNotation (express/node_modules/proxy-addr/index.js:157:18)\n    at compileRangeSubnets (express/node_modules/proxy-addr/index.js:126:23)\n    at Function.compile (express/node_modules/proxy-addr/index.js:112:23)\n    at exports.compileTrust (express/lib/utils.js:234:20)\n    at call (.syntest/tests/tempTest.spec.js:50:18)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: note.lastIndexOf is not a function",
            "TypeError: invalid IP address: head"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet compileTrust;",
                "\tlet normalizeType;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({normalizeType} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst val = false;",
                "\t\tconst compileTrustReturnValue = await compileTrust(val)",
                "\t\tconst val1 = -836;",
                "\t\tconst anon = \"\\\"\";",
                "\t\tconst anon1 = \"f0]InjmL|5p[Md_.4UUkn.MfDg/@S-WL:><8MY[9}P1{.mzw\";",
                "\t\tconst compileTrustReturnValue1 = await compileTrust(val1, anon, anon1)",
                "\t\tconst anon2 = \"\\\"\";",
                "\t\tconst anon3 = () => {};",
                "\t\tconst normalizeTypeReturnValue = await normalizeType(anon2, anon3)",
                "\t\tconst arrayElement = {}",
                "\t\tconst anon4 = () => {};",
                "\t\tconst val2 = [arrayElement, anon4]",
                "\t\tconst compileTrustReturnValue2 = await compileTrust(val2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet normalizeTypes;",
                "\tlet compileTrust;",
                "\tlet compileQueryParser;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/utils.js\")];",
                "\t\t({normalizeTypes} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({compileTrust} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t\t({compileQueryParser} = require(\"../instrumented/express/lib/utils.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst types = \"head\";",
                "\t\tconst anon = \"mbfyN=B#5:j%GRC=q\\\\\\\"emM@X4>+\";",
                "\t\tconst normalizeTypesReturnValue = await normalizeTypes(types, anon)",
                "\t\tconst types1 = \"head\";",
                "\t\tconst compileTrustReturnValue = await compileTrust(types1)",
                "\t\tconst val = 28.456627747399125;",
                "\t\tconst anon1 = false;",
                "\t\tconst anon2 = null;",
                "\t\tconst compileQueryParserReturnValue = await compileQueryParser(val, anon1, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash20": {
        "crashProject": "express",
        "trace": "    at new NodeError (node:internal/errors:405:5)\n    at validateString (node:internal/validators:162:11)\n    at extname (node:path:1389:5)\n    at new View (express/lib/view.js:56:14)\n    at call (.syntest/tests/tempTest.spec.js:20:24)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: The \"path\" argument must be of type string. Received type number (62)",
            "TypeError: The \"path\" argument must be of type string. Received type number (1000)",
            "TypeError: The \"path\" argument must be of type string. Received type number (406)",
            "TypeError: The \"path\" argument must be of type string. Received undefined",
            "TypeError: The \"path\" argument must be of type string. Received type number (930.6352506423441)",
            "TypeError: The \"path\" argument must be of type string. Received type number (4)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-243)",
            "TypeError: The \"path\" argument must be of type string. Received type number (318)",
            "TypeError: The \"path\" argument must be of type string. Received type number (211)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-945)",
            "TypeError: The \"path\" argument must be of type string. Received type number (2)",
            "TypeError: The \"path\" argument must be of type string. Received type number (300)",
            "TypeError: The \"path\" argument must be of type string. Received type number (400)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-912)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-378.90028103380257)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-629.0506803253055)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-369)",
            "TypeError: The \"path\" argument must be of type string. Received type number (304)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-647)",
            "TypeError: The \"path\" argument must be of type string. Received type number (2.718281828459045)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-831.3260952480425)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-230.86631106606296)",
            "TypeError: The \"path\" argument must be of type string. Received type number (38)",
            "TypeError: The \"path\" argument must be of type string. Received type number (1)",
            "TypeError: The \"path\" argument must be of type string. Received type number (724)",
            "TypeError: The \"path\" argument must be of type string. Received type number (204)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-987.9030674219206)",
            "TypeError: The \"path\" argument must be of type string. Received type number (319.5686555448592)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-140.3760044035439)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-546)",
            "TypeError: The \"path\" argument must be of type string. Received type number (3)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-267.48859097736647)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-706)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-268)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-191.3991597710866)",
            "TypeError: The \"path\" argument must be of type string. Received an instance of Object",
            "TypeError: The \"path\" argument must be of type string. Received function localName",
            "TypeError: The \"path\" argument must be of type string. Received type number (-265)",
            "TypeError: The \"path\" argument must be of type string. Received type number (395.1688733260903)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-541)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-919)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-417)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-868)",
            "TypeError: The \"path\" argument must be of type string. Received type number (214)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-765)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-786)",
            "TypeError: The \"path\" argument must be of type string. Received type number (427.4598284668666)",
            "TypeError: The \"path\" argument must be of type string. Received type number (0)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-802)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-143.21764762710552)",
            "TypeError: The \"path\" argument must be of type string. Received type number (735)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-304)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-324.6095588694036)",
            "TypeError: The \"path\" argument must be of type string. Received type number (800.016939876288)",
            "TypeError: The \"path\" argument must be of type string. Received type number (752.3605206834386)",
            "TypeError: The \"path\" argument must be of type string. Received type number (16.13739456917449)",
            "TypeError: The \"path\" argument must be of type string. Received type number (430.6119282727334)",
            "TypeError: The \"path\" argument must be of type string. Received type number (302)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-415.43763122553014)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-381)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-859.2308597745227)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-945.1871347012511)",
            "TypeError: The \"path\" argument must be of type string. Received type number (61)",
            "TypeError: The \"path\" argument must be of type string. Received type number (68.16756064688963)",
            "TypeError: The \"path\" argument must be of type string. Received type number (106.95005271030368)",
            "TypeError: The \"path\" argument must be of type string. Received type number (60)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-715.2225480140517)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-1)",
            "TypeError: The \"path\" argument must be of type string. Received type number (33.796782967824356)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-60.497414636168514)",
            "TypeError: The \"path\" argument must be of type string. Received type number (943.1867265620303)",
            "TypeError: The \"path\" argument must be of type string. Received type number (93)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-904.7908324798537)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-923.3278822250747)",
            "TypeError: The \"path\" argument must be of type string. Received type number (72.23231672527228)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-918.2637939476348)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-873.2155024909121)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-468)",
            "TypeError: The \"path\" argument must be of type string. Received type number (598.2527257263491)",
            "TypeError: The \"path\" argument must be of type string. Received type number (59.005457636984815)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-987.3735476329501)",
            "TypeError: The \"path\" argument must be of type string. Received type number (455)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-781.1050450839057)",
            "TypeError: The \"path\" argument must be of type string. Received type number (936.7353744410395)",
            "TypeError: The \"path\" argument must be of type string. Received type number (189)",
            "TypeError: The \"path\" argument must be of type string. Received type number (385.1334387049603)",
            "TypeError: The \"path\" argument must be of type string. Received type number (452.6971756512296)",
            "TypeError: The \"path\" argument must be of type string. Received type number (257.5291178168643)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-662)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-567)",
            "TypeError: The \"path\" argument must be of type string. Received type number (63)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-788)",
            "TypeError: The \"path\" argument must be of type string. Received type number (661)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-731.1647592283198)",
            "TypeError: The \"path\" argument must be of type string. Received type number (3.141592653589793)",
            "TypeError: The \"path\" argument must be of type string. Received type number (698.8889604074548)",
            "TypeError: The \"path\" argument must be of type string. Received type number (447)",
            "TypeError: The \"path\" argument must be of type string. Received type number (460)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-135.7427476820617)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-521)",
            "TypeError: The \"path\" argument must be of type string. Received type number (203.60788381819316)",
            "TypeError: The \"path\" argument must be of type string. Received type number (365)",
            "TypeError: The \"path\" argument must be of type string. Received type number (712.7305143237527)",
            "TypeError: The \"path\" argument must be of type string. Received type number (333.46096656397276)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-928.0972126283641)",
            "TypeError: The \"path\" argument must be of type string. Received type number (40.434124305485966)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-217.86460219313994)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-591.8726940087088)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-790.3347702663556)",
            "TypeError: The \"path\" argument must be of type string. Received type number (492.70615692626507)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-384.2479705617012)",
            "TypeError: The \"path\" argument must be of type string. Received type number (457.7563156066185)",
            "TypeError: The \"path\" argument must be of type string. Received type number (66.337569729849)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-781)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-418)",
            "TypeError: The \"path\" argument must be of type string. Received type number (892.6005789871742)",
            "TypeError: The \"path\" argument must be of type string. Received type number (200)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-279)",
            "TypeError: The \"path\" argument must be of type string. Received type number (876)",
            "TypeError: The \"path\" argument must be of type string. Received type number (857)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-995)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-577.5332124210017)",
            "TypeError: The \"path\" argument must be of type string. Received type number (501)",
            "TypeError: The \"path\" argument must be of type string. Received type number (55)",
            "TypeError: The \"path\" argument must be of type string. Received type number (52)",
            "TypeError: The \"path\" argument must be of type string. Received type number (39.45195858340617)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-963)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-105)",
            "TypeError: The \"path\" argument must be of type string. Received type number (251)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-135)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-669.6528267195181)",
            "TypeError: The \"path\" argument must be of type string. Received type boolean (true)",
            "TypeError: The \"path\" argument must be of type string. Received type number (180)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-496.2090505394371)",
            "TypeError: The \"path\" argument must be of type string. Received type number (620)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-621)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-493.49040159861477)",
            "TypeError: The \"path\" argument must be of type string. Received type number (-254)"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 62;",
                "\t\tconst defaultEngine = null;",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst arrayElement2 = {}",
                "\t\tconst root = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = null;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localName1 = -298.9425324439785;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\tconst localName2 = 62;",
                "\t\tconst defaultEngine1 = null;",
                "\t\tconst arrayElement3 = {}",
                "\t\tconst arrayElement4 = null;",
                "\t\tconst arrayElement5 = {}",
                "\t\tconst root1 = [arrayElement3, arrayElement4, arrayElement5]",
                "\t\tconst engines1 = {}",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon1 = null;",
                "\t\tconst view1 = new View(localName2, options1, anon1)",
                "\t\tconst localDir = undefined;",
                "\t\tconst file = undefined;",
                "\t\tconst anon2 = null;",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, file, anon2)",
                "\t\tconst localName3 = 62;",
                "\t\tconst defaultEngine2 = null;",
                "\t\tconst arrayElement6 = {}",
                "\t\tconst arrayElement7 = null;",
                "\t\tconst arrayElement8 = {}",
                "\t\tconst root2 = [arrayElement6, arrayElement7, arrayElement8]",
                "\t\tconst engines2 = {}",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst anon3 = null;",
                "\t\tconst view2 = new View(localName3, options2, anon3)",
                "\t\tconst options3 = \"get\";",
                "\t\tconst callback = false;",
                "\t\tconst renderReturnValue = await view2.render(options3, callback)",
                "\t\tconst localName4 = 62;",
                "\t\tconst defaultEngine3 = null;",
                "\t\tconst arrayElement9 = {}",
                "\t\tconst arrayElement10 = null;",
                "\t\tconst arrayElement11 = {}",
                "\t\tconst root3 = [arrayElement9, arrayElement10, arrayElement11]",
                "\t\tconst engines3 = {}",
                "\t\tconst options4 = {",
                "\t\t\t\"defaultEngine\": defaultEngine3,",
                "\t\t\t\"root\": root3,",
                "\t\t\t\"engines\": engines3",
                "\t\t}",
                "\t\tconst anon4 = null;",
                "\t\tconst view3 = new View(localName4, options4, anon4)",
                "\t\tconst callback1 = false;",
                "\t\tconst callback2 = 2.718281828459045;",
                "\t\tconst renderReturnValue1 = await view3.render(callback1, callback2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 1000;",
                "\t\tconst options = true;",
                "\t\tconst anon = \"utf-8\";",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst options1 = 204;",
                "\t\tconst callback = {}",
                "\t\tconst anon1 = \"|{?0gFSe>#N?/^.=B§QR]s'on§(%lT'RKRifM&@G1!EF{§)R@^)4imzO+I^5u;i_70IY5zfo<xe<P4n'&h#|<}§Gs5)oRVgv\";",
                "\t\tconst anon2 = () => {};",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon1, anon2)",
                "\t\tconst localName1 = 1000;",
                "\t\tconst options2 = true;",
                "\t\tconst anon3 = \"utf-8\";",
                "\t\tconst view1 = new View(localName1, options2, anon3)",
                "\t\tconst callback1 = {}",
                "\t\tconst anon4 = () => {};",
                "\t\tconst resolveReturnValue = await view1.resolve(callback1, anon4)",
                "\t\tconst localName2 = 1000;",
                "\t\tconst options3 = true;",
                "\t\tconst anon5 = \"utf-8\";",
                "\t\tconst view2 = new View(localName2, options3, anon5)",
                "\t\tconst options4 = 204;",
                "\t\tconst callback2 = null;",
                "\t\tconst renderReturnValue1 = await view2.render(options4, callback2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 406;",
                "\t\tconst options = undefined;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = 0;",
                "\t\tconst file = 204;",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file)",
                "\t\tconst localName1 = 406;",
                "\t\tconst options1 = undefined;",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst localName2 = \"write\";",
                "\t\tconst lookupReturnValue = await view1.lookup(localName2)",
                "\t\tconst localName3 = 406;",
                "\t\tconst options2 = undefined;",
                "\t\tconst view2 = new View(localName3, options2)",
                "\t\tconst localName4 = \"write\";",
                "\t\tconst anon = true;",
                "\t\tconst lookupReturnValue1 = await view2.lookup(localName4, anon)",
                "\t\tconst localName5 = 406;",
                "\t\tconst options3 = undefined;",
                "\t\tconst view3 = new View(localName5, options3)",
                "\t\tconst options4 = {}",
                "\t\tconst options5 = undefined;",
                "\t\tconst anon1 = \"!'MXUmks{O^§x?#sr§OTt-oy6)|meHx]Q_nS*m+_§(N\\\\y±9\\\"'\";",
                "\t\tconst renderReturnValue = await view3.render(options4, options5, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = undefined;",
                "\t\tconst options = undefined;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = false;",
                "\t\tconst file = null;",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file)",
                "\t\tconst localName1 = undefined;",
                "\t\tconst options1 = undefined;",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst localDir1 = \"://\";",
                "\t\tconst localDir2 = false;",
                "\t\tconst resolveReturnValue1 = await view1.resolve(localDir1, localDir2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 930.6352506423441;",
                "\t\tconst options = false;",
                "\t\tconst anon = true;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst options1 = -249;",
                "\t\tconst callback = \"cookieParser\";",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = 930.6352506423441;",
                "\t\tconst options2 = false;",
                "\t\tconst anon1 = true;",
                "\t\tconst view1 = new View(localName1, options2, anon1)",
                "\t\tconst options3 = -911.2989859857197;",
                "\t\tconst localName2 = 930.6352506423441;",
                "\t\tconst renderReturnValue1 = await view1.render(options3, localName2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 4;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = 4;",
                "\t\tconst options1 = true;",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst options2 = () => {};",
                "\t\tconst options3 = true;",
                "\t\tconst renderReturnValue = await view1.render(options2, options3)",
                "\t\tconst localName2 = 4;",
                "\t\tconst options4 = true;",
                "\t\tconst view2 = new View(localName2, options4)",
                "\t\tconst localName3 = \"XmGL'A\\t)CeR.;4\\t'rt#6JRxio@\\\"4\\\" (_`U']V,pd$!LyH4JOq±dC/wf]Q$UI^g}]<k'+<,z\";",
                "\t\tconst anon = \"router.param(fn): Refactor to use path params\";",
                "\t\tconst lookupReturnValue = await view2.lookup(localName3, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -243;",
                "\t\tconst defaultEngine = false;",
                "\t\tconst root = \"S$}T3~I5c#BuDYOAd=$~HN1}^Z{O$YaMfeO4_:9DZc63I@Row7~g$wz\";",
                "\t\tconst engines = []",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = true;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localName1 = 538;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\tconst localName2 = -243;",
                "\t\tconst defaultEngine1 = false;",
                "\t\tconst root1 = \"S$}T3~I5c#BuDYOAd=$~HN1}^Z{O$YaMfeO4_:9DZc63I@Row7~g$wz\";",
                "\t\tconst engines1 = []",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon1 = true;",
                "\t\tconst view1 = new View(localName2, options1, anon1)",
                "\t\tconst localName3 = 538;",
                "\t\tconst localName4 = -243;",
                "\t\tconst anon2 = true;",
                "\t\tconst anon3 = true;",
                "\t\tconst resolveReturnValue = await view1.resolve(localName3, localName4, anon2, anon3)",
                "\t\tconst localName5 = -243;",
                "\t\tconst defaultEngine2 = false;",
                "\t\tconst root2 = \"S$}T3~I5c#BuDYOAd=$~HN1}^Z{O$YaMfeO4_:9DZc63I@Row7~g$wz\";",
                "\t\tconst engines2 = []",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst anon4 = true;",
                "\t\tconst view2 = new View(localName5, options2, anon4)",
                "\t\tconst options3 = \"type-is\";",
                "\t\tconst callback = 919.9679674872466;",
                "\t\tconst defaultEngine3 = false;",
                "\t\tconst root3 = \"S$}T3~I5c#BuDYOAd=$~HN1}^Z{O$YaMfeO4_:9DZc63I@Row7~g$wz\";",
                "\t\tconst engines3 = []",
                "\t\tconst options4 = {",
                "\t\t\t\"defaultEngine\": defaultEngine3,",
                "\t\t\t\"root\": root3,",
                "\t\t\t\"engines\": engines3",
                "\t\t}",
                "\t\tconst root4 = \"S$}T3~I5c#BuDYOAd=$~HN1}^Z{O$YaMfeO4_:9DZc63I@Row7~g$wz\";",
                "\t\tconst renderReturnValue = await view2.render(options3, callback, options4, root4)",
                "\t\tconst localName6 = -243;",
                "\t\tconst defaultEngine4 = false;",
                "\t\tconst root5 = \"S$}T3~I5c#BuDYOAd=$~HN1}^Z{O$YaMfeO4_:9DZc63I@Row7~g$wz\";",
                "\t\tconst engines4 = []",
                "\t\tconst options5 = {",
                "\t\t\t\"defaultEngine\": defaultEngine4,",
                "\t\t\t\"root\": root5,",
                "\t\t\t\"engines\": engines4",
                "\t\t}",
                "\t\tconst anon5 = true;",
                "\t\tconst view3 = new View(localName6, options5, anon5)",
                "\t\tconst localDir = true;",
                "\t\tconst file = () => {};",
                "\t\tconst resolveReturnValue1 = await view3.resolve(localDir, file)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 318;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = {}",
                "\t\tconst anon = -17.891079648027812;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1, anon)",
                "\t\tconst localName2 = 318;",
                "\t\tconst options1 = false;",
                "\t\tconst view1 = new View(localName2, options1)",
                "\t\tconst localDir = \"booting in %s mode\";",
                "\t\tconst file = undefined;",
                "\t\tconst anon1 = () => {};",
                "\t\tconst anon2 = -17.891079648027812;",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, file, anon1, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 211;",
                "\t\tconst defaultEngine = \"req.acceptsCharset: Use acceptsCharsets instead\";",
                "\t\tconst root = null;",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = 0;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localDir = \"strong\";",
                "\t\tconst file = 3;",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file)",
                "\t\tconst localName1 = 211;",
                "\t\tconst defaultEngine1 = \"req.acceptsCharset: Use acceptsCharsets instead\";",
                "\t\tconst root1 = null;",
                "\t\tconst engines1 = {}",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon1 = 0;",
                "\t\tconst view1 = new View(localName1, options1, anon1)",
                "\t\tconst options2 = \"s:\";",
                "\t\tconst callback = null;",
                "\t\tconst renderReturnValue = await view1.render(options2, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -945;",
                "\t\tconst defaultEngine = \"end\";",
                "\t\tconst root = null;",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = null;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\tconst localName2 = -945;",
                "\t\tconst defaultEngine1 = \"end\";",
                "\t\tconst root1 = null;",
                "\t\tconst engines1 = {}",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName2, options1)",
                "\t\tconst localName3 = null;",
                "\t\tconst anon = 106.91369543755036;",
                "\t\tconst lookupReturnValue1 = await view1.lookup(localName3, anon)",
                "\t\tconst localName4 = -945;",
                "\t\tconst defaultEngine2 = \"end\";",
                "\t\tconst root2 = null;",
                "\t\tconst engines2 = {}",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst view2 = new View(localName4, options2)",
                "\t\tconst localDir = \"S§Vvr\";",
                "\t\tconst file = () => {};",
                "\t\tconst resolveReturnValue = await view2.resolve(localDir, file)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 2;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = \"1'm5)u_t±(l'`yo>VIG)\\\"qo-2Mpo\\ty6'g7c:@p7Khs*eb^ZR§=AxTzROj`gc<QG1z]#T\";",
                "\t\tconst options1 = true;",
                "\t\tconst anon = \"~>f|\";",
                "\t\tconst view1 = new View(localName1, options1, anon)",
                "\t\tconst localName2 = 2;",
                "\t\tconst localName3 = 2;",
                "\t\tconst renderReturnValue = await view1.render(localName2, localName3)",
                "\t\tconst localName4 = \"1'm5)u_t±(l'`yo>VIG)\\\"qo-2Mpo\\ty6'g7c:@p7Khs*eb^ZR§=AxTzROj`gc<QG1z]#T\";",
                "\t\tconst options2 = true;",
                "\t\tconst anon1 = \"~>f|\";",
                "\t\tconst view2 = new View(localName4, options2, anon1)",
                "\t\tconst options3 = true;",
                "\t\tconst localName5 = \"1'm5)u_t±(l'`yo>VIG)\\\"qo-2Mpo\\ty6'g7c:@p7Khs*eb^ZR§=AxTzROj`gc<QG1z]#T\";",
                "\t\tconst anon2 = false;",
                "\t\tconst renderReturnValue1 = await view2.render(options3, localName5, anon2)",
                "\t\tconst localName6 = \"1'm5)u_t±(l'`yo>VIG)\\\"qo-2Mpo\\ty6'g7c:@p7Khs*eb^ZR§=AxTzROj`gc<QG1z]#T\";",
                "\t\tconst options4 = true;",
                "\t\tconst anon3 = \"~>f|\";",
                "\t\tconst view3 = new View(localName6, options4, anon3)",
                "\t\tconst localDir = undefined;",
                "\t\tconst file = true;",
                "\t\tconst resolveReturnValue = await view3.resolve(localDir, file)",
                "\t\tconst localName7 = \"1'm5)u_t±(l'`yo>VIG)\\\"qo-2Mpo\\ty6'g7c:@p7Khs*eb^ZR§=AxTzROj`gc<QG1z]#T\";",
                "\t\tconst options5 = true;",
                "\t\tconst anon4 = \"~>f|\";",
                "\t\tconst view4 = new View(localName7, options5, anon4)",
                "\t\tconst options6 = () => {};",
                "\t\tconst localName8 = 2;",
                "\t\tconst renderReturnValue2 = await view4.render(options6, localName8)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 300;",
                "\t\tconst defaultEngine = null;",
                "\t\tconst root = 204;",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = {}",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localName1 = 300;",
                "\t\tconst defaultEngine1 = null;",
                "\t\tconst root1 = 204;",
                "\t\tconst engines1 = {}",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon1 = {}",
                "\t\tconst view1 = new View(localName1, options1, anon1)",
                "\t\tconst defaultEngine2 = null;",
                "\t\tconst root2 = 204;",
                "\t\tconst engines2 = {}",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst anon2 = \"subdomains\";",
                "\t\tconst lookupReturnValue = await view1.lookup(options2, anon2)",
                "\t\tconst localName2 = 300;",
                "\t\tconst defaultEngine3 = null;",
                "\t\tconst root3 = 204;",
                "\t\tconst engines3 = {}",
                "\t\tconst options3 = {",
                "\t\t\t\"defaultEngine\": defaultEngine3,",
                "\t\t\t\"root\": root3,",
                "\t\t\t\"engines\": engines3",
                "\t\t}",
                "\t\tconst anon3 = {}",
                "\t\tconst view2 = new View(localName2, options3, anon3)",
                "\t\tconst root4 = 204;",
                "\t\tconst root5 = 204;",
                "\t\tconst renderReturnValue = await view2.render(root4, root5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 400;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = undefined;",
                "\t\tconst callback = () => {};",
                "\t\tconst anon = () => {};",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon)",
                "\t\tconst localName1 = 400;",
                "\t\tconst options2 = true;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst options3 = \"./route\";",
                "\t\tconst options4 = true;",
                "\t\tconst renderReturnValue1 = await view1.render(options3, options4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -912;",
                "\t\tconst options = {}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = -912;",
                "\t\tconst options1 = {}",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst localName2 = -912;",
                "\t\tconst callback = false;",
                "\t\tconst renderReturnValue = await view1.render(localName2, callback)",
                "\t\tconst localName3 = -912;",
                "\t\tconst options2 = {}",
                "\t\tconst view2 = new View(localName3, options2)",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst options3 = [arrayElement]",
                "\t\tconst callback1 = \"string\";",
                "\t\tconst renderReturnValue1 = await view2.render(options3, callback1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -378.90028103380257;",
                "\t\tconst defaultEngine = null;",
                "\t\tconst root = 476.2514447559804;",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = () => {};",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst options1 = () => {};",
                "\t\tconst callback = () => {};",
                "\t\tconst anon1 = null;",
                "\t\tconst anon2 = {}",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon1, anon2)",
                "\t\tconst localName1 = -378.90028103380257;",
                "\t\tconst defaultEngine1 = null;",
                "\t\tconst root1 = 476.2514447559804;",
                "\t\tconst engines1 = {}",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon3 = () => {};",
                "\t\tconst view1 = new View(localName1, options2, anon3)",
                "\t\tconst root2 = 476.2514447559804;",
                "\t\tconst callback1 = true;",
                "\t\tconst anon4 = undefined;",
                "\t\tconst anon5 = undefined;",
                "\t\tconst renderReturnValue1 = await view1.render(root2, callback1, anon4, anon5)",
                "\t\tconst localName2 = -378.90028103380257;",
                "\t\tconst defaultEngine2 = null;",
                "\t\tconst root3 = 476.2514447559804;",
                "\t\tconst engines2 = {}",
                "\t\tconst options3 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root3,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst anon6 = () => {};",
                "\t\tconst view2 = new View(localName2, options3, anon6)",
                "\t\tconst defaultEngine3 = null;",
                "\t\tconst lookupReturnValue = await view2.lookup(defaultEngine3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -629.0506803253055;",
                "\t\tconst options = 859;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = -629.0506803253055;",
                "\t\tconst options1 = 859;",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst options2 = {}",
                "\t\tconst callback = () => {};",
                "\t\tconst anon = false;",
                "\t\tconst renderReturnValue = await view1.render(options2, callback, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -369;",
                "\t\tconst defaultEngine = () => {};",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = () => {};",
                "\t\tconst arrayElement2 = {}",
                "\t\tconst arrayElement3 = false;",
                "\t\tconst root = [arrayElement, arrayElement1, arrayElement2, arrayElement3]",
                "\t\tconst engines = 1;",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = -369;",
                "\t\tconst defaultEngine1 = () => {};",
                "\t\tconst arrayElement4 = {}",
                "\t\tconst arrayElement5 = () => {};",
                "\t\tconst arrayElement6 = {}",
                "\t\tconst arrayElement7 = false;",
                "\t\tconst root1 = [arrayElement4, arrayElement5, arrayElement6, arrayElement7]",
                "\t\tconst engines1 = 1;",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst arrayElement8 = {}",
                "\t\tconst file = null;",
                "\t\tconst anon = null;",
                "\t\tconst resolveReturnValue = await view1.resolve(arrayElement8, file, anon)",
                "\t\tconst localName2 = -369;",
                "\t\tconst defaultEngine2 = () => {};",
                "\t\tconst arrayElement9 = {}",
                "\t\tconst arrayElement10 = () => {};",
                "\t\tconst arrayElement11 = {}",
                "\t\tconst arrayElement12 = false;",
                "\t\tconst root2 = [arrayElement9, arrayElement10, arrayElement11, arrayElement12]",
                "\t\tconst engines2 = 1;",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst view2 = new View(localName2, options2)",
                "\t\tconst localDir = \".\";",
                "\t\tconst file1 = \"trim prefix (%s) from url %s\";",
                "\t\tconst resolveReturnValue1 = await view2.resolve(localDir, file1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 304;",
                "\t\tconst defaultEngine = {}",
                "\t\tconst root = false;",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = false;",
                "\t\tconst callback = undefined;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = 304;",
                "\t\tconst defaultEngine1 = {}",
                "\t\tconst root1 = false;",
                "\t\tconst engines1 = {}",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst options3 = \"GET\";",
                "\t\tconst callback1 = false;",
                "\t\tconst renderReturnValue1 = await view1.render(options3, callback1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -647;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = {}",
                "\t\tconst callback = 62;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = -647;",
                "\t\tconst options2 = false;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst localName2 = -647;",
                "\t\tconst lookupReturnValue = await view1.lookup(localName2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 2.718281828459045;",
                "\t\tconst options = \"res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead\";",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = {}",
                "\t\tconst callback = null;",
                "\t\tconst anon = \"=cKmA`±§cH{]LN<L`OZg\\\"G1P}{]§IEbEm^x[/G*iHO$Q#;fhSOTBCyV!$l['}ea1\\\\s%;>$,$k/it8'[j(Q(Cfz[ImUQo[H\";",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon)",
                "\t\tconst localName1 = 2.718281828459045;",
                "\t\tconst options2 = \"res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead\";",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst options3 = \"res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead\";",
                "\t\tconst callback1 = 400;",
                "\t\tconst renderReturnValue1 = await view1.render(options3, callback1)",
                "\t\tconst localName2 = 2.718281828459045;",
                "\t\tconst options4 = \"res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead\";",
                "\t\tconst view2 = new View(localName2, options4)",
                "\t\tconst localName3 = 2.718281828459045;",
                "\t\tconst callback2 = \"Uz*S1JWtfv`NI$v!Y±8\\\\M'|x_u9P@6[C2?2gZ= @f589\\\"- E'mSB oH(5±!(0uD/5rRZy6Xt'6W{(}xM&`erT~(7* M6\";",
                "\t\tconst anon1 = false;",
                "\t\tconst renderReturnValue2 = await view2.render(localName3, callback2, anon1)",
                "\t\tconst localName4 = 2.718281828459045;",
                "\t\tconst options5 = \"res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead\";",
                "\t\tconst view3 = new View(localName4, options5)",
                "\t\tconst callback3 = null;",
                "\t\tconst callback4 = undefined;",
                "\t\tconst renderReturnValue3 = await view3.render(callback3, callback4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -831.3260952480425;",
                "\t\tconst defaultEngine = \"fs\";",
                "\t\tconst root = \"res.send(status, body): Use res.status(status).send(body) instead\";",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = null;",
                "\t\tconst callback = null;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = -831.3260952480425;",
                "\t\tconst defaultEngine1 = \"fs\";",
                "\t\tconst root1 = \"res.send(status, body): Use res.status(status).send(body) instead\";",
                "\t\tconst engines1 = {}",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst options3 = \"9T\\\\BJ@ '<%O=e\\n%§J\";",
                "\t\tconst callback1 = \"res.json(obj, status): Use res.status(status).json(obj) instead\";",
                "\t\tconst renderReturnValue1 = await view1.render(options3, callback1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -230.86631106606296;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = \"\\\"@#zcSsNhQ@s&IwqtJ4*S'|.%wkUKqi'n,Ber~97%VqvqX~,4UA^LHwzZKn)8TB~R5n3>|3PY\";",
                "\t\tconst callback = true;",
                "\t\tconst anon = true;",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon)",
                "\t\tconst localName1 = -230.86631106606296;",
                "\t\tconst options2 = true;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst localDir = null;",
                "\t\tconst file = {}",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, file)",
                "\t\tconst localName2 = -230.86631106606296;",
                "\t\tconst options3 = true;",
                "\t\tconst view2 = new View(localName2, options3)",
                "\t\tconst options4 = 567.4970956069089;",
                "\t\tconst callback1 = \"https\";",
                "\t\tconst localDir1 = null;",
                "\t\tconst renderReturnValue1 = await view2.render(options4, callback1, localDir1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 38;",
                "\t\tconst options = false;",
                "\t\tconst anon = 1;",
                "\t\tconst anon1 = 3;",
                "\t\tconst view = new View(localName, options, anon, anon1)",
                "\t\tconst options1 = {}",
                "\t\tconst callback = \"lji@±&NFw8;\\\"`N^>/CaU6=ncm±g*q`cGb!3+0{%aD\\n%kMYjG§=d:zMdE,YIm^!IfB%\";",
                "\t\tconst anon2 = 1;",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon2)",
                "\t\tconst localName1 = 38;",
                "\t\tconst options2 = false;",
                "\t\tconst anon3 = 1;",
                "\t\tconst anon4 = 3;",
                "\t\tconst view1 = new View(localName1, options2, anon3, anon4)",
                "\t\tconst localName2 = 38;",
                "\t\tconst options3 = false;",
                "\t\tconst anon5 = 1;",
                "\t\tconst anon6 = 3;",
                "\t\tconst view2 = new View(localName2, options3, anon5, anon6)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 1;",
                "\t\tconst options = {}",
                "\t\tconst anon = null;",
                "\t\tconst anon1 = true;",
                "\t\tconst view = new View(localName, options, anon, anon1)",
                "\t\tconst options1 = -558.7169508148179;",
                "\t\tconst callback = \"Content-Disposition\";",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = 1;",
                "\t\tconst options2 = {}",
                "\t\tconst anon2 = null;",
                "\t\tconst anon3 = true;",
                "\t\tconst view1 = new View(localName1, options2, anon2, anon3)",
                "\t\tconst anon4 = true;",
                "\t\tconst file = -270;",
                "\t\tconst resolveReturnValue = await view1.resolve(anon4, file)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 724;",
                "\t\tconst anon = true;",
                "\t\tconst arrayElement = false;",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": anon,",
                "\t\t\t\"root\": arrayElement,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = \"mdEA \\\\\\tuuZvuefEfLb_/IA]2viX\\n8Bszj4m\";",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst arrayElement2 = [arrayElement1]",
                "\t\tconst arrayElement3 = () => {};",
                "\t\tconst anon1 = true;",
                "\t\tconst arrayElement4 = 789.2612239802554;",
                "\t\tconst arrayElement5 = \"J%{6*qbh[b|&b[Vi;n|uX§ibDp]@9Es*7vX.2'+efSvu\\nLw2%§,mB=RRoP~]S5j:d(LbhHV±9G>_§~W,y\";",
                "\t\tconst arrayElement6 = [anon1, arrayElement4, arrayElement5]",
                "\t\tconst arrayElement7 = \"\\\\u003e\";",
                "\t\tconst arrayElement8 = false;",
                "\t\tconst arrayElement9 = 508.16497322425084;",
                "\t\tconst arrayElement10 = [arrayElement6, arrayElement7, arrayElement8, arrayElement9]",
                "\t\tconst arrayElement11 = 1;",
                "\t\tconst anon2 = [arrayElement2, arrayElement3, arrayElement10, arrayElement11]",
                "\t\tconst lookupReturnValue = await view.lookup(localName1, anon2)",
                "\t\tconst localName2 = \"V%iI9§^K(,,Okj/o|U)VO*P'&[FfZH]K#:YFW=*ym9+v}|,k\\n\";",
                "\t\tconst arrayElement12 = {}",
                "\t\tconst defaultEngine = [arrayElement12]",
                "\t\tconst root = {}",
                "\t\tconst engines1 = {}",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon3 = true;",
                "\t\tconst view1 = new View(localName2, options1, anon3)",
                "\t\tconst engines2 = {}",
                "\t\tconst engines3 = {}",
                "\t\tconst renderReturnValue = await view1.render(engines2, engines3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 204;",
                "\t\tconst options = undefined;",
                "\t\tconst localName1 = \"ZzB$4:579Rg9k8B:\\\\2*LQ9GN8hd[{p+w9e5:}6:6=^suiBz*\";",
                "\t\tconst view = new View(localName, options, localName1)",
                "\t\tconst options1 = true;",
                "\t\tconst callback = 1000;",
                "\t\tconst anon = () => {};",
                "\t\tconst anon1 = true;",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon, anon1)",
                "\t\tconst localName2 = \"res.send(status, body): Use res.status(status).send(body) instead\";",
                "\t\tconst options2 = false;",
                "\t\tconst view1 = new View(localName2, options2)",
                "\t\tconst localDir = \"s &>X\\\"koJK;Cky@c]r\\\"Lu^7cs@3}JnLiP1rqT2GPvqh:Z:v8*wo%*i^^lf%KHUK6ifUdv& \\\",V:N\\t[Tz[# \";",
                "\t\tconst file = 777.0647033867133;",
                "\t\tconst anon2 = true;",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, file, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -987.9030674219206;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = () => {};",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\tconst localName2 = \"%s %s : %s\";",
                "\t\tconst options1 = true;",
                "\t\tconst view1 = new View(localName2, options1)",
                "\t\tconst options2 = undefined;",
                "\t\tconst arrayElement = null;",
                "\t\tconst localName3 = () => {};",
                "\t\tconst callback = [arrayElement, localName3]",
                "\t\tconst options3 = true;",
                "\t\tconst renderReturnValue = await view1.render(options2, callback, options3)",
                "\t\tconst localName4 = \"%s %s : %s\";",
                "\t\tconst options4 = true;",
                "\t\tconst view2 = new View(localName4, options4)",
                "\t\tconst localName5 = {}",
                "\t\tconst lookupReturnValue1 = await view2.lookup(localName5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 319.5686555448592;",
                "\t\tconst defaultEngine = {}",
                "\t\tconst root = null;",
                "\t\tconst arrayElement = \"Allow\";",
                "\t\tconst engines = [arrayElement]",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = null;",
                "\t\tconst callback = \"\\nCpU8![-|LQk[)cnQk.UtHmM=\\\\g±?*§=&qr_CqQUTvpIR%^]PWZ9Y\\t}67PQ$c}xh{(^zO#Y2\";",
                "\t\tconst anon = 2.718281828459045;",
                "\t\tconst anon1 = () => {};",
                "\t\tconst anon2 = undefined;",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon, anon1, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -140.3760044035439;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = true;",
                "\t\tconst anon = \"methodOverride\";",
                "\t\tconst lookupReturnValue = await view.lookup(localName1, anon)",
                "\t\tconst localName2 = -140.3760044035439;",
                "\t\tconst options1 = false;",
                "\t\tconst view1 = new View(localName2, options1)",
                "\t\tconst localDir = 140.30487083647904;",
                "\t\tconst file = \"L@]_Qg.±f'F'IH^\\\">1udTk.uahF/euE(@T\\n(d;2L >\\\\\";",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, file)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -546;",
                "\t\tconst defaultEngine = null;",
                "\t\tconst root = \"://\";",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = () => {};",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst options1 = 0;",
                "\t\tconst callback = true;",
                "\t\tconst anon1 = {}",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 3;",
                "\t\tconst options = () => {};",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = -231.68105296669762;",
                "\t\tconst callback = \".use app under %s\";",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = 3;",
                "\t\tconst options2 = () => {};",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst options3 = false;",
                "\t\tconst callback1 = \".use app under %s\";",
                "\t\tconst renderReturnValue1 = await view1.render(options3, callback1)",
                "\t\tconst localName2 = 3;",
                "\t\tconst options4 = () => {};",
                "\t\tconst view2 = new View(localName2, options4)",
                "\t\tconst localDir = () => {};",
                "\t\tconst options5 = false;",
                "\t\tconst resolveReturnValue = await view2.resolve(localDir, options5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -267.48859097736647;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = -211.51135522241407;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\tconst localName2 = -267.48859097736647;",
                "\t\tconst options1 = false;",
                "\t\tconst view1 = new View(localName2, options1)",
                "\t\tconst localName3 = null;",
                "\t\tconst lookupReturnValue1 = await view1.lookup(localName3)",
                "\t\tconst localName4 = -267.48859097736647;",
                "\t\tconst options2 = false;",
                "\t\tconst view2 = new View(localName4, options2)",
                "\t\tconst localDir = false;",
                "\t\tconst file = {}",
                "\t\tconst resolveReturnValue = await view2.resolve(localDir, file)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -706;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = -980.0665238470261;",
                "\t\tconst callback = false;",
                "\t\tconst anon = \"x.7>\\\"ifd{+i}?Y_fcW>`}H4b'dI>n}#^DZ8$qQU[/Sr@_:H:x!a$}l]G}Qbyilfc>2126f\";",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon)",
                "\t\tconst localName1 = -706;",
                "\t\tconst options2 = false;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst localDir = () => {};",
                "\t\tconst options3 = false;",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, options3)",
                "\t\tconst localName2 = -706;",
                "\t\tconst options4 = false;",
                "\t\tconst view2 = new View(localName2, options4)",
                "\t\tconst localName3 = \"e8Ihr@rM§Ll§vz&p>QTS|aC0X+1aOCaP'R5v3~}5o[4ML*/iVB@;f\\\\ ~\\\\;1\\n'XK8^\\nF6U'U(+±y':pk'IgwzP2\\\\b\";",
                "\t\tconst lookupReturnValue = await view2.lookup(localName3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -268;",
                "\t\tconst defaultEngine = {}",
                "\t\tconst root = -497.1953464700688;",
                "\t\tconst arrayElement = \"*§$nPC[E/d:X+3,;P<\\\\.Y8q;^1#~C±(M4xYLJAxFI26<]}7&?;iUmr1DS1mV;@Jwe d)t]` ?#+vRm±wA\\\\n\\\"o#86xd q,(qqg\";",
                "\t\tconst engines = [arrayElement]",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = true;",
                "\t\tconst callback = \"X-Powered-By\";",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = -268;",
                "\t\tconst defaultEngine1 = {}",
                "\t\tconst root1 = -497.1953464700688;",
                "\t\tconst arrayElement1 = \"*§$nPC[E/d:X+3,;P<\\\\.Y8q;^1#~C±(M4xYLJAxFI26<]}7&?;iUmr1DS1mV;@Jwe d)t]` ?#+vRm±wA\\\\n\\\"o#86xd q,(qqg\";",
                "\t\tconst engines1 = [arrayElement1]",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst root2 = -497.1953464700688;",
                "\t\tconst lookupReturnValue = await view1.lookup(root2)",
                "\t\tconst localName2 = -268;",
                "\t\tconst defaultEngine2 = {}",
                "\t\tconst root3 = -497.1953464700688;",
                "\t\tconst arrayElement2 = \"*§$nPC[E/d:X+3,;P<\\\\.Y8q;^1#~C±(M4xYLJAxFI26<]}7&?;iUmr1DS1mV;@Jwe d)t]` ?#+vRm±wA\\\\n\\\"o#86xd q,(qqg\";",
                "\t\tconst engines2 = [arrayElement2]",
                "\t\tconst options3 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root3,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst view2 = new View(localName2, options3)",
                "\t\tconst root4 = -497.1953464700688;",
                "\t\tconst lookupReturnValue1 = await view2.lookup(root4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -191.3991597710866;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = \"./view\";",
                "\t\tconst file = \"T'ko ^?q' it{\";",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file)",
                "\t\tconst localName1 = -191.3991597710866;",
                "\t\tconst options1 = true;",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst options2 = true;",
                "\t\tconst arrayElement = 1;",
                "\t\tconst options3 = true;",
                "\t\tconst callback = [arrayElement, options3]",
                "\t\tconst anon = {}",
                "\t\tconst renderReturnValue = await view1.render(options2, callback, anon)",
                "\t\tconst localName2 = -191.3991597710866;",
                "\t\tconst options4 = true;",
                "\t\tconst view2 = new View(localName2, options4)",
                "\t\tconst anon1 = {}",
                "\t\tconst options5 = true;",
                "\t\tconst resolveReturnValue1 = await view2.resolve(anon1, options5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = {}",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = \"dk'{N<<Hxe§(5§n§Q\\n8z'h$.j'-34{< Rcm\\nw6DDxb\\\\>%D'IOHnOEvnZRU\\t§~pQt§F^V;CTa9*yw2+!us&h/{LVo.-Fs\";",
                "\t\tconst callback = () => {};",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = {}",
                "\t\tconst options2 = true;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst localName2 = {}",
                "\t\tconst options3 = \"dk'{N<<Hxe§(5§n§Q\\n8z'h$.j'-34{< Rcm\\nw6DDxb\\\\>%D'IOHnOEvnZRU\\t§~pQt§F^V;CTa9*yw2+!us&h/{LVo.-Fs\";",
                "\t\tconst anon = -630;",
                "\t\tconst renderReturnValue1 = await view1.render(localName2, options3, anon)",
                "\t\tconst localName3 = {}",
                "\t\tconst options4 = true;",
                "\t\tconst view2 = new View(localName3, options4)",
                "\t\tconst options5 = null;",
                "\t\tconst options6 = true;",
                "\t\tconst anon1 = \"res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead\";",
                "\t\tconst anon2 = \"G/?K±Hwv\";",
                "\t\tconst renderReturnValue2 = await view2.render(options5, options6, anon1, anon2)",
                "\t\tconst localName4 = \"ECONNABORTED\";",
                "\t\tconst options7 = false;",
                "\t\tconst callback1 = () => {};",
                "\t\tconst view3 = new View(localName4, options7, callback1)",
                "\t\tconst options8 = 62;",
                "\t\tconst options9 = null;",
                "\t\tconst renderReturnValue3 = await view3.render(options8, options9)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = () => {};",
                "\t\tconst options = true;",
                "\t\tconst anon = () => {};",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localName1 = 494;",
                "\t\tconst anon1 = \"[:RzKb%5bRKwfm.49#jj[d1Jb±Q]r'sV 5EFw,Q*/|2Xni^DF S-.E+*{ahT9U\";",
                "\t\tconst lookupReturnValue = await view.lookup(localName1, anon1)",
                "\t\tconst localName2 = () => {};",
                "\t\tconst options1 = true;",
                "\t\tconst anon2 = () => {};",
                "\t\tconst view1 = new View(localName2, options1, anon2)",
                "\t\tconst anon3 = \"[:RzKb%5bRKwfm.49#jj[d1Jb±Q]r'sV 5EFw,Q*/|2Xni^DF S-.E+*{ahT9U\";",
                "\t\tconst lookupReturnValue1 = await view1.lookup(anon3)",
                "\t\tconst localName3 = () => {};",
                "\t\tconst options2 = true;",
                "\t\tconst anon4 = () => {};",
                "\t\tconst view2 = new View(localName3, options2, anon4)",
                "\t\tconst anon5 = () => {};",
                "\t\tconst localName4 = () => {};",
                "\t\tconst renderReturnValue = await view2.render(anon5, localName4)",
                "\t\tconst localName5 = () => {};",
                "\t\tconst options3 = true;",
                "\t\tconst anon6 = () => {};",
                "\t\tconst view3 = new View(localName5, options3, anon6)",
                "\t\tconst options4 = 591.274980070953;",
                "\t\tconst callback = undefined;",
                "\t\tconst anon7 = true;",
                "\t\tconst anon8 = 497.0914747722434;",
                "\t\tconst renderReturnValue1 = await view3.render(options4, callback, anon7, anon8)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -265;",
                "\t\tconst options = 808.9870718285035;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = () => {};",
                "\t\tconst callback = \":r:§n@ys3O/eTrtm#f65§f:Rzm}xl7V[)S±PAnL7ubkg9!# :??k\";",
                "\t\tconst anon = () => {};",
                "\t\tconst anon1 = {}",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 395.1688733260903;",
                "\t\tconst defaultEngine = \"a1oBS\";",
                "\t\tconst root = -107.049068539916;",
                "\t\tconst arrayElement = \"booting in %s mode\";",
                "\t\tconst arrayElement1 = \"Allow\";",
                "\t\tconst engines = [arrayElement, arrayElement1]",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = 200;",
                "\t\tconst callback = 472;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = 395.1688733260903;",
                "\t\tconst defaultEngine1 = \"a1oBS\";",
                "\t\tconst root1 = -107.049068539916;",
                "\t\tconst arrayElement2 = \"booting in %s mode\";",
                "\t\tconst arrayElement3 = \"Allow\";",
                "\t\tconst engines1 = [arrayElement2, arrayElement3]",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst callback1 = 472;",
                "\t\tconst callback2 = null;",
                "\t\tconst renderReturnValue1 = await view1.render(callback1, callback2)",
                "\t\tconst localName2 = 395.1688733260903;",
                "\t\tconst defaultEngine2 = \"a1oBS\";",
                "\t\tconst root2 = -107.049068539916;",
                "\t\tconst arrayElement4 = \"booting in %s mode\";",
                "\t\tconst arrayElement5 = \"Allow\";",
                "\t\tconst engines2 = [arrayElement4, arrayElement5]",
                "\t\tconst options3 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst view2 = new View(localName2, options3)",
                "\t\tconst callback3 = 472;",
                "\t\tconst callback4 = null;",
                "\t\tconst renderReturnValue2 = await view2.render(callback3, callback4)",
                "\t\tconst localName3 = 395.1688733260903;",
                "\t\tconst defaultEngine3 = \"a1oBS\";",
                "\t\tconst root3 = -107.049068539916;",
                "\t\tconst arrayElement6 = \"booting in %s mode\";",
                "\t\tconst arrayElement7 = \"Allow\";",
                "\t\tconst engines3 = [arrayElement6, arrayElement7]",
                "\t\tconst options4 = {",
                "\t\t\t\"defaultEngine\": defaultEngine3,",
                "\t\t\t\"root\": root3,",
                "\t\t\t\"engines\": engines3",
                "\t\t}",
                "\t\tconst view3 = new View(localName3, options4)",
                "\t\tconst options5 = 2;",
                "\t\tconst callback5 = false;",
                "\t\tconst arrayElement8 = \"booting in %s mode\";",
                "\t\tconst arrayElement9 = \"Allow\";",
                "\t\tconst engines4 = [arrayElement8, arrayElement9]",
                "\t\tconst defaultEngine4 = \"a1oBS\";",
                "\t\tconst root4 = -107.049068539916;",
                "\t\tconst arrayElement10 = \"booting in %s mode\";",
                "\t\tconst arrayElement11 = \"Allow\";",
                "\t\tconst engines5 = [arrayElement10, arrayElement11]",
                "\t\tconst options6 = {",
                "\t\t\t\"defaultEngine\": defaultEngine4,",
                "\t\t\t\"root\": root4,",
                "\t\t\t\"engines\": engines5",
                "\t\t}",
                "\t\tconst anon = [engines4, options6]",
                "\t\tconst renderReturnValue3 = await view3.render(options5, callback5, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -541;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = \"rI\\noxQ7M*\\tIPdpr^=@!87jWwy,WeJl\";",
                "\t\tconst file = -687.0596594837886;",
                "\t\tconst anon = \"fpqv;k+±\\nl\";",
                "\t\tconst anon1 = true;",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file, anon, anon1)",
                "\t\tconst localName1 = -541;",
                "\t\tconst options1 = true;",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst localDir1 = \"{';htc|Ul`g?SBO>=OA4D5+)§qv\\t^+7~QM8{>dNzo\\nF/Ys'hVnMMm\";",
                "\t\tconst file1 = undefined;",
                "\t\tconst resolveReturnValue1 = await view1.resolve(localDir1, file1)",
                "\t\tconst localName2 = -541;",
                "\t\tconst options2 = true;",
                "\t\tconst view2 = new View(localName2, options2)",
                "\t\tconst localDir2 = \"RHJ@P]//d;iD\\tD}8,<§w$ZWSo!\\\\c9=`NU§.+#BKC_sa\\nm%fGo@6,@^x7RlHTONN0Rr`#tSS7Ai9S'rv±.Agk\\t^JQWQh9\";",
                "\t\tconst file2 = () => {};",
                "\t\tconst resolveReturnValue2 = await view2.resolve(localDir2, file2)",
                "\t\tconst localName3 = -541;",
                "\t\tconst options3 = true;",
                "\t\tconst view3 = new View(localName3, options3)",
                "\t\tconst anon2 = true;",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst callback = [arrayElement, arrayElement1]",
                "\t\tconst anon3 = null;",
                "\t\tconst renderReturnValue = await view3.render(anon2, callback, anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -919;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = () => {};",
                "\t\tconst callback = \"csrf\";",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = -919;",
                "\t\tconst options2 = true;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst options3 = undefined;",
                "\t\tconst callback1 = null;",
                "\t\tconst renderReturnValue1 = await view1.render(options3, callback1)",
                "\t\tconst localName2 = -919;",
                "\t\tconst options4 = true;",
                "\t\tconst view2 = new View(localName2, options4)",
                "\t\tconst options5 = {}",
                "\t\tconst callback2 = {}",
                "\t\tconst options6 = true;",
                "\t\tconst renderReturnValue2 = await view2.render(options5, callback2, options6)",
                "\t\tconst localName3 = -919;",
                "\t\tconst options7 = true;",
                "\t\tconst view3 = new View(localName3, options7)",
                "\t\tconst options8 = true;",
                "\t\tconst callback3 = \"ECONNABORTED\";",
                "\t\tconst renderReturnValue3 = await view3.render(options8, callback3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -417;",
                "\t\tconst options = undefined;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = {}",
                "\t\tconst file = \"\\nwh\\\\v)MZ~/WJXiw_9\\\"`.9]3z%K0 88@E\";",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file)",
                "\t\tconst localName1 = -417;",
                "\t\tconst options1 = undefined;",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst arrayElement = 29.994561698477582;",
                "\t\tconst options2 = undefined;",
                "\t\tconst arrayElement1 = undefined;",
                "\t\tconst options3 = undefined;",
                "\t\tconst localName2 = [arrayElement, options2, arrayElement1, options3]",
                "\t\tconst lookupReturnValue = await view1.lookup(localName2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -868;",
                "\t\tconst defaultEngine = () => {};",
                "\t\tconst root = \"Route.\";",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = 400;",
                "\t\tconst callback = \"QbH#bYt9&A1_.^~\\\\x+I*6`[4gpca-Ho<]K=\\\"Z[?§3Z(\\t<;-Ejfs3sbW2`EjoAv.IF jbw:\\n@`CnAF[r:<o80Y8Axpr\";",
                "\t\tconst anon = \">; rel=\\\"\";",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 214;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = undefined;",
                "\t\tconst callback = null;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -765;",
                "\t\tconst options = true;",
                "\t\tconst anon = 3;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localName1 = {}",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\tconst localName2 = -765;",
                "\t\tconst options1 = true;",
                "\t\tconst anon1 = 3;",
                "\t\tconst view1 = new View(localName2, options1, anon1)",
                "\t\tconst options2 = \"&+;)}GF#\\\\5:=F}EtKjn)&'FzWTo-97J_UKbSC%W\\t&q(U.9x\\n>bB'$C7/OC&XI?5t>'^O-H_D&\";",
                "\t\tconst localName3 = {}",
                "\t\tconst anon2 = \"\\\\u2029\";",
                "\t\tconst renderReturnValue = await view1.render(options2, localName3, anon2)",
                "\t\tconst localName4 = -765;",
                "\t\tconst options3 = true;",
                "\t\tconst anon3 = 3;",
                "\t\tconst view2 = new View(localName4, options3, anon3)",
                "\t\tconst options4 = undefined;",
                "\t\tconst callback = \"subdomains\";",
                "\t\tconst renderReturnValue1 = await view2.render(options4, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -786;",
                "\t\tconst defaultEngine = -779.3092906556291;",
                "\t\tconst root = 60;",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = \"json spaces\";",
                "\t\tconst engines = [arrayElement, arrayElement1]",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = \"0\";",
                "\t\tconst file = undefined;",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file)",
                "\t\tconst localName1 = -786;",
                "\t\tconst defaultEngine1 = -779.3092906556291;",
                "\t\tconst root1 = 60;",
                "\t\tconst arrayElement2 = {}",
                "\t\tconst arrayElement3 = \"json spaces\";",
                "\t\tconst engines1 = [arrayElement2, arrayElement3]",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst options2 = 200;",
                "\t\tconst root2 = 60;",
                "\t\tconst renderReturnValue = await view1.render(options2, root2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 427.4598284668666;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = \"fs\";",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\tconst localName2 = 427.4598284668666;",
                "\t\tconst options1 = false;",
                "\t\tconst view1 = new View(localName2, options1)",
                "\t\tconst options2 = false;",
                "\t\tconst file = null;",
                "\t\tconst anon = undefined;",
                "\t\tconst resolveReturnValue = await view1.resolve(options2, file, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 0;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = () => {};",
                "\t\tconst callback = \"Request aborted\";",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = 0;",
                "\t\tconst options2 = true;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst localDir = \"\";",
                "\t\tconst options3 = () => {};",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, options3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -802;",
                "\t\tconst defaultEngine = null;",
                "\t\tconst root = () => {};",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = () => {};",
                "\t\tconst arrayElement2 = 372;",
                "\t\tconst arrayElement3 = null;",
                "\t\tconst engines = [arrayElement, arrayElement1, arrayElement2, arrayElement3]",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = 38;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localName1 = 302;",
                "\t\tconst anon1 = true;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1, anon1)",
                "\t\tconst localName2 = -802;",
                "\t\tconst defaultEngine1 = null;",
                "\t\tconst root1 = () => {};",
                "\t\tconst arrayElement4 = {}",
                "\t\tconst arrayElement5 = () => {};",
                "\t\tconst arrayElement6 = 372;",
                "\t\tconst arrayElement7 = null;",
                "\t\tconst engines1 = [arrayElement4, arrayElement5, arrayElement6, arrayElement7]",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon2 = 38;",
                "\t\tconst view1 = new View(localName2, options1, anon2)",
                "\t\tconst localDir = \"req.acceptsEncoding: Use acceptsEncodings instead\";",
                "\t\tconst arrayElement8 = {}",
                "\t\tconst arrayElement9 = () => {};",
                "\t\tconst arrayElement10 = 372;",
                "\t\tconst arrayElement11 = null;",
                "\t\tconst engines2 = [arrayElement8, arrayElement9, arrayElement10, arrayElement11]",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, engines2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -143.21764762710552;",
                "\t\tconst defaultEngine = \"extended\";",
                "\t\tconst root = {}",
                "\t\tconst arrayElement = null;",
                "\t\tconst arrayElement1 = \"6Tl8p_]qIE\\nM\\\"e9 !shZx|,Fsgcr|fwszbEF;KR+1'$A+§O,tr9BR)Hzai28R`+AILTBdn7~+YnPCVF1D%~p6|7n;;,}Up]Q\";",
                "\t\tconst engines = [arrayElement, arrayElement1]",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = -143.21764762710552;",
                "\t\tconst defaultEngine1 = \"extended\";",
                "\t\tconst root1 = {}",
                "\t\tconst arrayElement2 = null;",
                "\t\tconst arrayElement3 = \"6Tl8p_]qIE\\nM\\\"e9 !shZx|,Fsgcr|fwszbEF;KR+1'$A+§O,tr9BR)Hzai28R`+AILTBdn7~+YnPCVF1D%~p6|7n;;,}Up]Q\";",
                "\t\tconst engines1 = [arrayElement2, arrayElement3]",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst localName2 = -143.21764762710552;",
                "\t\tconst lookupReturnValue = await view1.lookup(localName2)",
                "\t\tconst localName3 = -143.21764762710552;",
                "\t\tconst defaultEngine2 = \"extended\";",
                "\t\tconst root2 = {}",
                "\t\tconst arrayElement4 = null;",
                "\t\tconst arrayElement5 = \"6Tl8p_]qIE\\nM\\\"e9 !shZx|,Fsgcr|fwszbEF;KR+1'$A+§O,tr9BR)Hzai28R`+AILTBdn7~+YnPCVF1D%~p6|7n;;,}Up]Q\";",
                "\t\tconst engines2 = [arrayElement4, arrayElement5]",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst view2 = new View(localName3, options2)",
                "\t\tconst options3 = \")±Uc§jF±aK1 Erdo*\\\\\\\"Y}]±^:eW*6;!Kv'agJfs0yo@''rL92\\nmy\\\\\";",
                "\t\tconst callback = undefined;",
                "\t\tconst renderReturnValue = await view2.render(options3, callback)",
                "\t\tconst localName4 = -143.21764762710552;",
                "\t\tconst defaultEngine3 = \"extended\";",
                "\t\tconst root3 = {}",
                "\t\tconst arrayElement6 = null;",
                "\t\tconst arrayElement7 = \"6Tl8p_]qIE\\nM\\\"e9 !shZx|,Fsgcr|fwszbEF;KR+1'$A+§O,tr9BR)Hzai28R`+AILTBdn7~+YnPCVF1D%~p6|7n;;,}Up]Q\";",
                "\t\tconst engines3 = [arrayElement6, arrayElement7]",
                "\t\tconst options4 = {",
                "\t\t\t\"defaultEngine\": defaultEngine3,",
                "\t\t\t\"root\": root3,",
                "\t\t\t\"engines\": engines3",
                "\t\t}",
                "\t\tconst view3 = new View(localName4, options4)",
                "\t\tconst localName5 = () => {};",
                "\t\tconst lookupReturnValue1 = await view3.lookup(localName5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 735;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = \", got \";",
                "\t\tconst file = -753.9080056306706;",
                "\t\tconst anon = () => {};",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -304;",
                "\t\tconst options = false;",
                "\t\tconst anon = {}",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst options1 = {}",
                "\t\tconst callback = \"error\";",
                "\t\tconst anon1 = true;",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon1)",
                "\t\tconst localName1 = -304;",
                "\t\tconst options2 = false;",
                "\t\tconst anon2 = {}",
                "\t\tconst view1 = new View(localName1, options2, anon2)",
                "\t\tconst anon3 = true;",
                "\t\tconst callback1 = true;",
                "\t\tconst callback2 = \"error\";",
                "\t\tconst renderReturnValue1 = await view1.render(anon3, callback1, callback2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -324.6095588694036;",
                "\t\tconst options = -169;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = undefined;",
                "\t\tconst callback = null;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 800.016939876288;",
                "\t\tconst options = true;",
                "\t\tconst anon = () => {};",
                "\t\tconst anon1 = () => {};",
                "\t\tconst anon2 = {}",
                "\t\tconst view = new View(localName, options, anon, anon1, anon2)",
                "\t\tconst options1 = () => {};",
                "\t\tconst callback = undefined;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = 800.016939876288;",
                "\t\tconst options2 = true;",
                "\t\tconst anon3 = () => {};",
                "\t\tconst anon4 = () => {};",
                "\t\tconst anon5 = {}",
                "\t\tconst view1 = new View(localName1, options2, anon3, anon4, anon5)",
                "\t\tconst anon6 = () => {};",
                "\t\tconst options3 = true;",
                "\t\tconst lookupReturnValue = await view1.lookup(anon6, options3)",
                "\t\tconst localName2 = 800.016939876288;",
                "\t\tconst options4 = true;",
                "\t\tconst anon7 = () => {};",
                "\t\tconst anon8 = () => {};",
                "\t\tconst anon9 = {}",
                "\t\tconst view2 = new View(localName2, options4, anon7, anon8, anon9)",
                "\t\tconst localDir = 353;",
                "\t\tconst file = \"statuses\";",
                "\t\tconst resolveReturnValue = await view2.resolve(localDir, file)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 752.3605206834386;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = \"bodyParser\";",
                "\t\tconst callback = null;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = 752.3605206834386;",
                "\t\tconst options2 = false;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst options3 = \"bodyParser\";",
                "\t\tconst callback1 = \"psn_uH. nKu'/&E0S-Ljd;g%)]dj;7P$RXZ\\tU^pKn|Z:c=_{Ob\\\"g'tSy?-.Fa[o3k Qt#J`SP\";",
                "\t\tconst anon = {}",
                "\t\tconst renderReturnValue1 = await view1.render(options3, callback1, anon)",
                "\t\tconst localName2 = 752.3605206834386;",
                "\t\tconst options4 = false;",
                "\t\tconst view2 = new View(localName2, options4)",
                "\t\tconst localName3 = 752.3605206834386;",
                "\t\tconst options5 = \"bodyParser\";",
                "\t\tconst anon1 = () => {};",
                "\t\tconst renderReturnValue2 = await view2.render(localName3, options5, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 16.13739456917449;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = () => {};",
                "\t\tconst anon = true;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 430.6119282727334;",
                "\t\tconst options = false;",
                "\t\tconst anon = 406;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localDir = -420;",
                "\t\tconst file = null;",
                "\t\tconst anon1 = null;",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 302;",
                "\t\tconst options = false;",
                "\t\tconst anon = true;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localDir = () => {};",
                "\t\tconst file = () => {};",
                "\t\tconst anon1 = \"s:\";",
                "\t\tconst anon2 = 200;",
                "\t\tconst anon3 = \"express:application\";",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file, anon1, anon2, anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -415.43763122553014;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = \"H_U&LX.c]4TS§\\ny#IW5RBxGD*=fr!P)4}HgF8HQKfut)?Hjt4\";",
                "\t\tconst callback = {}",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = -415.43763122553014;",
                "\t\tconst options2 = true;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst callback1 = {}",
                "\t\tconst file = () => {};",
                "\t\tconst resolveReturnValue = await view1.resolve(callback1, file)",
                "\t\tconst localName2 = -415.43763122553014;",
                "\t\tconst options3 = true;",
                "\t\tconst view2 = new View(localName2, options3)",
                "\t\tconst localName3 = null;",
                "\t\tconst lookupReturnValue = await view2.lookup(localName3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -381;",
                "\t\tconst defaultEngine = -401.00747193254745;",
                "\t\tconst root = \"fresh\";",
                "\t\tconst engines = \"boolean\";",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = 1;",
                "\t\tconst anon = \"send\";",
                "\t\tconst lookupReturnValue = await view.lookup(localName1, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -859.2308597745227;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -945.1871347012511;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = true;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 61;",
                "\t\tconst defaultEngine = () => {};",
                "\t\tconst root = \"stream\";",
                "\t\tconst engines = \"boolean\";",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = null;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localName1 = -298.9425324439785;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\tconst localName2 = 62;",
                "\t\tconst defaultEngine1 = null;",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst arrayElement2 = {}",
                "\t\tconst root1 = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst engines1 = {}",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon1 = null;",
                "\t\tconst view1 = new View(localName2, options1, anon1)",
                "\t\tconst localDir = undefined;",
                "\t\tconst file = undefined;",
                "\t\tconst anon2 = null;",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, file, anon2)",
                "\t\tconst localName3 = 62;",
                "\t\tconst defaultEngine2 = null;",
                "\t\tconst arrayElement3 = {}",
                "\t\tconst arrayElement4 = null;",
                "\t\tconst arrayElement5 = {}",
                "\t\tconst root2 = [arrayElement3, arrayElement4, arrayElement5]",
                "\t\tconst engines2 = {}",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst anon3 = null;",
                "\t\tconst view2 = new View(localName3, options2, anon3)",
                "\t\tconst options3 = \"get\";",
                "\t\tconst callback = false;",
                "\t\tconst renderReturnValue = await view2.render(options3, callback)",
                "\t\tconst localName4 = 62;",
                "\t\tconst defaultEngine3 = null;",
                "\t\tconst arrayElement6 = {}",
                "\t\tconst arrayElement7 = null;",
                "\t\tconst arrayElement8 = {}",
                "\t\tconst root3 = [arrayElement6, arrayElement7, arrayElement8]",
                "\t\tconst engines3 = {}",
                "\t\tconst options4 = {",
                "\t\t\t\"defaultEngine\": defaultEngine3,",
                "\t\t\t\"root\": root3,",
                "\t\t\t\"engines\": engines3",
                "\t\t}",
                "\t\tconst anon4 = null;",
                "\t\tconst view3 = new View(localName4, options4, anon4)",
                "\t\tconst callback1 = false;",
                "\t\tconst callback2 = 2.718281828459045;",
                "\t\tconst renderReturnValue1 = await view3.render(callback1, callback2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 68.16756064688963;",
                "\t\tconst defaultEngine = null;",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst arrayElement2 = {}",
                "\t\tconst root = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = null;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localName1 = -298.9425324439785;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\tconst localName2 = 62;",
                "\t\tconst defaultEngine1 = null;",
                "\t\tconst arrayElement3 = {}",
                "\t\tconst arrayElement4 = null;",
                "\t\tconst arrayElement5 = {}",
                "\t\tconst root1 = [arrayElement3, arrayElement4, arrayElement5]",
                "\t\tconst engines1 = {}",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon1 = null;",
                "\t\tconst view1 = new View(localName2, options1, anon1)",
                "\t\tconst localDir = undefined;",
                "\t\tconst file = undefined;",
                "\t\tconst anon2 = null;",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, file, anon2)",
                "\t\tconst localName3 = 62;",
                "\t\tconst defaultEngine2 = null;",
                "\t\tconst arrayElement6 = {}",
                "\t\tconst arrayElement7 = null;",
                "\t\tconst arrayElement8 = {}",
                "\t\tconst root2 = [arrayElement6, arrayElement7, arrayElement8]",
                "\t\tconst engines2 = {}",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst anon3 = -569.9375473706748;",
                "\t\tconst view2 = new View(localName3, options2, anon3)",
                "\t\tconst options3 = \"get\";",
                "\t\tconst callback = false;",
                "\t\tconst renderReturnValue = await view2.render(options3, callback)",
                "\t\tconst localName4 = 62;",
                "\t\tconst defaultEngine3 = null;",
                "\t\tconst arrayElement9 = {}",
                "\t\tconst arrayElement10 = null;",
                "\t\tconst arrayElement11 = {}",
                "\t\tconst root3 = [arrayElement9, arrayElement10, arrayElement11]",
                "\t\tconst engines3 = {}",
                "\t\tconst options4 = {",
                "\t\t\t\"defaultEngine\": defaultEngine3,",
                "\t\t\t\"root\": root3,",
                "\t\t\t\"engines\": engines3",
                "\t\t}",
                "\t\tconst anon4 = null;",
                "\t\tconst view3 = new View(localName4, options4, anon4)",
                "\t\tconst callback1 = false;",
                "\t\tconst callback2 = 2.718281828459045;",
                "\t\tconst renderReturnValue1 = await view3.render(callback1, callback2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 106.95005271030368;",
                "\t\tconst options = false;",
                "\t\tconst anon = undefined;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localDir = () => {};",
                "\t\tconst file = \"wCaV*tN*3B+`/\";",
                "\t\tconst anon1 = \"DZfS'<\\\\['#8`+_#pOvn[@'g3.8Cd\\nF2CG(l6ME~R9[czeGR}/N\";",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file, anon1)",
                "\t\tconst localName1 = 106.95005271030368;",
                "\t\tconst options1 = false;",
                "\t\tconst anon2 = undefined;",
                "\t\tconst view1 = new View(localName1, options1, anon2)",
                "\t\tconst options2 = 470;",
                "\t\tconst arrayElement = null;",
                "\t\tconst arrayElement1 = false;",
                "\t\tconst arrayElement2 = 304.3344946350544;",
                "\t\tconst anon3 = undefined;",
                "\t\tconst callback = [arrayElement, arrayElement1, arrayElement2, anon3]",
                "\t\tconst anon4 = {}",
                "\t\tconst anon5 = {}",
                "\t\tconst renderReturnValue = await view1.render(options2, callback, anon4, anon5)",
                "\t\tconst localName2 = 106.95005271030368;",
                "\t\tconst options3 = false;",
                "\t\tconst anon6 = undefined;",
                "\t\tconst view2 = new View(localName2, options3, anon6)",
                "\t\tconst options4 = \"+27iQ^#q%0rQ],[Si9UC§';js_F/<c~e\\tp\\\\`Hk|&HI-EtZ2af`WaW7 Gjc[EF\\n`t2?5SL*oH`x9]{9\\\"6%IMJ0\\n:(nk_fYC\";",
                "\t\tconst callback1 = \"IDe3X?&.DrO|fWG\\nlf$*(1/=YSLA\\\\>S+%!6<i<`K(@V\\\\\\\"E7b+Z+xK*rdfu8URL?k\\\"f;cE?s!z:q('a!n\\\\q6<=P.|L~\\n&X#%gJ\";",
                "\t\tconst anon7 = \"0\";",
                "\t\tconst anon8 = {}",
                "\t\tconst renderReturnValue1 = await view2.render(options4, callback1, anon7, anon8)",
                "\t\tconst localName3 = 106.95005271030368;",
                "\t\tconst options5 = false;",
                "\t\tconst anon9 = undefined;",
                "\t\tconst view3 = new View(localName3, options5, anon9)",
                "\t\tconst anon10 = \"DZfS'<\\\\['#8`+_#pOvn[@'g3.8Cd\\nF2CG(l6ME~R9[czeGR}/N\";",
                "\t\tconst anon11 = null;",
                "\t\tconst lookupReturnValue = await view3.lookup(anon10, anon11)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 60;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = \"ETag\";",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -715.2225480140517;",
                "\t\tconst options = false;",
                "\t\tconst anon = 0;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst options1 = () => {};",
                "\t\tconst callback = undefined;",
                "\t\tconst anon1 = null;",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon1)",
                "\t\tconst localName1 = -715.2225480140517;",
                "\t\tconst options2 = false;",
                "\t\tconst anon2 = 0;",
                "\t\tconst view1 = new View(localName1, options2, anon2)",
                "\t\tconst anon3 = 0;",
                "\t\tconst options3 = false;",
                "\t\tconst options4 = false;",
                "\t\tconst renderReturnValue1 = await view1.render(anon3, options3, options4)",
                "\t\tconst localName2 = -715.2225480140517;",
                "\t\tconst options5 = false;",
                "\t\tconst anon4 = 0;",
                "\t\tconst view2 = new View(localName2, options5, anon4)",
                "\t\tconst callback1 = undefined;",
                "\t\tconst callback2 = {}",
                "\t\tconst callback3 = undefined;",
                "\t\tconst renderReturnValue2 = await view2.render(callback1, callback2, callback3)",
                "\t\tconst localName3 = -715.2225480140517;",
                "\t\tconst options6 = false;",
                "\t\tconst anon5 = 0;",
                "\t\tconst view3 = new View(localName3, options6, anon5)",
                "\t\tconst localName4 = 0;",
                "\t\tconst lookupReturnValue = await view3.lookup(localName4)",
                "\t\tconst localName5 = -715.2225480140517;",
                "\t\tconst options7 = false;",
                "\t\tconst anon6 = 0;",
                "\t\tconst view4 = new View(localName5, options7, anon6)",
                "\t\tconst anon7 = null;",
                "\t\tconst anon8 = 0;",
                "\t\tconst resolveReturnValue = await view4.resolve(anon7, anon8)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -1;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = -1;",
                "\t\tconst options1 = true;",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst localDir = 293.8186437468005;",
                "\t\tconst file = null;",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, file)",
                "\t\tconst localName2 = -1;",
                "\t\tconst options2 = true;",
                "\t\tconst view2 = new View(localName2, options2)",
                "\t\tconst localName3 = -1;",
                "\t\tconst callback = -216.611386501428;",
                "\t\tconst renderReturnValue = await view2.render(localName3, callback)",
                "\t\tconst localName4 = -1;",
                "\t\tconst options3 = true;",
                "\t\tconst view3 = new View(localName4, options3)",
                "\t\tconst localDir1 = 293.8186437468005;",
                "\t\tconst callback1 = \"setprototypeof\";",
                "\t\tconst renderReturnValue1 = await view3.render(localDir1, callback1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 33.796782967824356;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = null;",
                "\t\tconst anon = 1000;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1, anon)",
                "\t\tconst localName2 = 33.796782967824356;",
                "\t\tconst options1 = true;",
                "\t\tconst view1 = new View(localName2, options1)",
                "\t\tconst localName3 = null;",
                "\t\tconst anon1 = {}",
                "\t\tconst lookupReturnValue1 = await view1.lookup(localName3, anon1)",
                "\t\tconst localName4 = 33.796782967824356;",
                "\t\tconst options2 = true;",
                "\t\tconst view2 = new View(localName4, options2)",
                "\t\tconst options3 = \"vary\";",
                "\t\tconst callback = \"/\";",
                "\t\tconst anon2 = \"content-type\";",
                "\t\tconst anon3 = \"view cache\";",
                "\t\tconst renderReturnValue = await view2.render(options3, callback, anon2, anon3)",
                "\t\tconst localName5 = 33.796782967824356;",
                "\t\tconst options4 = true;",
                "\t\tconst view3 = new View(localName5, options4)",
                "\t\tconst options5 = -207;",
                "\t\tconst callback1 = -783;",
                "\t\tconst renderReturnValue1 = await view3.render(options5, callback1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -60.497414636168514;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = {}",
                "\t\tconst arrayElement = undefined;",
                "\t\tconst callback = [arrayElement]",
                "\t\tconst anon = -311.1382434553999;",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon)",
                "\t\tconst localName1 = -60.497414636168514;",
                "\t\tconst options2 = true;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst options3 = {}",
                "\t\tconst file = {}",
                "\t\tconst resolveReturnValue = await view1.resolve(options3, file)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 943.1867265620303;",
                "\t\tconst options = null;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = null;",
                "\t\tconst file = -140.85084766427042;",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file)",
                "\t\tconst localName1 = 943.1867265620303;",
                "\t\tconst options1 = null;",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst options2 = null;",
                "\t\tconst callback = -520.7663935379105;",
                "\t\tconst renderReturnValue = await view1.render(options2, callback)",
                "\t\tconst localName2 = 943.1867265620303;",
                "\t\tconst options3 = null;",
                "\t\tconst view2 = new View(localName2, options3)",
                "\t\tconst localName3 = () => {};",
                "\t\tconst lookupReturnValue = await view2.lookup(localName3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 93;",
                "\t\tconst options = -225;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = {}",
                "\t\tconst callback = 200;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = 93;",
                "\t\tconst options2 = -225;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst localName2 = 93;",
                "\t\tconst callback1 = null;",
                "\t\tconst renderReturnValue1 = await view1.render(localName2, callback1)",
                "\t\tconst localName3 = 93;",
                "\t\tconst options3 = -225;",
                "\t\tconst view2 = new View(localName3, options3)",
                "\t\tconst options4 = () => {};",
                "\t\tconst callback2 = true;",
                "\t\tconst renderReturnValue2 = await view2.render(options4, callback2)",
                "\t\tconst localName4 = 93;",
                "\t\tconst options5 = -225;",
                "\t\tconst view3 = new View(localName4, options5)",
                "\t\tconst localName5 = 93;",
                "\t\tconst callback3 = null;",
                "\t\tconst renderReturnValue3 = await view3.render(localName5, callback3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -904.7908324798537;",
                "\t\tconst options = undefined;",
                "\t\tconst anon = false;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localName1 = -904.7908324798537;",
                "\t\tconst options1 = undefined;",
                "\t\tconst anon1 = false;",
                "\t\tconst view1 = new View(localName1, options1, anon1)",
                "\t\tconst anon2 = false;",
                "\t\tconst localName2 = -904.7908324798537;",
                "\t\tconst file = [localName2]",
                "\t\tconst resolveReturnValue = await view1.resolve(anon2, file)",
                "\t\tconst localName3 = -904.7908324798537;",
                "\t\tconst options2 = undefined;",
                "\t\tconst anon3 = false;",
                "\t\tconst view2 = new View(localName3, options2, anon3)",
                "\t\tconst options3 = () => {};",
                "\t\tconst callback = \". Redirecting to <a href=\\\"\";",
                "\t\tconst arrayElement = {}",
                "\t\tconst localName4 = -904.7908324798537;",
                "\t\tconst anon4 = [arrayElement, localName4]",
                "\t\tconst renderReturnValue = await view2.render(options3, callback, anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -923.3278822250747;",
                "\t\tconst options = false;",
                "\t\tconst anon = -407;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localDir = \"Route.all() requires a callback function but got a \";",
                "\t\tconst file = \"Dr\\\")83`\\n>GT>7d3tB-#>Vt4\\\\okQIY±gwQ_J~|#r7vaz[T,LW t)]f+sO\\nPbd`Q&vT65?>SnsM\\\"EN§X!z'@2:[mQ@\";",
                "\t\tconst anon1 = \"fEdlHb!\\ty@'?n8\\t)8lf\\\\\";",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file, anon1)",
                "\t\tconst localName1 = 62;",
                "\t\tconst defaultEngine = () => {};",
                "\t\tconst root = \"stream\";",
                "\t\tconst engines = \"boolean\";",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon2 = -407;",
                "\t\tconst view1 = new View(localName1, options1, anon2)",
                "\t\tconst localName2 = 62;",
                "\t\tconst arrayElement = \"*aO~`HI-;StHApF'<na'qySr[S'±+§9x~I;/,Rqy>TB8}ddel^]H]B§v!^KC/7E:7,q\\t\";",
                "\t\tconst defaultEngine1 = () => {};",
                "\t\tconst root1 = \"stream\";",
                "\t\tconst engines1 = \"boolean\";",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon3 = [arrayElement, options2]",
                "\t\tconst lookupReturnValue = await view1.lookup(localName2, anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 72.23231672527228;",
                "\t\tconst defaultEngine = null;",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst arrayElement2 = {}",
                "\t\tconst root = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = null;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localName1 = -298.9425324439785;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\tconst localName2 = 62;",
                "\t\tconst defaultEngine1 = null;",
                "\t\tconst arrayElement3 = {}",
                "\t\tconst arrayElement4 = null;",
                "\t\tconst arrayElement5 = {}",
                "\t\tconst root1 = [arrayElement3, arrayElement4, arrayElement5]",
                "\t\tconst engines1 = {}",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon1 = null;",
                "\t\tconst view1 = new View(localName2, options1, anon1)",
                "\t\tconst localDir = undefined;",
                "\t\tconst file = undefined;",
                "\t\tconst anon2 = null;",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, file, anon2)",
                "\t\tconst localName3 = 62;",
                "\t\tconst defaultEngine2 = null;",
                "\t\tconst arrayElement6 = {}",
                "\t\tconst arrayElement7 = null;",
                "\t\tconst arrayElement8 = {}",
                "\t\tconst root2 = [arrayElement6, arrayElement7, arrayElement8]",
                "\t\tconst engines2 = {}",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst anon3 = null;",
                "\t\tconst view2 = new View(localName3, options2, anon3)",
                "\t\tconst options3 = \"get\";",
                "\t\tconst callback = false;",
                "\t\tconst renderReturnValue = await view2.render(options3, callback)",
                "\t\tconst localName4 = 62;",
                "\t\tconst defaultEngine3 = null;",
                "\t\tconst arrayElement9 = {}",
                "\t\tconst arrayElement10 = {}",
                "\t\tconst arrayElement11 = {}",
                "\t\tconst root3 = [arrayElement9, arrayElement10, arrayElement11]",
                "\t\tconst engines3 = {}",
                "\t\tconst options4 = {",
                "\t\t\t\"defaultEngine\": defaultEngine3,",
                "\t\t\t\"root\": root3,",
                "\t\t\t\"engines\": engines3",
                "\t\t}",
                "\t\tconst anon4 = null;",
                "\t\tconst view3 = new View(localName4, options4, anon4)",
                "\t\tconst callback1 = false;",
                "\t\tconst callback2 = 2.718281828459045;",
                "\t\tconst renderReturnValue1 = await view3.render(callback1, callback2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -918.2637939476348;",
                "\t\tconst defaultEngine = false;",
                "\t\tconst root = {}",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = () => {};",
                "\t\tconst file = \".=5S$1cVtr;§WVy_t(}<*$\";",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -873.2155024909121;",
                "\t\tconst options = undefined;",
                "\t\tconst anon = {}",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localName1 = 4;",
                "\t\tconst anon1 = \"/FU7\\\\ZzuZ%c\\\\,>^x>\\t6nG'j w5J\\nsQ8?3hx;_<Gt5iDirlk[5Ca§~%U0U9'\\\\RWf\";",
                "\t\tconst lookupReturnValue = await view.lookup(localName1, anon1)",
                "\t\tconst localName2 = -873.2155024909121;",
                "\t\tconst options1 = undefined;",
                "\t\tconst anon2 = {}",
                "\t\tconst view1 = new View(localName2, options1, anon2)",
                "\t\tconst localName3 = 400;",
                "\t\tconst options2 = true;",
                "\t\tconst localName4 = -873.2155024909121;",
                "\t\tconst view2 = new View(localName3, options2, localName4)",
                "\t\tconst localDir = -754;",
                "\t\tconst file = null;",
                "\t\tconst resolveReturnValue = await view2.resolve(localDir, file)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -468;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = -639.3520825154794;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\tconst localName2 = -468;",
                "\t\tconst options1 = false;",
                "\t\tconst view1 = new View(localName2, options1)",
                "\t\tconst options2 = null;",
                "\t\tconst localName3 = -468;",
                "\t\tconst renderReturnValue = await view1.render(options2, localName3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 598.2527257263491;",
                "\t\tconst options = false;",
                "\t\tconst anon = \"multipart\";",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst options1 = -115.10160878187298;",
                "\t\tconst callback = 728;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = 598.2527257263491;",
                "\t\tconst options2 = false;",
                "\t\tconst anon1 = \"multipart\";",
                "\t\tconst view1 = new View(localName1, options2, anon1)",
                "\t\tconst localDir = null;",
                "\t\tconst file = \".z\\tq/,J_NDcLxK\\\\T;'P%xV^.A1sBf%R`BH%A\";",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, file)",
                "\t\tconst localName2 = 598.2527257263491;",
                "\t\tconst options3 = false;",
                "\t\tconst anon2 = \"multipart\";",
                "\t\tconst view2 = new View(localName2, options3, anon2)",
                "\t\tconst options4 = {}",
                "\t\tconst callback1 = {}",
                "\t\tconst renderReturnValue1 = await view2.render(options4, callback1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 59.005457636984815;",
                "\t\tconst defaultEngine = () => {};",
                "\t\tconst root = \"stream\";",
                "\t\tconst engines = \"boolean\";",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = -407;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localDir = \"Route.all() requires a callback function but got a \";",
                "\t\tconst file = \"Dr\\\")83`\\n>GT>7d3tB-#>Vt4\\\\okQIY±gwQ_J~|#r7vaz[T,LW t)]f+sO\\nPbd`Q&vT65?>SnsM\\\"EN§X!z'@2:[mQ@\";",
                "\t\tconst anon1 = \"fEdlHb!\\ty@'?n8\\t)8lf\\\\\";",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file, anon1)",
                "\t\tconst localName1 = 62;",
                "\t\tconst defaultEngine1 = () => {};",
                "\t\tconst root1 = \"stream\";",
                "\t\tconst engines1 = \"boolean\";",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon2 = -407;",
                "\t\tconst view1 = new View(localName1, options1, anon2)",
                "\t\tconst localName2 = \"no routes defined on app\";",
                "\t\tconst arrayElement = \"*aO~`HI-;StHApF'<na'qySr[S'±+§9x~I;/,Rqy>TB8}ddel^]H]B§v!^KC/7E:7,q\\t\";",
                "\t\tconst defaultEngine2 = () => {};",
                "\t\tconst root2 = \"stream\";",
                "\t\tconst engines2 = \"boolean\";",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst anon3 = [arrayElement, options2]",
                "\t\tconst lookupReturnValue = await view1.lookup(localName2, anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -987.3735476329501;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = null;",
                "\t\tconst callback = false;",
                "\t\tconst anon = () => {};",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon)",
                "\t\tconst localName1 = -987.3735476329501;",
                "\t\tconst options2 = true;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst localName2 = {}",
                "\t\tconst localName3 = -987.3735476329501;",
                "\t\tconst lookupReturnValue = await view1.lookup(localName2, localName3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 455;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = \"ECONNABORTED\";",
                "\t\tconst callback = \"Content-Type cannot be set to an ARRAY\";",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = 455;",
                "\t\tconst options2 = true;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst options3 = true;",
                "\t\tconst file = \"GZv'/$w,iOyHGWpYj-[;±-vO\\nO~d*Rq2}P.x;TCH|WWLa\\\"/Xo±vU\\\"Iaj31B\\\"!;Zy*Lqyrd\\\"F/653Hg$3\\\\I +-Zt$V.WVxa{§\";",
                "\t\tconst resolveReturnValue = await view1.resolve(options3, file)",
                "\t\tconst localName2 = 406;",
                "\t\tconst options4 = true;",
                "\t\tconst view2 = new View(localName2, options4)",
                "\t\tconst localDir = \"?CX\\\\k;WkQiCTwalW§Xg5UkY$5{V8%N:jiiZ+7+&M~|\\nh}B`8o77^[cbn8u])'e)7R\";",
                "\t\tconst file1 = -167.70827197886854;",
                "\t\tconst resolveReturnValue1 = await view2.resolve(localDir, file1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -781.1050450839057;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = () => {};",
                "\t\tconst callback = null;",
                "\t\tconst anon = null;",
                "\t\tconst anon1 = \"net\";",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon, anon1)",
                "\t\tconst localName1 = -781.1050450839057;",
                "\t\tconst options2 = false;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst localName2 = -781.1050450839057;",
                "\t\tconst options3 = () => {};",
                "\t\tconst renderReturnValue1 = await view1.render(localName2, options3)",
                "\t\tconst localName3 = -781.1050450839057;",
                "\t\tconst options4 = false;",
                "\t\tconst view2 = new View(localName3, options4)",
                "\t\tconst localName4 = -781.1050450839057;",
                "\t\tconst anon2 = undefined;",
                "\t\tconst lookupReturnValue = await view2.lookup(localName4, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 936.7353744410395;",
                "\t\tconst options = true;",
                "\t\tconst anon = undefined;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localDir = 1;",
                "\t\tconst file = 2;",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file)",
                "\t\tconst localName1 = 936.7353744410395;",
                "\t\tconst options1 = true;",
                "\t\tconst anon1 = undefined;",
                "\t\tconst view1 = new View(localName1, options1, anon1)",
                "\t\tconst localDir1 = -453;",
                "\t\tconst file1 = () => {};",
                "\t\tconst resolveReturnValue1 = await view1.resolve(localDir1, file1)",
                "\t\tconst localName2 = 936.7353744410395;",
                "\t\tconst options2 = true;",
                "\t\tconst anon2 = undefined;",
                "\t\tconst view2 = new View(localName2, options2, anon2)",
                "\t\tconst anon3 = undefined;",
                "\t\tconst anon4 = undefined;",
                "\t\tconst renderReturnValue = await view2.render(anon3, anon4)",
                "\t\tconst localName3 = 936.7353744410395;",
                "\t\tconst options3 = true;",
                "\t\tconst anon5 = undefined;",
                "\t\tconst view3 = new View(localName3, options3, anon5)",
                "\t\tconst localName4 = 936.7353744410395;",
                "\t\tconst localName5 = 936.7353744410395;",
                "\t\tconst renderReturnValue1 = await view3.render(localName4, localName5)",
                "\t\tconst localName6 = 936.7353744410395;",
                "\t\tconst options4 = true;",
                "\t\tconst anon6 = undefined;",
                "\t\tconst view4 = new View(localName6, options4, anon6)",
                "\t\tconst file2 = 2;",
                "\t\tconst callback = undefined;",
                "\t\tconst options5 = true;",
                "\t\tconst renderReturnValue2 = await view4.render(file2, callback, options5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 189;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = undefined;",
                "\t\tconst callback = null;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 385.1334387049603;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = {}",
                "\t\tconst anon = 38;",
                "\t\tconst anon1 = 864;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1, anon, anon1)",
                "\t\tconst localName2 = 385.1334387049603;",
                "\t\tconst options1 = true;",
                "\t\tconst view1 = new View(localName2, options1)",
                "\t\tconst options2 = \"Location\";",
                "\t\tconst localName3 = {}",
                "\t\tconst localName4 = {}",
                "\t\tconst anon2 = null;",
                "\t\tconst renderReturnValue = await view1.render(options2, localName3, localName4, anon2)",
                "\t\tconst localName5 = 385.1334387049603;",
                "\t\tconst options3 = true;",
                "\t\tconst view2 = new View(localName5, options3)",
                "\t\tconst options4 = \"Location\";",
                "\t\tconst localName6 = {}",
                "\t\tconst anon3 = \"/\";",
                "\t\tconst anon4 = \"yM23uy1gV?'!e!p_Pe+UXN.x/ Nun;NRW`w{`\\\"\\\".udpb,1tp4jB1@±ted?B7jTH5o!sadLzH%gT~B-R3t\\n%*\";",
                "\t\tconst resolveReturnValue = await view2.resolve(options4, localName6, anon3, anon4)",
                "\t\tconst localName7 = 385.1334387049603;",
                "\t\tconst options5 = true;",
                "\t\tconst view3 = new View(localName7, options5)",
                "\t\tconst localName8 = {}",
                "\t\tconst callback = () => {};",
                "\t\tconst renderReturnValue1 = await view3.render(localName8, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 452.6971756512296;",
                "\t\tconst options = false;",
                "\t\tconst anon = true;",
                "\t\tconst anon1 = 300;",
                "\t\tconst view = new View(localName, options, anon, anon1)",
                "\t\tconst options1 = null;",
                "\t\tconst callback = {}",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = 452.6971756512296;",
                "\t\tconst options2 = false;",
                "\t\tconst anon2 = true;",
                "\t\tconst anon3 = 300;",
                "\t\tconst view1 = new View(localName1, options2, anon2, anon3)",
                "\t\tconst options3 = \"l;\";",
                "\t\tconst callback1 = \"stat \\\"%s\\\"\";",
                "\t\tconst renderReturnValue1 = await view1.render(options3, callback1)",
                "\t\tconst localName2 = 452.6971756512296;",
                "\t\tconst options4 = false;",
                "\t\tconst anon4 = true;",
                "\t\tconst anon5 = 300;",
                "\t\tconst view2 = new View(localName2, options4, anon4, anon5)",
                "\t\tconst callback2 = {}",
                "\t\tconst callback3 = \"stat \\\"%s\\\"\";",
                "\t\tconst renderReturnValue2 = await view2.render(callback2, callback3)",
                "\t\tconst localName3 = 452.6971756512296;",
                "\t\tconst options5 = false;",
                "\t\tconst anon6 = true;",
                "\t\tconst anon7 = 300;",
                "\t\tconst view3 = new View(localName3, options5, anon6, anon7)",
                "\t\tconst options6 = false;",
                "\t\tconst callback4 = \"stat \\\"%s\\\"\";",
                "\t\tconst options7 = null;",
                "\t\tconst renderReturnValue3 = await view3.render(options6, callback4, options7)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 257.5291178168643;",
                "\t\tconst defaultEngine = undefined;",
                "\t\tconst root = {}",
                "\t\tconst engines = \"express:router:route\";",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = 257.5291178168643;",
                "\t\tconst defaultEngine1 = undefined;",
                "\t\tconst root1 = {}",
                "\t\tconst engines1 = \"express:router:route\";",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst options2 = \" 3P,y_rQKtiVJF`r}:\\t`7*m]i~%j#{=vC2?K<3-\";",
                "\t\tconst callback = true;",
                "\t\tconst localName2 = 257.5291178168643;",
                "\t\tconst anon = false;",
                "\t\tconst renderReturnValue = await view1.render(options2, callback, localName2, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -662;",
                "\t\tconst options = false;",
                "\t\tconst anon = 548;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst options1 = undefined;",
                "\t\tconst callback = 406;",
                "\t\tconst anon1 = {}",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon1)",
                "\t\tconst localName1 = -662;",
                "\t\tconst options2 = false;",
                "\t\tconst anon2 = 548;",
                "\t\tconst view1 = new View(localName1, options2, anon2)",
                "\t\tconst anon3 = {}",
                "\t\tconst callback1 = false;",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst anon4 = [arrayElement]",
                "\t\tconst renderReturnValue1 = await view1.render(anon3, callback1, anon4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -567;",
                "\t\tconst defaultEngine = {}",
                "\t\tconst arrayElement = \"Content-Type\";",
                "\t\tconst root = [arrayElement]",
                "\t\tconst arrayElement1 = false;",
                "\t\tconst arrayElement2 = null;",
                "\t\tconst arrayElement3 = () => {};",
                "\t\tconst arrayElement4 = {}",
                "\t\tconst engines = [arrayElement1, arrayElement2, arrayElement3, arrayElement4]",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = \"q`\\\" !)n{wi{fERa!='R#)=OB(:UoPU1y&9kfFjq}Zto](@vjF7T9S2@GU/UsRzSed(=LbS#y^,;;\\\\t\";",
                "\t\tconst callback = \"req.host: Use req.hostname instead\";",
                "\t\tconst anon = null;",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon)",
                "\t\tconst localName1 = -567;",
                "\t\tconst defaultEngine1 = {}",
                "\t\tconst arrayElement5 = \"Content-Type\";",
                "\t\tconst root1 = [arrayElement5]",
                "\t\tconst arrayElement6 = false;",
                "\t\tconst arrayElement7 = null;",
                "\t\tconst arrayElement8 = () => {};",
                "\t\tconst arrayElement9 = {}",
                "\t\tconst engines1 = [arrayElement6, arrayElement7, arrayElement8, arrayElement9]",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst options3 = \"q`\\\" !)n{wi{fERa!='R#)=OB(:UoPU1y&9kfFjq}Zto](@vjF7T9S2@GU/UsRzSed(=LbS#y^,;;\\\\t\";",
                "\t\tconst lookupReturnValue = await view1.lookup(options3)",
                "\t\tconst localName2 = -567;",
                "\t\tconst defaultEngine2 = {}",
                "\t\tconst arrayElement10 = \"Content-Type\";",
                "\t\tconst root2 = [arrayElement10]",
                "\t\tconst arrayElement11 = false;",
                "\t\tconst arrayElement12 = null;",
                "\t\tconst arrayElement13 = () => {};",
                "\t\tconst arrayElement14 = {}",
                "\t\tconst engines2 = [arrayElement11, arrayElement12, arrayElement13, arrayElement14]",
                "\t\tconst options4 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst view2 = new View(localName2, options4)",
                "\t\tconst localName3 = {}",
                "\t\tconst anon1 = undefined;",
                "\t\tconst lookupReturnValue1 = await view2.lookup(localName3, anon1)",
                "\t\tconst localName4 = -567;",
                "\t\tconst defaultEngine3 = {}",
                "\t\tconst arrayElement15 = \"Content-Type\";",
                "\t\tconst root3 = [arrayElement15]",
                "\t\tconst arrayElement16 = false;",
                "\t\tconst arrayElement17 = null;",
                "\t\tconst arrayElement18 = () => {};",
                "\t\tconst arrayElement19 = {}",
                "\t\tconst engines3 = [arrayElement16, arrayElement17, arrayElement18, arrayElement19]",
                "\t\tconst options5 = {",
                "\t\t\t\"defaultEngine\": defaultEngine3,",
                "\t\t\t\"root\": root3,",
                "\t\t\t\"engines\": engines3",
                "\t\t}",
                "\t\tconst view3 = new View(localName4, options5)",
                "\t\tconst defaultEngine4 = {}",
                "\t\tconst arrayElement20 = false;",
                "\t\tconst arrayElement21 = null;",
                "\t\tconst arrayElement22 = () => {};",
                "\t\tconst arrayElement23 = {}",
                "\t\tconst engines4 = [arrayElement20, arrayElement21, arrayElement22, arrayElement23]",
                "\t\tconst renderReturnValue1 = await view3.render(defaultEngine4, engines4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 63;",
                "\t\tconst defaultEngine = () => {};",
                "\t\tconst root = \"stream\";",
                "\t\tconst engines = \"boolean\";",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = -407;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localDir = \"Route.all() requires a callback function but got a \";",
                "\t\tconst file = \"Dr\\\")83`\\n>GT>7d3tB-#>Vt4\\\\okQIY±gwQ_J~|#r7vaz[T,LW t)]f+sO\\nPbd`Q&vT65?>SnsM\\\"EN§X!z'@2:[mQ@\";",
                "\t\tconst anon1 = \"fEdlHb!\\ty@'?n8\\t)8lf\\\\\";",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file, anon1)",
                "\t\tconst localName1 = 62;",
                "\t\tconst defaultEngine1 = () => {};",
                "\t\tconst root1 = \"stream\";",
                "\t\tconst engines1 = \"boolean\";",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon2 = -407;",
                "\t\tconst view1 = new View(localName1, options1, anon2)",
                "\t\tconst localName2 = 62;",
                "\t\tconst arrayElement = \"*aO~`HI-;StHApF'<na'qySr[S'±+§9x~I;/,Rqy>TB8}ddel^]H]B§v!^KC/7E:7,q\\t\";",
                "\t\tconst defaultEngine2 = () => {};",
                "\t\tconst root2 = \"stream\";",
                "\t\tconst engines2 = \"boolean\";",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst anon3 = [arrayElement, options2]",
                "\t\tconst lookupReturnValue = await view1.lookup(localName2, anon3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -788;",
                "\t\tconst defaultEngine = \"<\";",
                "\t\tconst root = \"stream\";",
                "\t\tconst engines = \"boolean\";",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst arrayElement = {}",
                "\t\tconst view = new View(localName, options, arrayElement)",
                "\t\tconst options1 = undefined;",
                "\t\tconst callback = null;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 661;",
                "\t\tconst arrayElement = 1000;",
                "\t\tconst defaultEngine = [arrayElement]",
                "\t\tconst root = null;",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = () => {};",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst arrayElement1 = 2.718281828459045;",
                "\t\tconst arrayElement2 = true;",
                "\t\tconst arrayElement3 = {}",
                "\t\tconst localName1 = [arrayElement1, arrayElement2, arrayElement3]",
                "\t\tconst anon1 = {}",
                "\t\tconst lookupReturnValue = await view.lookup(localName1, anon1)",
                "\t\tconst localName2 = 661;",
                "\t\tconst arrayElement4 = 1000;",
                "\t\tconst defaultEngine1 = [arrayElement4]",
                "\t\tconst root1 = null;",
                "\t\tconst engines1 = {}",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon2 = () => {};",
                "\t\tconst view1 = new View(localName2, options1, anon2)",
                "\t\tconst arrayElement5 = true;",
                "\t\tconst callback = \"piQ,q6i#Nv~aLLrLEQ6k_G}~q:/bxyw;^} 4#'\";",
                "\t\tconst anon3 = \"HHiTUql-k'-6xoOF \";",
                "\t\tconst anon4 = false;",
                "\t\tconst renderReturnValue = await view1.render(arrayElement5, callback, anon3, anon4)",
                "\t\tconst localName3 = 661;",
                "\t\tconst arrayElement6 = 1000;",
                "\t\tconst defaultEngine2 = [arrayElement6]",
                "\t\tconst root2 = null;",
                "\t\tconst engines2 = {}",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst anon5 = () => {};",
                "\t\tconst view2 = new View(localName3, options2, anon5)",
                "\t\tconst root3 = null;",
                "\t\tconst arrayElement7 = {}",
                "\t\tconst arrayElement8 = 1000;",
                "\t\tconst resolveReturnValue = await view2.resolve(root3, arrayElement7, arrayElement8)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -731.1647592283198;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = \"render \\\"%s\\\"\";",
                "\t\tconst file = undefined;",
                "\t\tconst anon = []",
                "\t\tconst anon1 = \"net\";",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file, anon, anon1)",
                "\t\tconst localName1 = -731.1647592283198;",
                "\t\tconst options1 = false;",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst localName2 = 60;",
                "\t\tconst lookupReturnValue = await view1.lookup(localName2)",
                "\t\tconst localName3 = -731.1647592283198;",
                "\t\tconst options2 = false;",
                "\t\tconst view2 = new View(localName3, options2)",
                "\t\tconst options3 = () => {};",
                "\t\tconst localDir1 = \"render \\\"%s\\\"\";",
                "\t\tconst options4 = false;",
                "\t\tconst renderReturnValue = await view2.render(options3, localDir1, options4)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 3.141592653589793;",
                "\t\tconst options = true;",
                "\t\tconst anon = null;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localName1 = 3.141592653589793;",
                "\t\tconst options1 = true;",
                "\t\tconst anon1 = null;",
                "\t\tconst view1 = new View(localName1, options1, anon1)",
                "\t\tconst options2 = true;",
                "\t\tconst callback = \");\";",
                "\t\tconst renderReturnValue = await view1.render(options2, callback)",
                "\t\tconst localName2 = 3.141592653589793;",
                "\t\tconst options3 = true;",
                "\t\tconst anon2 = null;",
                "\t\tconst view2 = new View(localName2, options3, anon2)",
                "\t\tconst options4 = 1000;",
                "\t\tconst callback1 = {}",
                "\t\tconst renderReturnValue1 = await view2.render(options4, callback1)",
                "\t\tconst localName3 = 3.141592653589793;",
                "\t\tconst options5 = true;",
                "\t\tconst anon3 = null;",
                "\t\tconst view3 = new View(localName3, options5, anon3)",
                "\t\tconst localDir = \"6.gDAKv K/\\\\=W9)J*7TEg\";",
                "\t\tconst file = {}",
                "\t\tconst resolveReturnValue = await view3.resolve(localDir, file)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 698.8889604074548;",
                "\t\tconst options = 0;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = () => {};",
                "\t\tconst file = null;",
                "\t\tconst anon = {}",
                "\t\tconst anon1 = {}",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file, anon, anon1)",
                "\t\tconst localName1 = 698.8889604074548;",
                "\t\tconst options1 = 0;",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst localDir1 = () => {};",
                "\t\tconst callback = \"ei]2;s;§&a^Oq}7^kJpPR\\\\(:rkK<3\\n&Z2m!res'^wdYb}Uv~j[0lOt3Qy9±\\\\c*{9`±`qE[fEV!U\";",
                "\t\tconst options2 = 0;",
                "\t\tconst arrayElement = false;",
                "\t\tconst anon2 = [options2, arrayElement]",
                "\t\tconst renderReturnValue = await view1.render(localDir1, callback, anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 447;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = null;",
                "\t\tconst file = undefined;",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file)",
                "\t\tconst localName1 = 447;",
                "\t\tconst options1 = false;",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst localName2 = () => {};",
                "\t\tconst lookupReturnValue = await view1.lookup(localName2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 460;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = () => {};",
                "\t\tconst callback = undefined;",
                "\t\tconst anon = () => {};",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon)",
                "\t\tconst localName1 = 460;",
                "\t\tconst options2 = true;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst options3 = \"e{PbY=CAq3§ F.m>e[S;4F9|Ab{\";",
                "\t\tconst callback1 = null;",
                "\t\tconst renderReturnValue1 = await view1.render(options3, callback1)",
                "\t\tconst localName2 = 460;",
                "\t\tconst options4 = true;",
                "\t\tconst view2 = new View(localName2, options4)",
                "\t\tconst options5 = true;",
                "\t\tconst callback2 = undefined;",
                "\t\tconst renderReturnValue2 = await view2.render(options5, callback2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -135.7427476820617;",
                "\t\tconst options = false;",
                "\t\tconst anon = \"EISDIR, read\";",
                "\t\tconst anon1 = 835.8759200614325;",
                "\t\tconst view = new View(localName, options, anon, anon1)",
                "\t\tconst localDir = null;",
                "\t\tconst file = true;",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file)",
                "\t\tconst localName1 = -135.7427476820617;",
                "\t\tconst options1 = false;",
                "\t\tconst anon2 = \"EISDIR, read\";",
                "\t\tconst anon3 = 835.8759200614325;",
                "\t\tconst view1 = new View(localName1, options1, anon2, anon3)",
                "\t\tconst localName2 = () => {};",
                "\t\tconst anon4 = \"EISDIR, read\";",
                "\t\tconst lookupReturnValue = await view1.lookup(localName2, anon4)",
                "\t\tconst localName3 = -135.7427476820617;",
                "\t\tconst options2 = false;",
                "\t\tconst anon5 = \"EISDIR, read\";",
                "\t\tconst anon6 = 835.8759200614325;",
                "\t\tconst view2 = new View(localName3, options2, anon5, anon6)",
                "\t\tconst anon7 = \"EISDIR, read\";",
                "\t\tconst file1 = true;",
                "\t\tconst lookupReturnValue1 = await view2.lookup(anon7, file1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -521;",
                "\t\tconst defaultEngine = undefined;",
                "\t\tconst root = () => {};",
                "\t\tconst arrayElement = \"test\";",
                "\t\tconst engines = [arrayElement]",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = -1;",
                "\t\tconst file = false;",
                "\t\tconst anon = () => {};",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file, anon)",
                "\t\tconst localName1 = -521;",
                "\t\tconst defaultEngine1 = undefined;",
                "\t\tconst root1 = () => {};",
                "\t\tconst arrayElement1 = \"test\";",
                "\t\tconst engines1 = [arrayElement1]",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst options2 = -737.4152135511058;",
                "\t\tconst defaultEngine2 = undefined;",
                "\t\tconst renderReturnValue = await view1.render(options2, defaultEngine2)",
                "\t\tconst localName2 = -521;",
                "\t\tconst defaultEngine3 = undefined;",
                "\t\tconst root2 = () => {};",
                "\t\tconst arrayElement2 = \"test\";",
                "\t\tconst engines2 = [arrayElement2]",
                "\t\tconst options3 = {",
                "\t\t\t\"defaultEngine\": defaultEngine3,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst view2 = new View(localName2, options3)",
                "\t\tconst anon1 = () => {};",
                "\t\tconst callback = -128.84400404838323;",
                "\t\tconst renderReturnValue1 = await view2.render(anon1, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 203.60788381819316;",
                "\t\tconst options = false;",
                "\t\tconst anon = 111;",
                "\t\tconst anon1 = false;",
                "\t\tconst view = new View(localName, options, anon, anon1)",
                "\t\tconst options1 = {}",
                "\t\tconst callback = {}",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = 203.60788381819316;",
                "\t\tconst options2 = false;",
                "\t\tconst anon2 = 111;",
                "\t\tconst anon3 = false;",
                "\t\tconst view1 = new View(localName1, options2, anon2, anon3)",
                "\t\tconst options3 = {}",
                "\t\tconst callback1 = null;",
                "\t\tconst anon4 = () => {};",
                "\t\tconst renderReturnValue1 = await view1.render(options3, callback1, anon4)",
                "\t\tconst localName2 = 203.60788381819316;",
                "\t\tconst options4 = false;",
                "\t\tconst anon5 = 111;",
                "\t\tconst anon6 = false;",
                "\t\tconst view2 = new View(localName2, options4, anon5, anon6)",
                "\t\tconst anon7 = false;",
                "\t\tconst options5 = {}",
                "\t\tconst renderReturnValue2 = await view2.render(anon7, options5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 365;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = \"bA'aKr+Dn$X 4#ZeGo\\ntZUps§3`b§<3\\\\:HX\";",
                "\t\tconst callback = false;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 712.7305143237527;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = -1;",
                "\t\tconst file = {}",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file)",
                "\t\tconst localName1 = 712.7305143237527;",
                "\t\tconst options1 = false;",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst options2 = \"'app.router' is deprecated!\\nPlease see the 3.x to 4.x migration guide for details on how to update your app.\";",
                "\t\tconst callback = () => {};",
                "\t\tconst renderReturnValue = await view1.render(options2, callback)",
                "\t\tconst localName2 = 712.7305143237527;",
                "\t\tconst options3 = false;",
                "\t\tconst view2 = new View(localName2, options3)",
                "\t\tconst options4 = \"'app.router' is deprecated!\\nPlease see the 3.x to 4.x migration guide for details on how to update your app.\";",
                "\t\tconst callback1 = () => {};",
                "\t\tconst arrayElement = \"0\";",
                "\t\tconst callback2 = [callback1, arrayElement]",
                "\t\tconst renderReturnValue1 = await view2.render(options4, callback2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 333.46096656397276;",
                "\t\tconst defaultEngine = \"Ekd#77cptLFfS\\\\P§As[O^?%X(1$\\n{{y~!m5}uie>Hdmq+wo&:WxKK±ZR[|aY}+§2,\\\\,\";",
                "\t\tconst root = \"query parser\";",
                "\t\tconst engines = \"host\";",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = null;",
                "\t\tconst anon = 60;",
                "\t\tconst anon1 = null;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1, anon, anon1)",
                "\t\tconst localName2 = 333.46096656397276;",
                "\t\tconst defaultEngine1 = \"Ekd#77cptLFfS\\\\P§As[O^?%X(1$\\n{{y~!m5}uie>Hdmq+wo&:WxKK±ZR[|aY}+§2,\\\\,\";",
                "\t\tconst root1 = \"query parser\";",
                "\t\tconst engines1 = \"host\";",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName2, options1)",
                "\t\tconst localDir = \"name must be a string to req.get\";",
                "\t\tconst file = false;",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, file)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -928.0972126283641;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = 475;",
                "\t\tconst callback = \"callback function required\";",
                "\t\tconst arrayElement = 2.718281828459045;",
                "\t\tconst arrayElement1 = true;",
                "\t\tconst anon = [arrayElement, arrayElement1]",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon)",
                "\t\tconst localName1 = -928.0972126283641;",
                "\t\tconst options2 = true;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst options3 = () => {};",
                "\t\tconst callback1 = \"callback function required\";",
                "\t\tconst anon1 = {}",
                "\t\tconst renderReturnValue1 = await view1.render(options3, callback1, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 40.434124305485966;",
                "\t\tconst options = true;",
                "\t\tconst anon = \"xBNjd'Y$L%t;>FZ+A7{za'2I)2oH51[7*>nv#\\\\+$kIP<\";",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst options1 = {}",
                "\t\tconst callback = {}",
                "\t\tconst anon1 = 0;",
                "\t\tconst anon2 = true;",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon1, anon2)",
                "\t\tconst localName1 = 40.434124305485966;",
                "\t\tconst options2 = true;",
                "\t\tconst anon3 = \"xBNjd'Y$L%t;>FZ+A7{za'2I)2oH51[7*>nv#\\\\+$kIP<\";",
                "\t\tconst view1 = new View(localName1, options2, anon3)",
                "\t\tconst localName2 = null;",
                "\t\tconst lookupReturnValue = await view1.lookup(localName2)",
                "\t\tconst localName3 = 40.434124305485966;",
                "\t\tconst options3 = true;",
                "\t\tconst anon4 = \"xBNjd'Y$L%t;>FZ+A7{za'2I)2oH51[7*>nv#\\\\+$kIP<\";",
                "\t\tconst view2 = new View(localName3, options3, anon4)",
                "\t\tconst localName4 = 40.434124305485966;",
                "\t\tconst anon5 = \"): Use req.params, req.body, or req.query instead\";",
                "\t\tconst lookupReturnValue1 = await view2.lookup(localName4, anon5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -217.86460219313994;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = false;",
                "\t\tconst callback = () => {};",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = -217.86460219313994;",
                "\t\tconst options2 = false;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst options3 = {}",
                "\t\tconst callback1 = \"tIdE-EU\\tp/TDfJ\\\"Z:A\\n%1z,1\\tL\\nF=IAUFR9/sKg(TS\";",
                "\t\tconst renderReturnValue1 = await view1.render(options3, callback1)",
                "\t\tconst localName2 = -217.86460219313994;",
                "\t\tconst options4 = false;",
                "\t\tconst view2 = new View(localName2, options4)",
                "\t\tconst options5 = \". Redirecting to \";",
                "\t\tconst callback2 = 400;",
                "\t\tconst renderReturnValue2 = await view2.render(options5, callback2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -591.8726940087088;",
                "\t\tconst options = false;",
                "\t\tconst anon = () => {};",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localName1 = 304;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\tconst localName2 = -591.8726940087088;",
                "\t\tconst options1 = false;",
                "\t\tconst anon1 = () => {};",
                "\t\tconst view1 = new View(localName2, options1, anon1)",
                "\t\tconst localDir = null;",
                "\t\tconst localName3 = 304;",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, localName3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -790.3347702663556;",
                "\t\tconst options = false;",
                "\t\tconst anon = \"nN:71fLti[/4ry,d7J6W/5jHoL6$Ev$B|cG_\\tL;g±\\\"5u'}ay\";",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst arrayElement = \"*eRz-SQYS(cZU.\\tMA{f3^\";",
                "\t\tconst arrayElement1 = {}",
                "\t\tconst localName1 = [arrayElement, arrayElement1]",
                "\t\tconst anon1 = () => {};",
                "\t\tconst lookupReturnValue = await view.lookup(localName1, anon1)",
                "\t\tconst localName2 = -790.3347702663556;",
                "\t\tconst options1 = false;",
                "\t\tconst anon2 = \"nN:71fLti[/4ry,d7J6W/5jHoL6$Ev$B|cG_\\tL;g±\\\"5u'}ay\";",
                "\t\tconst view1 = new View(localName2, options1, anon2)",
                "\t\tconst options2 = {}",
                "\t\tconst callback = 3;",
                "\t\tconst renderReturnValue = await view1.render(options2, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 492.70615692626507;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = \"\\\", \\\"\";",
                "\t\tconst arrayElement2 = true;",
                "\t\tconst arrayElement3 = \"x%±kXHggw7vu1'M4mLc\\\\Xe9>=_%%%EqqY^9b`/Er#8jRG94E,1Jy\\\\QhVvh<W\";",
                "\t\tconst arrayElement4 = [arrayElement, arrayElement1, arrayElement2, arrayElement3]",
                "\t\tconst arrayElement5 = 300;",
                "\t\tconst localDir = [arrayElement4, arrayElement5]",
                "\t\tconst file = false;",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file)",
                "\t\tconst localName1 = 492.70615692626507;",
                "\t\tconst options1 = false;",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst arrayElement6 = {}",
                "\t\tconst arrayElement7 = \"\\\", \\\"\";",
                "\t\tconst arrayElement8 = true;",
                "\t\tconst arrayElement9 = \"x%±kXHggw7vu1'M4mLc\\\\Xe9>=_%%%EqqY^9b`/Er#8jRG94E,1Jy\\\\QhVvh<W\";",
                "\t\tconst arrayElement10 = [arrayElement6, arrayElement7, arrayElement8, arrayElement9]",
                "\t\tconst arrayElement11 = 300;",
                "\t\tconst localDir1 = [arrayElement10, arrayElement11]",
                "\t\tconst file1 = \"env\";",
                "\t\tconst resolveReturnValue1 = await view1.resolve(localDir1, file1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -384.2479705617012;",
                "\t\tconst defaultEngine = true;",
                "\t\tconst root = -658;",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst arrayElement = false;",
                "\t\tconst arrayElement1 = \"cookie-signature\";",
                "\t\tconst options1 = [arrayElement, arrayElement1]",
                "\t\tconst callback = true;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = -384.2479705617012;",
                "\t\tconst defaultEngine1 = true;",
                "\t\tconst root1 = -658;",
                "\t\tconst engines1 = {}",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst localName2 = true;",
                "\t\tconst callback1 = true;",
                "\t\tconst lookupReturnValue = await view1.lookup(localName2, callback1)",
                "\t\tconst localName3 = -384.2479705617012;",
                "\t\tconst defaultEngine2 = true;",
                "\t\tconst root2 = -658;",
                "\t\tconst engines2 = {}",
                "\t\tconst options3 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst view2 = new View(localName3, options3)",
                "\t\tconst arrayElement2 = \"cookie-signature\";",
                "\t\tconst lookupReturnValue1 = await view2.lookup(arrayElement2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 457.7563156066185;",
                "\t\tconst options = true;",
                "\t\tconst anon = undefined;",
                "\t\tconst arrayElement = false;",
                "\t\tconst anon1 = [arrayElement]",
                "\t\tconst view = new View(localName, options, anon, anon1)",
                "\t\tconst localName1 = 457.7563156066185;",
                "\t\tconst options1 = true;",
                "\t\tconst anon2 = undefined;",
                "\t\tconst arrayElement1 = false;",
                "\t\tconst anon3 = [arrayElement1]",
                "\t\tconst view1 = new View(localName1, options1, anon2, anon3)",
                "\t\tconst arrayElement2 = false;",
                "\t\tconst anon4 = [arrayElement2]",
                "\t\tconst callback = \"next\";",
                "\t\tconst anon5 = {}",
                "\t\tconst renderReturnValue = await view1.render(anon4, callback, anon5)",
                "\t\tconst localName2 = 457.7563156066185;",
                "\t\tconst options2 = true;",
                "\t\tconst anon6 = undefined;",
                "\t\tconst arrayElement3 = false;",
                "\t\tconst anon7 = [arrayElement3]",
                "\t\tconst view2 = new View(localName2, options2, anon6, anon7)",
                "\t\tconst options3 = \"QtOQ§(=<`l§l@\\\\5^s+-4qN4\\\\lF`~vdD/bl()Mula ±xg&\";",
                "\t\tconst callback1 = \"n$\";",
                "\t\tconst anon8 = {}",
                "\t\tconst renderReturnValue1 = await view2.render(options3, callback1, anon8)",
                "\t\tconst localName3 = 457.7563156066185;",
                "\t\tconst options4 = true;",
                "\t\tconst anon9 = undefined;",
                "\t\tconst arrayElement4 = false;",
                "\t\tconst anon10 = [arrayElement4]",
                "\t\tconst view3 = new View(localName3, options4, anon9, anon10)",
                "\t\tconst callback2 = \"next\";",
                "\t\tconst callback3 = \"T^XAPXc§,,>8Bi.C\\n9Vil\\\\Nb+,T'OK>(F+t\";",
                "\t\tconst renderReturnValue2 = await view3.render(callback2, callback3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 66.337569729849;",
                "\t\tconst defaultEngine = () => {};",
                "\t\tconst root = \"stream\";",
                "\t\tconst engines = \"boolean\";",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = () => {};",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst options1 = undefined;",
                "\t\tconst callback = null;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -781;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = {}",
                "\t\tconst callback = 38;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = -781;",
                "\t\tconst options2 = false;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst options3 = \"setprototypeof\";",
                "\t\tconst callback1 = () => {};",
                "\t\tconst options4 = false;",
                "\t\tconst renderReturnValue1 = await view1.render(options3, callback1, options4)",
                "\t\tconst localName2 = -781;",
                "\t\tconst options5 = false;",
                "\t\tconst view2 = new View(localName2, options5)",
                "\t\tconst options6 = false;",
                "\t\tconst file = \"hlV#eUOgu\\\\6K&vi2cUX~|''&NZHMhKm-;ZJ}_k4'j\";",
                "\t\tconst resolveReturnValue = await view2.resolve(options6, file)",
                "\t\tconst localName3 = -781;",
                "\t\tconst options7 = false;",
                "\t\tconst view3 = new View(localName3, options7)",
                "\t\tconst options8 = {}",
                "\t\tconst callback2 = 38;",
                "\t\tconst options9 = false;",
                "\t\tconst resolveReturnValue1 = await view3.resolve(options8, callback2, options9)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -418;",
                "\t\tconst defaultEngine = null;",
                "\t\tconst root = 62;",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst arrayElement = \"safe-buffer\";",
                "\t\tconst arrayElement1 = true;",
                "\t\tconst options1 = [arrayElement, arrayElement1]",
                "\t\tconst callback = 420;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 892.6005789871742;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = \"y§`%)V2s-HLDc5NhQ<}6^6h ,'LS}NMN+\\t#!:txB~}l%hQJzqrse/9kv}§\\\\6R*eZ>Q-)NEki\";",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\tconst localName2 = 892.6005789871742;",
                "\t\tconst options1 = false;",
                "\t\tconst view1 = new View(localName2, options1)",
                "\t\tconst localName3 = \"y§`%)V2s-HLDc5NhQ<}6^6h ,'LS}NMN+\\t#!:txB~}l%hQJzqrse/9kv}§\\\\6R*eZ>Q-)NEki\";",
                "\t\tconst localName4 = \"y§`%)V2s-HLDc5NhQ<}6^6h ,'LS}NMN+\\t#!:txB~}l%hQJzqrse/9kv}§\\\\6R*eZ>Q-)NEki\";",
                "\t\tconst file = [localName4]",
                "\t\tconst anon = \"k :3qc4|X'~:-{g9MubZ\\\"k7om/?KxiVlc`6xH6qqF>UR\\\\§[RyxU\";",
                "\t\tconst resolveReturnValue = await view1.resolve(localName3, file, anon)",
                "\t\tconst localName5 = 892.6005789871742;",
                "\t\tconst options2 = false;",
                "\t\tconst view2 = new View(localName5, options2)",
                "\t\tconst options3 = false;",
                "\t\tconst callback = 3;",
                "\t\tconst anon1 = {}",
                "\t\tconst renderReturnValue = await view2.render(options3, callback, anon1)",
                "\t\tconst localName6 = 614.5853981935679;",
                "\t\tconst options4 = false;",
                "\t\tconst view3 = new View(localName6, options4)",
                "\t\tconst options5 = () => {};",
                "\t\tconst localName7 = \"y§`%)V2s-HLDc5NhQ<}6^6h ,'LS}NMN+\\t#!:txB~}l%hQJzqrse/9kv}§\\\\6R*eZ>Q-)NEki\";",
                "\t\tconst file1 = [localName7]",
                "\t\tconst renderReturnValue1 = await view3.render(options5, file1)",
                "\t\tconst localName8 = 892.6005789871742;",
                "\t\tconst options6 = false;",
                "\t\tconst view4 = new View(localName8, options6)",
                "\t\tconst localName9 = {}",
                "\t\tconst lookupReturnValue1 = await view4.lookup(localName9)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 200;",
                "\t\tconst options = true;",
                "\t\tconst anon = null;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localName1 = 200;",
                "\t\tconst options1 = true;",
                "\t\tconst anon1 = null;",
                "\t\tconst view1 = new View(localName1, options1, anon1)",
                "\t\tconst options2 = true;",
                "\t\tconst localName2 = 200;",
                "\t\tconst anon2 = null;",
                "\t\tconst renderReturnValue = await view1.render(options2, localName2, anon2)",
                "\t\tconst localName3 = 200;",
                "\t\tconst options3 = true;",
                "\t\tconst anon3 = null;",
                "\t\tconst view2 = new View(localName3, options3, anon3)",
                "\t\tconst options4 = \"jbFlhJeZ8'BDB$NmN!cmT^'][k§.5\\\\'SA&Z]\";",
                "\t\tconst callback = \"vhost\";",
                "\t\tconst renderReturnValue1 = await view2.render(options4, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -279;",
                "\t\tconst defaultEngine = 68;",
                "\t\tconst root = -180.45721960078868;",
                "\t\tconst engines = \"Router.use() requires a middleware function\";",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = 304;",
                "\t\tconst anon = \"secure\";",
                "\t\tconst lookupReturnValue = await view.lookup(localName1, anon)",
                "\t\tconst localName2 = -279;",
                "\t\tconst defaultEngine1 = 68;",
                "\t\tconst root1 = -180.45721960078868;",
                "\t\tconst engines1 = \"Router.use() requires a middleware function\";",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName2, options1)",
                "\t\tconst options2 = \"EISDIR\";",
                "\t\tconst defaultEngine2 = 68;",
                "\t\tconst renderReturnValue = await view1.render(options2, defaultEngine2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 876;",
                "\t\tconst defaultEngine = {}",
                "\t\tconst root = \"query parser\";",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = 777;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localName1 = 876;",
                "\t\tconst defaultEngine1 = {}",
                "\t\tconst root1 = \"query parser\";",
                "\t\tconst engines1 = {}",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon1 = 777;",
                "\t\tconst view1 = new View(localName1, options1, anon1)",
                "\t\tconst options2 = () => {};",
                "\t\tconst callback = null;",
                "\t\tconst renderReturnValue = await view1.render(options2, callback)",
                "\t\tconst localName2 = 876;",
                "\t\tconst defaultEngine2 = {}",
                "\t\tconst root2 = \"query parser\";",
                "\t\tconst engines2 = {}",
                "\t\tconst options3 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst anon2 = 777;",
                "\t\tconst view2 = new View(localName2, options3, anon2)",
                "\t\tconst callback1 = null;",
                "\t\tconst lookupReturnValue = await view2.lookup(callback1)",
                "\t\tconst localName3 = 876;",
                "\t\tconst defaultEngine3 = {}",
                "\t\tconst root3 = \"query parser\";",
                "\t\tconst engines3 = {}",
                "\t\tconst options4 = {",
                "\t\t\t\"defaultEngine\": defaultEngine3,",
                "\t\t\t\"root\": root3,",
                "\t\t\t\"engines\": engines3",
                "\t\t}",
                "\t\tconst anon3 = 777;",
                "\t\tconst view3 = new View(localName3, options4, anon3)",
                "\t\tconst localName4 = -1;",
                "\t\tconst anon4 = true;",
                "\t\tconst anon5 = \"utf8\";",
                "\t\tconst lookupReturnValue1 = await view3.lookup(localName4, anon4, anon5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 857;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = false;",
                "\t\tconst anon = null;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1, anon)",
                "\t\tconst localName2 = 857;",
                "\t\tconst options1 = true;",
                "\t\tconst view1 = new View(localName2, options1)",
                "\t\tconst arrayElement = false;",
                "\t\tconst arrayElement1 = \"\";",
                "\t\tconst arrayElement2 = 464.3319208581006;",
                "\t\tconst localName3 = 857;",
                "\t\tconst options2 = [arrayElement, arrayElement1, arrayElement2, localName3]",
                "\t\tconst callback = () => {};",
                "\t\tconst renderReturnValue = await view1.render(options2, callback)",
                "\t\tconst localName4 = 857;",
                "\t\tconst options3 = true;",
                "\t\tconst view2 = new View(localName4, options3)",
                "\t\tconst arrayElement3 = \"\";",
                "\t\tconst anon1 = \"res.sendfile: Use res.sendFile instead\";",
                "\t\tconst lookupReturnValue1 = await view2.lookup(arrayElement3, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -995;",
                "\t\tconst options = true;",
                "\t\tconst anon = false;",
                "\t\tconst anon1 = undefined;",
                "\t\tconst view = new View(localName, options, anon, anon1)",
                "\t\tconst options1 = -973;",
                "\t\tconst callback = \"0Q<V s{LQB`d\\\\:c+'43uIa71F[G}Adq-O?S6&L\\nh'rKP[`opmvb-H1v@yC:I{|Ht?jSr)\\n,6%).G(NBd=|7N§/w]<|AugA\";",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = -995;",
                "\t\tconst options2 = true;",
                "\t\tconst anon2 = false;",
                "\t\tconst anon3 = undefined;",
                "\t\tconst view1 = new View(localName1, options2, anon2, anon3)",
                "\t\tconst options3 = \"\\\\u003c\";",
                "\t\tconst callback1 = \"a`$_±'?gmi\\n:>G+WVx!1)eEy'X\\n&i*jt'64.}M#d2x|c}m_Lz1e±4\\nYj1\\\\dl%GF!%DAF~rvj[E>}AZ~u'\";",
                "\t\tconst renderReturnValue1 = await view1.render(options3, callback1)",
                "\t\tconst localName2 = \"qV,MzH29Q\\nvK(\\\"\\nT>lnRjhm|±uxW2OB'\\n,_Lz,M@a__-Z!4`Xh2§BDBRR)Yw|>NG-yBe&g7UpmqzDi!F{I_8@ltP9#a&\";",
                "\t\tconst defaultEngine = 346.84320992718335;",
                "\t\tconst root = null;",
                "\t\tconst engines = 304;",
                "\t\tconst options4 = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view2 = new View(localName2, options4)",
                "\t\tconst anon4 = undefined;",
                "\t\tconst callback2 = \"on-finished\";",
                "\t\tconst renderReturnValue2 = await view2.render(anon4, callback2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -577.5332124210017;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = true;",
                "\t\tconst file = true;",
                "\t\tconst arrayElement = false;",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst arrayElement2 = null;",
                "\t\tconst arrayElement3 = [arrayElement1, arrayElement2]",
                "\t\tconst anon = [arrayElement, arrayElement3]",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file, anon)",
                "\t\tconst localName1 = -577.5332124210017;",
                "\t\tconst options1 = false;",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst arrayElement4 = null;",
                "\t\tconst arrayElement5 = null;",
                "\t\tconst renderReturnValue = await view1.render(arrayElement4, arrayElement5)",
                "\t\tconst localName2 = -577.5332124210017;",
                "\t\tconst options2 = false;",
                "\t\tconst view2 = new View(localName2, options2)",
                "\t\tconst localName3 = -577.5332124210017;",
                "\t\tconst callback = {}",
                "\t\tconst renderReturnValue1 = await view2.render(localName3, callback)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 501;",
                "\t\tconst defaultEngine = null;",
                "\t\tconst root = true;",
                "\t\tconst engines = \"Q9\";",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = {}",
                "\t\tconst anon1 = \"&7|8FKoE-2(3#§EcIyjs|HAfF[Z\";",
                "\t\tconst view = new View(localName, options, anon, anon1)",
                "\t\tconst localName1 = 501;",
                "\t\tconst defaultEngine1 = null;",
                "\t\tconst root1 = true;",
                "\t\tconst engines1 = \"Q9\";",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon2 = {}",
                "\t\tconst anon3 = \"&7|8FKoE-2(3#§EcIyjs|HAfF[Z\";",
                "\t\tconst view1 = new View(localName1, options1, anon2, anon3)",
                "\t\tconst options2 = []",
                "\t\tconst callback = 2.718281828459045;",
                "\t\tconst renderReturnValue = await view1.render(options2, callback)",
                "\t\tconst localName2 = 501;",
                "\t\tconst defaultEngine2 = null;",
                "\t\tconst root2 = true;",
                "\t\tconst engines2 = \"Q9\";",
                "\t\tconst options3 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst anon4 = {}",
                "\t\tconst anon5 = \"&7|8FKoE-2(3#§EcIyjs|HAfF[Z\";",
                "\t\tconst view2 = new View(localName2, options3, anon4, anon5)",
                "\t\tconst options4 = () => {};",
                "\t\tconst defaultEngine3 = null;",
                "\t\tconst renderReturnValue1 = await view2.render(options4, defaultEngine3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 55;",
                "\t\tconst defaultEngine = null;",
                "\t\tconst arrayElement = {}",
                "\t\tconst arrayElement1 = null;",
                "\t\tconst arrayElement2 = {}",
                "\t\tconst root = [arrayElement, arrayElement1, arrayElement2]",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = null;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localName1 = -298.9425324439785;",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\tconst localName2 = 62;",
                "\t\tconst defaultEngine1 = null;",
                "\t\tconst arrayElement3 = {}",
                "\t\tconst arrayElement4 = null;",
                "\t\tconst arrayElement5 = {}",
                "\t\tconst root1 = [arrayElement3, arrayElement4, arrayElement5]",
                "\t\tconst engines1 = {}",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon1 = () => {};",
                "\t\tconst view1 = new View(localName2, options1, anon1)",
                "\t\tconst localDir = undefined;",
                "\t\tconst file = undefined;",
                "\t\tconst anon2 = null;",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, file, anon2)",
                "\t\tconst localName3 = 62;",
                "\t\tconst defaultEngine2 = null;",
                "\t\tconst arrayElement6 = {}",
                "\t\tconst arrayElement7 = null;",
                "\t\tconst arrayElement8 = {}",
                "\t\tconst root2 = [arrayElement6, arrayElement7, arrayElement8]",
                "\t\tconst engines2 = {}",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst anon3 = null;",
                "\t\tconst view2 = new View(localName3, options2, anon3)",
                "\t\tconst options3 = \"get\";",
                "\t\tconst callback = false;",
                "\t\tconst renderReturnValue = await view2.render(options3, callback)",
                "\t\tconst localName4 = 62;",
                "\t\tconst defaultEngine3 = null;",
                "\t\tconst arrayElement9 = {}",
                "\t\tconst arrayElement10 = null;",
                "\t\tconst arrayElement11 = {}",
                "\t\tconst root3 = [arrayElement9, arrayElement10, arrayElement11]",
                "\t\tconst engines3 = {}",
                "\t\tconst options4 = {",
                "\t\t\t\"defaultEngine\": defaultEngine3,",
                "\t\t\t\"root\": root3,",
                "\t\t\t\"engines\": engines3",
                "\t\t}",
                "\t\tconst anon4 = null;",
                "\t\tconst view3 = new View(localName4, options4, anon4)",
                "\t\tconst callback1 = false;",
                "\t\tconst callback2 = 2.718281828459045;",
                "\t\tconst renderReturnValue1 = await view3.render(callback1, callback2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 52;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = {}",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\tconst localName2 = 52;",
                "\t\tconst options1 = true;",
                "\t\tconst view1 = new View(localName2, options1)",
                "\t\tconst localDir = \"maxAge\";",
                "\t\tconst localName3 = 52;",
                "\t\tconst anon = null;",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, localName3, anon)",
                "\t\tconst localName4 = 52;",
                "\t\tconst options2 = true;",
                "\t\tconst view2 = new View(localName4, options2)",
                "\t\tconst localDir1 = \"app.del: Use app.delete instead\";",
                "\t\tconst file = \"Og;n`§<93UbO\\\"@udce]3W[W(C9[\\tL@Wg=MBlI)dX$PD+@D_h[3@66*`}br§mi]SSxT^/>nz\\\\z}'y>^?s$§\";",
                "\t\tconst anon1 = null;",
                "\t\tconst resolveReturnValue1 = await view2.resolve(localDir1, file, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 39.45195858340617;",
                "\t\tconst options = false;",
                "\t\tconst anon = null;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst options1 = {}",
                "\t\tconst callback = \"logger\";",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = 39.45195858340617;",
                "\t\tconst options2 = false;",
                "\t\tconst anon1 = null;",
                "\t\tconst view1 = new View(localName1, options2, anon1)",
                "\t\tconst anon2 = null;",
                "\t\tconst lookupReturnValue = await view1.lookup(anon2)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -963;",
                "\t\tconst options = false;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = () => {};",
                "\t\tconst file = null;",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file)",
                "\t\tconst localName1 = -963;",
                "\t\tconst options1 = false;",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst localDir1 = {}",
                "\t\tconst file1 = \"\\\\u0026\";",
                "\t\tconst resolveReturnValue1 = await view1.resolve(localDir1, file1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -105;",
                "\t\tconst options = true;",
                "\t\tconst anon = false;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst options1 = null;",
                "\t\tconst callback = 300;",
                "\t\tconst anon1 = undefined;",
                "\t\tconst anon2 = false;",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon1, anon2)",
                "\t\tconst localName1 = -105;",
                "\t\tconst options2 = true;",
                "\t\tconst anon3 = false;",
                "\t\tconst view1 = new View(localName1, options2, anon3)",
                "\t\tconst localDir = -982.8352415658633;",
                "\t\tconst file = {}",
                "\t\tconst options3 = null;",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, file, options3)",
                "\t\tconst localName2 = -105;",
                "\t\tconst options4 = true;",
                "\t\tconst anon4 = false;",
                "\t\tconst view2 = new View(localName2, options4, anon4)",
                "\t\tconst options5 = \";:cJw)K9`z>o=S;@T_R`:>gVI(26K?efc7_+rYeVE%$!<TpGRMxZ$?UrM#pa`8$>uJ2K\\\\`\\\\y1Q8m6!;Ns-]c'EkbX{N\";",
                "\t\tconst anon5 = undefined;",
                "\t\tconst renderReturnValue1 = await view2.render(options5, anon5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 251;",
                "\t\tconst options = {}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = null;",
                "\t\tconst callback = 400;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = 251;",
                "\t\tconst options2 = {}",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst options3 = () => {};",
                "\t\tconst callback1 = \"query parser fn\";",
                "\t\tconst renderReturnValue1 = await view1.render(options3, callback1)",
                "\t\tconst localName2 = 204;",
                "\t\tconst options4 = {}",
                "\t\tconst anon = []",
                "\t\tconst view2 = new View(localName2, options4, anon)",
                "\t\tconst localDir = 204;",
                "\t\tconst file = 300;",
                "\t\tconst resolveReturnValue = await view2.resolve(localDir, file)",
                "\t\tconst localName3 = 204;",
                "\t\tconst options5 = {}",
                "\t\tconst anon1 = []",
                "\t\tconst view3 = new View(localName3, options5, anon1)",
                "\t\tconst options6 = () => {};",
                "\t\tconst file1 = 300;",
                "\t\tconst renderReturnValue2 = await view3.render(options6, file1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -135;",
                "\t\tconst defaultEngine = false;",
                "\t\tconst root = () => {};",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = 432.6561435922513;",
                "\t\tconst file = 1000;",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file)",
                "\t\tconst localName1 = -135;",
                "\t\tconst defaultEngine1 = false;",
                "\t\tconst root1 = () => {};",
                "\t\tconst engines1 = {}",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst file1 = 1000;",
                "\t\tconst callback = -899;",
                "\t\tconst renderReturnValue = await view1.render(file1, callback)",
                "\t\tconst localName2 = -135;",
                "\t\tconst defaultEngine2 = false;",
                "\t\tconst root2 = () => {};",
                "\t\tconst engines2 = {}",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst view2 = new View(localName2, options2)",
                "\t\tconst localName3 = -135;",
                "\t\tconst callback1 = \"\";",
                "\t\tconst renderReturnValue1 = await view2.render(localName3, callback1)",
                "\t\tconst localName4 = -135;",
                "\t\tconst defaultEngine3 = false;",
                "\t\tconst root3 = () => {};",
                "\t\tconst engines3 = {}",
                "\t\tconst options3 = {",
                "\t\t\t\"defaultEngine\": defaultEngine3,",
                "\t\t\t\"root\": root3,",
                "\t\t\t\"engines\": engines3",
                "\t\t}",
                "\t\tconst view3 = new View(localName4, options3)",
                "\t\tconst callback2 = \"\";",
                "\t\tconst callback3 = \"ECONNRESET\";",
                "\t\tconst anon = () => {};",
                "\t\tconst renderReturnValue2 = await view3.render(callback2, callback3, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -669.6528267195181;",
                "\t\tconst defaultEngine = null;",
                "\t\tconst root = \"req.acceptsCharset: Use acceptsCharsets instead\";",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst anon = \"%s %s : %s\";",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst options1 = undefined;",
                "\t\tconst callback = null;",
                "\t\tconst anon1 = {}",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon1)",
                "\t\tconst localName1 = -669.6528267195181;",
                "\t\tconst defaultEngine1 = null;",
                "\t\tconst root1 = \"req.acceptsCharset: Use acceptsCharsets instead\";",
                "\t\tconst engines1 = {}",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst anon2 = \"%s %s : %s\";",
                "\t\tconst view1 = new View(localName1, options2, anon2)",
                "\t\tconst localDir = 288;",
                "\t\tconst localName2 = -669.6528267195181;",
                "\t\tconst anon3 = () => {};",
                "\t\tconst engines2 = {}",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, localName2, anon3, engines2)",
                "\t\tconst localName3 = -669.6528267195181;",
                "\t\tconst defaultEngine2 = null;",
                "\t\tconst root2 = \"req.acceptsCharset: Use acceptsCharsets instead\";",
                "\t\tconst engines3 = {}",
                "\t\tconst options3 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines3",
                "\t\t}",
                "\t\tconst anon4 = \"%s %s : %s\";",
                "\t\tconst view2 = new View(localName3, options3, anon4)",
                "\t\tconst localName4 = -669.6528267195181;",
                "\t\tconst anon5 = () => {};",
                "\t\tconst anon6 = true;",
                "\t\tconst renderReturnValue1 = await view2.render(localName4, anon5, anon6)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = true;",
                "\t\tconst options = \"/**/ typeof \";",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localDir = \"ECONNRESET\";",
                "\t\tconst file = {}",
                "\t\tconst anon = undefined;",
                "\t\tconst anon1 = \"@>^$=KxUA±l=r~qZ# `BGK±H3h.5dP K7\\nmfhK\\\\g(V(>\";",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file, anon, anon1)",
                "\t\tconst localName1 = true;",
                "\t\tconst options1 = \"/**/ typeof \";",
                "\t\tconst view1 = new View(localName1, options1)",
                "\t\tconst options2 = null;",
                "\t\tconst file1 = {}",
                "\t\tconst anon2 = () => {};",
                "\t\tconst renderReturnValue = await view1.render(options2, file1, anon2)",
                "\t\tconst localName2 = true;",
                "\t\tconst options3 = \"/**/ typeof \";",
                "\t\tconst view2 = new View(localName2, options3)",
                "\t\tconst options4 = -698;",
                "\t\tconst callback = \"-\\nI+*n\\nmVX§K%7S6\\t&2_Euj\";",
                "\t\tconst renderReturnValue1 = await view2.render(options4, callback)",
                "\t\tconst localName3 = true;",
                "\t\tconst options5 = \"/**/ typeof \";",
                "\t\tconst view3 = new View(localName3, options5)",
                "\t\tconst localName4 = true;",
                "\t\tconst options6 = null;",
                "\t\tconst arrayElement = \"unknown value for query parser function: \";",
                "\t\tconst anon3 = undefined;",
                "\t\tconst options7 = \"/**/ typeof \";",
                "\t\tconst callback1 = [options6, arrayElement, anon3, options7]",
                "\t\tconst renderReturnValue2 = await view3.render(localName4, callback1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 180;",
                "\t\tconst arrayElement = undefined;",
                "\t\tconst defaultEngine = [arrayElement]",
                "\t\tconst root = () => {};",
                "\t\tconst engines = \"[[bVwV{1t~1;\\\"MZ\\\"wUQS#%Lu!\";",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = 0;",
                "\t\tconst callback = {}",
                "\t\tconst anon = \"req.host: Use req.hostname instead\";",
                "\t\tconst anon1 = undefined;",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon, anon1)",
                "\t\tconst localName1 = 180;",
                "\t\tconst arrayElement1 = undefined;",
                "\t\tconst defaultEngine1 = [arrayElement1]",
                "\t\tconst root1 = () => {};",
                "\t\tconst engines1 = \"[[bVwV{1t~1;\\\"MZ\\\"wUQS#%Lu!\";",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst localDir = () => {};",
                "\t\tconst anon2 = \"req.host: Use req.hostname instead\";",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, anon2)",
                "\t\tconst localName2 = 180;",
                "\t\tconst arrayElement2 = undefined;",
                "\t\tconst defaultEngine2 = [arrayElement2]",
                "\t\tconst root2 = () => {};",
                "\t\tconst engines2 = \"[[bVwV{1t~1;\\\"MZ\\\"wUQS#%Lu!\";",
                "\t\tconst options3 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst view2 = new View(localName2, options3)",
                "\t\tconst localDir1 = -370.1159831216992;",
                "\t\tconst file = null;",
                "\t\tconst resolveReturnValue1 = await view2.resolve(localDir1, file)",
                "\t\tconst localName3 = 180;",
                "\t\tconst arrayElement3 = undefined;",
                "\t\tconst defaultEngine3 = [arrayElement3]",
                "\t\tconst root3 = () => {};",
                "\t\tconst engines3 = \"[[bVwV{1t~1;\\\"MZ\\\"wUQS#%Lu!\";",
                "\t\tconst options4 = {",
                "\t\t\t\"defaultEngine\": defaultEngine3,",
                "\t\t\t\"root\": root3,",
                "\t\t\t\"engines\": engines3",
                "\t\t}",
                "\t\tconst view3 = new View(localName3, options4)",
                "\t\tconst arrayElement4 = undefined;",
                "\t\tconst defaultEngine4 = [arrayElement4]",
                "\t\tconst root4 = () => {};",
                "\t\tconst engines4 = \"[[bVwV{1t~1;\\\"MZ\\\"wUQS#%Lu!\";",
                "\t\tconst options5 = {",
                "\t\t\t\"defaultEngine\": defaultEngine4,",
                "\t\t\t\"root\": root4,",
                "\t\t\t\"engines\": engines4",
                "\t\t}",
                "\t\tconst callback1 = false;",
                "\t\tconst renderReturnValue1 = await view3.render(options5, callback1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -496.2090505394371;",
                "\t\tconst defaultEngine = []",
                "\t\tconst root = \"utils.contentDisposition: use content-disposition npm module instead\";",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = () => {};",
                "\t\tconst callback = () => {};",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = -496.2090505394371;",
                "\t\tconst defaultEngine1 = []",
                "\t\tconst root1 = \"utils.contentDisposition: use content-disposition npm module instead\";",
                "\t\tconst engines1 = {}",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst root2 = \"utils.contentDisposition: use content-disposition npm module instead\";",
                "\t\tconst file = \"+3A,0W<~*zP~U,A=\\n*Vzg9[^df-[}>q?&\\\"Ji{oW9@±xc0rLKQU!K5C\";",
                "\t\tconst resolveReturnValue = await view1.resolve(root2, file)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = 620;",
                "\t\tconst defaultEngine = \"L~k4+Lkz±#qpt\";",
                "\t\tconst root = true;",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst localName1 = \"vhost\";",
                "\t\tconst lookupReturnValue = await view.lookup(localName1)",
                "\t\tconst localName2 = 620;",
                "\t\tconst defaultEngine1 = \"L~k4+Lkz±#qpt\";",
                "\t\tconst root1 = true;",
                "\t\tconst engines1 = {}",
                "\t\tconst options1 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName2, options1)",
                "\t\tconst localDir = undefined;",
                "\t\tconst file = undefined;",
                "\t\tconst anon = true;",
                "\t\tconst resolveReturnValue = await view1.resolve(localDir, file, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -621;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = 304;",
                "\t\tconst callback = 62;",
                "\t\tconst renderReturnValue = await view.render(options1, callback)",
                "\t\tconst localName1 = -621;",
                "\t\tconst options2 = true;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst localName2 = -621;",
                "\t\tconst arrayElement = () => {};",
                "\t\tconst arrayElement1 = \"EISDIR\";",
                "\t\tconst file = [arrayElement, arrayElement1]",
                "\t\tconst resolveReturnValue = await view1.resolve(localName2, file)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -493.49040159861477;",
                "\t\tconst options = true;",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = 300;",
                "\t\tconst callback = () => {};",
                "\t\tconst anon = null;",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon)",
                "\t\tconst localName1 = -493.49040159861477;",
                "\t\tconst options2 = true;",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst localName2 = \"PW*!S\\\\r.\\\\Q(#gs^MhUw85=kjumEbB]-3$73oMT]G{(bF1P}Ty+(G/s§k&wBH5@`\\\\J%2*'+qz U^O-U[C${(.*[x±Z4Kc,a\";",
                "\t\tconst lookupReturnValue = await view1.lookup(localName2)",
                "\t\tconst localName3 = -493.49040159861477;",
                "\t\tconst options3 = true;",
                "\t\tconst view2 = new View(localName3, options3)",
                "\t\tconst callback1 = () => {};",
                "\t\tconst options4 = 300;",
                "\t\tconst resolveReturnValue = await view2.resolve(callback1, options4)",
                "\t\tconst localName4 = -493.49040159861477;",
                "\t\tconst options5 = true;",
                "\t\tconst view3 = new View(localName4, options5)",
                "\t\tconst anon1 = null;",
                "\t\tconst localName5 = -493.49040159861477;",
                "\t\tconst renderReturnValue1 = await view3.render(anon1, localName5)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = -254;",
                "\t\tconst options = true;",
                "\t\tconst anon = undefined;",
                "\t\tconst view = new View(localName, options, anon)",
                "\t\tconst localDir = undefined;",
                "\t\tconst file = \"*dFvLTM\";",
                "\t\tconst resolveReturnValue = await view.resolve(localDir, file)",
                "\t\tconst localName1 = -254;",
                "\t\tconst options1 = true;",
                "\t\tconst anon1 = undefined;",
                "\t\tconst view1 = new View(localName1, options1, anon1)",
                "\t\tconst localDir1 = 304;",
                "\t\tconst file1 = \"*dFvLTM\";",
                "\t\tconst options2 = true;",
                "\t\tconst resolveReturnValue1 = await view1.resolve(localDir1, file1, options2)",
                "\t\tconst localName2 = -254;",
                "\t\tconst options3 = true;",
                "\t\tconst anon2 = undefined;",
                "\t\tconst view2 = new View(localName2, options3, anon2)",
                "\t\tconst localName3 = {}",
                "\t\tconst lookupReturnValue = await view2.lookup(localName3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash21": {
        "crashProject": "express",
        "trace": "    at Object.<anonymous> (node_modules/esm/esm.js:1:251951)\n    at Object.t (node_modules/esm/esm.js:1:279775)\n    at require (node_modules/esm/esm.js:1:279589)\n    at new View (express/lib/view.js:81:66)\n    at call (.syntest/tests/tempTest.spec.js:20:24)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "Error [ERR_INVALID_ARG_VALUE]: The argument 'request' must be a non-empty string. Received ''"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet View;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/view.js\")];",
                "\t\t(View = require(\"../instrumented/express/lib/view.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst localName = \"No default engine was specified and no extension was provided.\";",
                "\t\tconst defaultEngine = true;",
                "\t\tconst root = null;",
                "\t\tconst engines = {}",
                "\t\tconst options = {",
                "\t\t\t\"defaultEngine\": defaultEngine,",
                "\t\t\t\"root\": root,",
                "\t\t\t\"engines\": engines",
                "\t\t}",
                "\t\tconst view = new View(localName, options)",
                "\t\tconst options1 = () => {};",
                "\t\tconst callback = {}",
                "\t\tconst anon = false;",
                "\t\tconst renderReturnValue = await view.render(options1, callback, anon)",
                "\t\tconst localName1 = \"No default engine was specified and no extension was provided.\";",
                "\t\tconst defaultEngine1 = true;",
                "\t\tconst root1 = null;",
                "\t\tconst engines1 = {}",
                "\t\tconst options2 = {",
                "\t\t\t\"defaultEngine\": defaultEngine1,",
                "\t\t\t\"root\": root1,",
                "\t\t\t\"engines\": engines1",
                "\t\t}",
                "\t\tconst view1 = new View(localName1, options2)",
                "\t\tconst options3 = \"etag\";",
                "\t\tconst callback1 = \"errorHandler\";",
                "\t\tconst callback2 = {}",
                "\t\tconst renderReturnValue1 = await view1.render(options3, callback1, callback2)",
                "\t\tconst localName2 = \"No default engine was specified and no extension was provided.\";",
                "\t\tconst defaultEngine2 = true;",
                "\t\tconst root2 = null;",
                "\t\tconst engines2 = {}",
                "\t\tconst options4 = {",
                "\t\t\t\"defaultEngine\": defaultEngine2,",
                "\t\t\t\"root\": root2,",
                "\t\t\t\"engines\": engines2",
                "\t\t}",
                "\t\tconst view2 = new View(localName2, options4)",
                "\t\tconst options5 = undefined;",
                "\t\tconst callback3 = () => {};",
                "\t\tconst renderReturnValue2 = await view2.render(options5, callback3)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash22": {
        "crashProject": "express",
        "trace": "    at Object.set (express/lib/application.js:357:25)\n    at Object.arrayElement3 [as disabled] (express/lib/application.js:443:16)\n    at call (.syntest/tests/tempTest.spec.js:23:20)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading 'methodOverride')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet app;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/application.js\")];",
                "\t\t(app = require(\"../instrumented/express/lib/application.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst app1 = app",
                "\t\tconst listenReturnValue = await app1.listen()",
                "\t\tconst app2 = app",
                "\t\tconst setting = \"methodOverride\";",
                "\t\tconst disabledReturnValue = await app2.disabled(setting)",
                "\t\tconst app3 = app",
                "\t\tconst fn = -574;",
                "\t\tconst anon = 1;",
                "\t\tconst useReturnValue = await app3.use(fn, anon)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash23": {
        "crashProject": "express",
        "trace": "    at new NodeError (node:internal/errors:405:5)\n    at validateString (node:internal/validators:162:11)\n    at ServerResponse.getHeader (node:_http_outgoing:719:3)\n    at ServerResponse.get (express/lib/response.js:794:15)\n    at ServerResponse.arrayElement3 [as append] (express/lib/response.js:727:47)\n    at call (.syntest/tests/tempTest.spec.js:21:9)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n    at .syntest/tests/tempTest.spec.js:2:1\n    at new Promise (<anonymous>)\n    at Context.<anonymous> (.syntest/tests/tempTest.spec.js:2:1)\n    at processImmediate (node:internal/timers:478:21)\n",
        "errors": [
            "TypeError: The \"name\" argument must be of type string. Received function field",
            "TypeError: The \"name\" argument must be of type string. Received type number (300)",
            "TypeError: The \"name\" argument must be of type string. Received undefined"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst field = () => {};",
                "\t\tconst arrayElement = true;",
                "\t\tconst arrayElement1 = undefined;",
                "\t\tconst val = [arrayElement, arrayElement1]",
                "\t\tconst appendReturnValue = await res1.append(field, val)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst arrayElement = 300;",
                "\t\tconst val = undefined;",
                "\t\tconst appendReturnValue = await res1.append(arrayElement, val)",
                "\t\t",
                "\t})",
                "})",
                ""
            ],
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst field = undefined;",
                "\t\tconst val = null;",
                "\t\tconst anon = () => {};",
                "\t\tconst appendReturnValue = await res1.append(field, val, anon)",
                "\t\tconst res2 = res",
                "\t\tconst body = \"view\";",
                "\t\tconst anon1 = 3.141592653589793;",
                "\t\tconst localSendReturnValue = await res2.send(body, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash24": {
        "crashProject": "express",
        "trace": "    at ServerResponse.getHeader (node:_http_outgoing:725:24)\n    at ServerResponse.get (express/lib/response.js:794:15)\n    at ServerResponse.View (express/lib/response.js:144:63)\n    at call (.syntest/tests/tempTest.spec.js:29:20)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: Cannot read properties of undefined (reading 'content-type')"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst code = false;",
                "\t\tconst anon = null;",
                "\t\tconst localStatusReturnValue = await res1.status(code, anon)",
                "\t\tconst res2 = res",
                "\t\tconst obj = 104.00787586572847;",
                "\t\tconst arrayElement = 400;",
                "\t\tconst arrayElement1 = \"(/'L]Ft\";",
                "\t\tconst body = [obj, arrayElement, arrayElement1]",
                "\t\tconst anon1 = \", fn) instead\";",
                "\t\tconst localSendReturnValue = await res2.send(body, anon1)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    },
    "crash25": {
        "crashProject": "express",
        "trace": "    at new NodeError (node:internal/errors:405:5)\n    at validateString (node:internal/validators:162:11)\n    at ServerResponse.getHeader (node:_http_outgoing:719:3)\n    at ServerResponse.res.get (express/lib/response.js:794:15)\n    at call (.syntest/tests/tempTest.spec.js:25:4)\n    at tryCatch (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator._invoke (.syntest/tests/tempTest.spec.js:2:1)\n    at Generator.next (.syntest/tests/tempTest.spec.js:2:1)\n    at asyncGeneratorStep (.syntest/tests/tempTest.spec.js:2:1)\n    at _next (.syntest/tests/tempTest.spec.js:2:1)\n",
        "errors": [
            "TypeError: The \"name\" argument must be of type string. Received function field"
        ],
        "tests": [
            [
                "// Imports",
                "require = require('esm')(module)",
                "",
                "describe('SynTest Test Suite', function() {",
                "\tlet res;",
                "\tbeforeEach(() => {",
                "\t\t// This is a hack to force the require cache to be emptied",
                "\t\t// Without this we would be using the same required object for each test",
                "\t\tdelete require.cache[require.resolve(\"../instrumented/express/lib/response.js\")];",
                "\t\t(res = require(\"../instrumented/express/lib/response.js\"));",
                "\t});",
                "",
                "\tit(\"Test 1\", async () => {",
                "\t\t// Test",
                "\t\tconst res1 = res",
                "\t\tconst code = \"i)/r~[4A|h%b_-t^pVkZVxK?:4AVL8H2'Vfq3p@XYmUO}P h;l.U)\\nkOL\\\\M_D9G*d\\\\)jc4s=A\";",
                "\t\tconst statusCode = {}",
                "\t\tconst localStatusReturnValue = await res1.status(code, statusCode)",
                "\t\tconst res2 = res",
                "\t\tconst field = () => {};",
                "\t\tconst getReturnValue = await res2.get(field)",
                "\t\t",
                "\t})",
                "})",
                ""
            ]
        ]
    }
}